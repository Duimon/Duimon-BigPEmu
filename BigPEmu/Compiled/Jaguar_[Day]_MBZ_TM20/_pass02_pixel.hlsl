cbuffer UBO : register(b0)
{
    row_major float4x4 global_MVP : packoffset(c0);
    float4 global_SourceSize : packoffset(c4);
    float4 global_OriginalSize : packoffset(c5);
    float4 global_OriginalFeedbackSize : packoffset(c6);
    float4 global_OutputSize : packoffset(c7);
    float4 global_FinalViewportSize : packoffset(c8);
    float4 global_DerezedPassSize : packoffset(c9);
    int global_FrameDirection : packoffset(c10);
    uint global_FrameCount : packoffset(c10.y);
    float global_HSM_RESOLUTION_DEBUG_ON : packoffset(c10.z);
    float global_HSM_SINDEN_BORDER_ON : packoffset(c10.w);
    float global_HSM_SINDEN_BORDER_OPACITY : packoffset(c11);
    float global_HSM_SINDEN_BORDER_BRIGHTNESS : packoffset(c11.y);
    float global_HSM_SINDEN_AMBIENT_LIGHTING : packoffset(c11.z);
    float global_HSM_SINDEN_BORDER_THICKNESS : packoffset(c11.w);
    float global_HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION : packoffset(c12);
    float global_HSM_CACHE_GRAPHICS_ON : packoffset(c12.y);
    float global_HSM_CACHE_UPDATE_INDICATOR_MODE : packoffset(c12.z);
    float global_HSM_GLOBAL_GRAPHICS_BRIGHTNESS : packoffset(c12.w);
    float global_HSM_STATIC_LAYERS_GAMMA : packoffset(c13);
    float global_HSM_AMBIENT_LIGHTING_OPACITY : packoffset(c13.y);
    float global_HSM_AMBIENT1_OPACITY : packoffset(c13.z);
    float global_HSM_AMBIENT2_OPACITY : packoffset(c13.w);
    float global_HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE : packoffset(c14);
    float global_HSM_AMBIENT1_HUE : packoffset(c14.y);
    float global_HSM_AMBIENT1_SATURATION : packoffset(c14.z);
    float global_HSM_AMBIENT1_VALUE : packoffset(c14.w);
    float global_HSM_AMBIENT1_CONTRAST : packoffset(c15);
    float global_HSM_AMBIENT1_SCALE_KEEP_ASPECT : packoffset(c15.y);
    float global_HSM_AMBIENT1_SCALE_INHERIT_MODE : packoffset(c15.z);
    float global_HSM_AMBIENT1_SCALE : packoffset(c15.w);
    float global_HSM_AMBIENT1_SCALE_X : packoffset(c16);
    float global_HSM_AMBIENT1_ROTATE : packoffset(c16.y);
    float global_HSM_AMBIENT1_MIRROR_HORZ : packoffset(c16.z);
    float global_HSM_AMBIENT1_POS_INHERIT_MODE : packoffset(c16.w);
    float global_HSM_AMBIENT1_POSITION_X : packoffset(c17);
    float global_HSM_AMBIENT1_POSITION_Y : packoffset(c17.y);
    float global_HSM_AMBIENT1_DITHERING_SAMPLES : packoffset(c17.z);
    float global_HSM_AMBIENT2_HUE : packoffset(c17.w);
    float global_HSM_AMBIENT2_SATURATION : packoffset(c18);
    float global_HSM_AMBIENT2_VALUE : packoffset(c18.y);
    float global_HSM_AMBIENT2_CONTRAST : packoffset(c18.z);
    float global_HSM_AMBIENT2_SCALE_KEEP_ASPECT : packoffset(c18.w);
    float global_HSM_AMBIENT2_SCALE_INHERIT_MODE : packoffset(c19);
    float global_HSM_AMBIENT2_SCALE : packoffset(c19.y);
    float global_HSM_AMBIENT2_SCALE_X : packoffset(c19.z);
    float global_HSM_AMBIENT2_ROTATE : packoffset(c19.w);
    float global_HSM_AMBIENT2_MIRROR_HORZ : packoffset(c20);
    float global_HSM_AMBIENT2_POS_INHERIT_MODE : packoffset(c20.y);
    float global_HSM_AMBIENT2_POSITION_X : packoffset(c20.z);
    float global_HSM_AMBIENT2_POSITION_Y : packoffset(c20.w);
    float global_HSM_VIEWPORT_ZOOM : packoffset(c21);
    float global_HSM_VIEWPORT_POSITION_X : packoffset(c21.y);
    float global_HSM_VIEWPORT_POSITION_Y : packoffset(c21.z);
    float global_HSM_VIEWPORT_ZOOM_MASK : packoffset(c21.w);
    float global_HSM_FLIP_VIEWPORT_VERTICAL : packoffset(c22);
    float global_HSM_FLIP_VIEWPORT_HORIZONTAL : packoffset(c22.y);
    float global_HSM_FLIP_CORE_VERTICAL : packoffset(c22.z);
    float global_HSM_FLIP_CORE_HORIZONTAL : packoffset(c22.w);
    float global_HSM_ROTATE_CORE_IMAGE : packoffset(c23);
    float global_HSM_ASPECT_RATIO_ORIENTATION : packoffset(c23.y);
    float global_HSM_ASPECT_RATIO_MODE : packoffset(c23.z);
    float global_HSM_ASPECT_RATIO_EXPLICIT : packoffset(c23.w);
    float global_HSM_INT_SCALE_MODE : packoffset(c24);
    float global_HSM_INT_SCALE_MULTIPLE_OFFSET : packoffset(c24.y);
    float global_HSM_INT_SCALE_MULTIPLE_OFFSET_LONG : packoffset(c24.z);
    float global_HSM_INT_SCALE_MAX_HEIGHT : packoffset(c24.w);
    float global_HSM_VERTICAL_PRESET : packoffset(c25);
    float global_HSM_NON_INTEGER_SCALE : packoffset(c25.y);
    float global_HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER : packoffset(c25.z);
    float global_HSM_PHYSICAL_MONITOR_ASPECT_RATIO : packoffset(c25.w);
    float global_HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE : packoffset(c26);
    float global_HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE : packoffset(c26.y);
    float global_HSM_USE_IMAGE_FOR_PLACEMENT : packoffset(c26.z);
    float global_HSM_PLACEMENT_IMAGE_USE_HORIZONTAL : packoffset(c26.w);
    float global_HSM_PLACEMENT_IMAGE_MODE : packoffset(c27);
    float global_HSM_NON_INTEGER_SCALE_OFFSET : packoffset(c27.y);
    float global_HSM_USE_SNAP_TO_CLOSEST_INT_SCALE : packoffset(c27.z);
    float global_HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE : packoffset(c27.w);
    float global_HSM_SCREEN_POSITION_X : packoffset(c28);
    float global_HSM_SCREEN_POSITION_Y : packoffset(c28.y);
    float global_HSM_CROP_MODE : packoffset(c28.z);
    float global_HSM_CROP_PERCENT_ZOOM : packoffset(c28.w);
    float global_HSM_CROP_PERCENT_TOP : packoffset(c29);
    float global_HSM_CROP_PERCENT_BOTTOM : packoffset(c29.y);
    float global_HSM_CROP_PERCENT_LEFT : packoffset(c29.z);
    float global_HSM_CROP_PERCENT_RIGHT : packoffset(c29.w);
    float global_HSM_CROP_BLACK_THRESHOLD : packoffset(c30);
    float global_HSM_SCANLINE_DIRECTION : packoffset(c30.y);
    float global_HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR : packoffset(c30.z);
    float global_HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR : packoffset(c30.w);
    float global_HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR : packoffset(c31);
    float global_HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR : packoffset(c31.y);
    float global_HSM_CORE_RES_SAMPLING_SHIFT_OPPOSITE_DIR : packoffset(c31.z);
    float global_HSM_INTERLACE_TRIGGER_RES : packoffset(c31.w);
    float global_HSM_INTERLACE_MODE : packoffset(c32);
    float global_HSM_INTERLACE_EFFECT_SMOOTHNESS_INTERS : packoffset(c32.y);
    float global_HSM_INTERLACE_SCANLINE_EFFECT : packoffset(c32.z);
    float global_iscans : packoffset(c32.w);
    float global_HSM_FAKE_SCANLINE_MODE : packoffset(c33);
    float global_HSM_FAKE_SCANLINE_OPACITY : packoffset(c33.y);
    float global_HSM_FAKE_SCANLINE_RES_MODE : packoffset(c33.z);
    float global_HSM_FAKE_SCANLINE_RES : packoffset(c33.w);
    float global_HSM_FAKE_SCANLINE_INT_SCALE : packoffset(c34);
    float global_HSM_FAKE_SCANLINE_ROLL : packoffset(c34.y);
    float global_HSM_FAKE_SCANLINE_CURVATURE : packoffset(c34.z);
    float global_HSM_FAKE_SCANLINE_BRIGHTNESS_CUTOFF : packoffset(c34.w);
    float global_HSM_DUALSCREEN_MODE : packoffset(c35);
    float global_HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE : packoffset(c35.y);
    float global_HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS : packoffset(c35.z);
    float global_HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET : packoffset(c35.w);
    float global_HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION : packoffset(c36);
    float global_HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE : packoffset(c36.y);
    float global_HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS : packoffset(c36.z);
    float global_HSM_2ND_SCREEN_ASPECT_RATIO_MODE : packoffset(c36.w);
    float global_HSM_2ND_SCREEN_INDEPENDENT_SCALE : packoffset(c37);
    float global_HSM_2ND_SCREEN_SCALE_OFFSET : packoffset(c37.y);
    float global_HSM_2ND_SCREEN_POS_X : packoffset(c37.z);
    float global_HSM_2ND_SCREEN_POS_Y : packoffset(c37.w);
    float global_HSM_2ND_SCREEN_CROP_PERCENT_ZOOM : packoffset(c38);
    float global_HSM_2ND_SCREEN_CROP_PERCENT_TOP : packoffset(c38.y);
    float global_HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM : packoffset(c38.z);
    float global_HSM_2ND_SCREEN_CROP_PERCENT_LEFT : packoffset(c38.w);
    float global_HSM_2ND_SCREEN_CROP_PERCENT_RIGHT : packoffset(c39);
    float global_HSM_CURVATURE_MODE : packoffset(c39.y);
    float global_HSM_CURVATURE_2D_SCALE_LONG_AXIS : packoffset(c39.z);
    float global_HSM_CURVATURE_2D_SCALE_SHORT_AXIS : packoffset(c39.w);
    float global_HSM_CURVATURE_3D_RADIUS : packoffset(c40);
    float global_HSM_CURVATURE_3D_VIEW_DIST : packoffset(c40.y);
    float global_HSM_CURVATURE_3D_TILT_ANGLE_X : packoffset(c40.z);
    float global_HSM_CURVATURE_3D_TILT_ANGLE_Y : packoffset(c40.w);
    float global_HSM_CRT_CURVATURE_SCALE : packoffset(c41);
    float global_HSM_SIGNAL_NOISE_ON : packoffset(c41.y);
    float global_HSM_SIGNAL_NOISE_AMOUNT : packoffset(c41.z);
    float global_HSM_SIGNAL_NOISE_BLACK_LEVEL : packoffset(c41.w);
    float global_HSM_SIGNAL_NOISE_SIZE_MODE : packoffset(c42);
    float global_HSM_SIGNAL_NOISE_SIZE_MULT : packoffset(c42.y);
    float global_HSM_SIGNAL_NOISE_TYPE : packoffset(c42.z);
    float global_HSM_ANTI_FLICKER_ON : packoffset(c42.w);
    float global_HSM_ANTI_FLICKER_THRESHOLD : packoffset(c43);
    float global_HSM_AB_COMPARE_SHOW_MODE : packoffset(c43.y);
    float global_HSM_AB_COMPARE_AREA : packoffset(c43.z);
    float global_HSM_AB_COMPARE_FREEZE_CRT_TUBE : packoffset(c43.w);
    float global_HSM_AB_COMPARE_FREEZE_GRAPHICS : packoffset(c44);
    float global_HSM_AB_COMPARE_SPLIT_AREA : packoffset(c44.y);
    float global_HSM_AB_COMPARE_SPLIT_POSITION : packoffset(c44.z);
    float global_HSM_SHOW_PASS_INDEX : packoffset(c44.w);
    float global_HSM_SHOW_PASS_ALPHA : packoffset(c45);
    float global_HSM_SHOW_PASS_APPLY_SCREEN_COORD : packoffset(c45.y);
    float global_HSM_SCREEN_VIGNETTE_ON : packoffset(c45.z);
    float global_HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE : packoffset(c45.w);
    float global_HSM_SCREEN_VIGNETTE_STRENGTH : packoffset(c46);
    float global_HSM_SCREEN_VIGNETTE_POWER : packoffset(c46.y);
    float global_HSM_SCREEN_VIGNETTE_IN_REFLECTION : packoffset(c46.z);
    float global_HSM_MONOCHROME_MODE : packoffset(c46.w);
    float global_HSM_MONOCHROME_BRIGHTNESS : packoffset(c47);
    float global_HSM_MONOCHROME_GAMMA : packoffset(c47.y);
    float global_HSM_MONOCHROME_HUE_OFFSET : packoffset(c47.z);
    float global_HSM_MONOCHROME_SATURATION : packoffset(c47.w);
    float global_HSM_MONOCHROME_DUALSCREEN_VIS_MODE : packoffset(c48);
    float global_HSM_SCREEN_REFLECTION_SCALE : packoffset(c48.y);
    float global_HSM_SCREEN_REFLECTION_POS_X : packoffset(c48.z);
    float global_HSM_SCREEN_REFLECTION_POS_Y : packoffset(c48.w);
    float global_HSM_TUBE_DIFFUSE_MODE : packoffset(c49);
    float global_HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE : packoffset(c49.y);
    float global_HSM_TUBE_OPACITY : packoffset(c49.z);
    float global_HSM_TUBE_DIFFUSE_IMAGE_AMOUNT : packoffset(c49.w);
    float global_HSM_TUBE_DIFFUSE_IMAGE_HUE : packoffset(c50);
    float global_HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON : packoffset(c50.y);
    float global_HSM_TUBE_DIFFUSE_IMAGE_SATURATION : packoffset(c50.z);
    float global_HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS : packoffset(c50.w);
    float global_HSM_TUBE_DIFFUSE_IMAGE_GAMMA : packoffset(c51);
    float global_HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING : packoffset(c51.y);
    float global_HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING : packoffset(c51.z);
    float global_HSM_TUBE_DIFFUSE_IMAGE_SCALE : packoffset(c51.w);
    float global_HSM_TUBE_DIFFUSE_IMAGE_SCALE_X : packoffset(c52);
    float global_HSM_TUBE_DIFFUSE_IMAGE_ROTATION : packoffset(c52.y);
    float global_HSM_TUBE_EMPTY_THICKNESS : packoffset(c52.z);
    float global_HSM_TUBE_EMPTY_THICKNESS_X_SCALE : packoffset(c52.w);
    float global_HSM_TUBE_DIFFUSE_FORCE_ASPECT : packoffset(c53);
    float global_HSM_TUBE_EXPLICIT_ASPECT : packoffset(c53.y);
    float global_HSM_SCREEN_CORNER_RADIUS_SCALE : packoffset(c53.z);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_ON : packoffset(c53.w);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE : packoffset(c54);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT : packoffset(c54.y);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT : packoffset(c54.z);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS : packoffset(c54.w);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE : packoffset(c55);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD : packoffset(c55.y);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT : packoffset(c55.z);
    float global_HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL : packoffset(c55.w);
    float global_HSM_TUBE_SHADOW_IMAGE_ON : packoffset(c56);
    float global_HSM_TUBE_SHADOW_IMAGE_OPACITY : packoffset(c56.y);
    float global_HSM_TUBE_SHADOW_IMAGE_SCALE_X : packoffset(c56.z);
    float global_HSM_TUBE_SHADOW_IMAGE_SCALE_Y : packoffset(c56.w);
    float global_HSM_TUBE_SHADOW_IMAGE_POS_X : packoffset(c57);
    float global_HSM_TUBE_SHADOW_IMAGE_POS_Y : packoffset(c57.y);
    float global_HSM_TUBE_SHADOW_CURVATURE_SCALE : packoffset(c57.z);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING : packoffset(c57.w);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING : packoffset(c58);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT : packoffset(c58.y);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_SCALE : packoffset(c58.z);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL : packoffset(c58.w);
    float global_HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL : packoffset(c59);
    float global_HSM_TUBE_STATIC_REFLECTION_IMAGE_ON : packoffset(c59.y);
    float global_HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE : packoffset(c59.z);
    float global_HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY : packoffset(c59.w);
    float global_HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY : packoffset(c60);
    float global_HSM_TUBE_STATIC_BLACK_LEVEL : packoffset(c60.y);
    float global_HSM_TUBE_STATIC_AMBIENT_LIGHTING : packoffset(c60.z);
    float global_HSM_TUBE_STATIC_AMBIENT2_LIGHTING : packoffset(c60.w);
    float global_HSM_TUBE_STATIC_SCALE : packoffset(c61);
    float global_HSM_TUBE_STATIC_SCALE_X : packoffset(c61.y);
    float global_HSM_TUBE_STATIC_POS_X : packoffset(c61.z);
    float global_HSM_TUBE_STATIC_POS_Y : packoffset(c61.w);
    float global_HSM_TUBE_STATIC_SHADOW_OPACITY : packoffset(c62);
    float global_HSM_TUBE_STATIC_DITHER_SAMPLES : packoffset(c62.y);
    float global_HSM_TUBE_STATIC_DITHER_DISTANCE : packoffset(c62.z);
    float global_HSM_TUBE_STATIC_DITHER_AMOUNT : packoffset(c62.w);
    float global_HSM_CRT_BLEND_MODE : packoffset(c63);
    float global_HSM_CRT_BLEND_AMOUNT : packoffset(c63.y);
    float global_HSM_CRT_SCREEN_BLEND_MODE : packoffset(c63.z);
    float global_HSM_GLOBAL_CORNER_RADIUS : packoffset(c63.w);
    float global_HSM_TUBE_BLACK_EDGE_CORNER_RADIUS_SCALE : packoffset(c64);
    float global_HSM_TUBE_BLACK_EDGE_SHARPNESS : packoffset(c64.y);
    float global_HSM_TUBE_BLACK_EDGE_CURVATURE_SCALE : packoffset(c64.z);
    float global_HSM_TUBE_BLACK_EDGE_THICKNESS : packoffset(c64.w);
    float global_HSM_TUBE_BLACK_EDGE_THICKNESS_X_SCALE : packoffset(c65);
    float global_HSM_BZL_USE_INDEPENDENT_SCALE : packoffset(c65.y);
    float global_HSM_BZL_INDEPENDENT_SCALE : packoffset(c65.z);
    float global_HSM_BZL_USE_INDEPENDENT_CURVATURE : packoffset(c65.w);
    float global_HSM_BZL_INDEPENDENT_CURVATURE_SCALE_LONG_AXIS : packoffset(c66);
    float global_HSM_BZL_INDEPENDENT_CURVATURE_SCALE_SHORT_AXIS : packoffset(c66.y);
    float global_HSM_BZL_OPACITY : packoffset(c66.z);
    float global_HSM_BZL_BLEND_MODE : packoffset(c66.w);
    float global_HSM_BZL_WIDTH : packoffset(c67);
    float global_HSM_BZL_HEIGHT : packoffset(c67.y);
    float global_HSM_BZL_SCALE_OFFSET : packoffset(c67.z);
    float global_HSM_BZL_INNER_CURVATURE_SCALE : packoffset(c67.w);
    float global_HSM_BZL_INNER_CORNER_RADIUS_SCALE : packoffset(c68);
    float global_HSM_BZL_OUTER_CURVATURE_SCALE : packoffset(c68.y);
    float global_HSM_BZL_INNER_EDGE_THICKNESS : packoffset(c68.z);
    float global_HSM_BZL_INNER_EDGE_SHARPNESS : packoffset(c68.w);
    float global_HSM_BZL_OUTER_CORNER_RADIUS_SCALE : packoffset(c69);
    float global_HSM_BZL_INNER_EDGE_SHADOW : packoffset(c69.y);
    float global_HSM_BZL_COLOR_HUE : packoffset(c69.z);
    float global_HSM_BZL_COLOR_SATURATION : packoffset(c69.w);
    float global_HSM_BZL_COLOR_VALUE : packoffset(c70);
    float global_HSM_BZL_NOISE : packoffset(c70.y);
    float global_HSM_BZL_BRIGHTNESS : packoffset(c70.z);
    float global_HSM_BZL_BRIGHTNESS_MULT_TOP : packoffset(c70.w);
    float global_HSM_BZL_BRIGHTNESS_MULT_BOTTOM : packoffset(c71);
    float global_HSM_BZL_BRIGHTNESS_MULT_SIDES : packoffset(c71.y);
    float global_HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT : packoffset(c71.z);
    float global_HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT : packoffset(c71.w);
    float global_HSM_BZL_HIGHLIGHT : packoffset(c72);
    float global_HSM_BZL_INNER_EDGE_HIGHLIGHT : packoffset(c72.y);
    float global_HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c72.z);
    float global_HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c72.w);
    float global_HSM_FRM_USE_INDEPENDENT_COLOR : packoffset(c73);
    float global_HSM_FRM_COLOR_HUE : packoffset(c73.y);
    float global_HSM_FRM_COLOR_SATURATION : packoffset(c73.z);
    float global_HSM_FRM_COLOR_VALUE : packoffset(c73.w);
    float global_HSM_FRM_NOISE : packoffset(c74);
    float global_HSM_FRM_OUTER_CURVATURE_SCALE : packoffset(c74.y);
    float global_HSM_FRM_THICKNESS : packoffset(c74.z);
    float global_HSM_FRM_THICKNESS_SCALE_X : packoffset(c74.w);
    float global_HSM_FRM_OUTER_POS_Y : packoffset(c75);
    float global_HSM_FRM_INNER_EDGE_THICKNESS : packoffset(c75.y);
    float global_HSM_FRM_INNER_EDGE_HIGHLIGHT : packoffset(c75.z);
    float global_HSM_FRM_OUTER_EDGE_THICKNESS : packoffset(c75.w);
    float global_HSM_FRM_OUTER_EDGE_SHADING : packoffset(c76);
    float global_HSM_FRM_OUTER_CORNER_RADIUS : packoffset(c76.y);
    float global_HSM_BZL_OUTER_POSITION_Y : packoffset(c76.z);
    float global_HSM_FRM_SHADOW_OPACITY : packoffset(c76.w);
    float global_HSM_FRM_SHADOW_WIDTH : packoffset(c77);
    float global_HSM_REFLECT_CORNER_FADE : packoffset(c77.y);
    float global_HSM_REFLECT_CORNER_INNER_SPREAD : packoffset(c77.z);
    float global_HSM_REFLECT_CORNER_OUTER_SPREAD : packoffset(c77.w);
    float global_HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP : packoffset(c78);
    float global_HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM : packoffset(c78.y);
    float global_HSM_REFLECT_CORNER_SPREAD_FALLOFF : packoffset(c78.z);
    float global_HSM_REFLECT_CORNER_FADE_DISTANCE : packoffset(c78.w);
    float global_HSM_REFLECT_GLOBAL_AMOUNT : packoffset(c79);
    float global_HSM_REFLECT_GLOBAL_GAMMA_ADJUST : packoffset(c79.y);
    float global_HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT : packoffset(c79.z);
    float global_HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW : packoffset(c79.w);
    float global_HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT : packoffset(c80);
    float global_HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS : packoffset(c80.y);
    float global_HSM_REFLECT_SHOW_TUBE_FX_AMOUNT : packoffset(c80.z);
    float global_HSM_REFLECT_DIRECT_AMOUNT : packoffset(c80.w);
    float global_HSM_REFLECT_DIFFUSED_AMOUNT : packoffset(c81);
    float global_HSM_REFLECT_FULLSCREEN_GLOW : packoffset(c81.y);
    float global_HSM_REFLECT_FULLSCREEN_GLOW_GAMMA : packoffset(c81.z);
    float global_HSM_REFLECT_FADE_AMOUNT : packoffset(c81.w);
    float global_HSM_REFLECT_RADIAL_FADE_WIDTH : packoffset(c82);
    float global_HSM_REFLECT_RADIAL_FADE_HEIGHT : packoffset(c82.y);
    float global_HSM_REFLECT_LATERAL_OUTER_FADE_POSITION : packoffset(c82.z);
    float global_HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE : packoffset(c82.w);
    float global_HSM_REFLECT_NOISE_AMOUNT : packoffset(c83);
    float global_HSM_REFLECT_NOISE_SAMPLES : packoffset(c83.y);
    float global_HSM_REFLECT_NOISE_SAMPLE_DISTANCE : packoffset(c83.z);
    float global_HSM_REFLECT_BLUR_NUM_SAMPLES : packoffset(c83.w);
    float global_HSM_REFLECT_BLUR_FALLOFF_DISTANCE : packoffset(c84);
    float global_HSM_REFLECT_BLUR_MIN : packoffset(c84.y);
    float global_HSM_REFLECT_BLUR_MAX : packoffset(c84.z);
    float global_HSM_REFLECT_MASK_IMAGE_AMOUNT : packoffset(c84.w);
    float global_HSM_REFLECT_MASK_FOLLOW_LAYER : packoffset(c85);
    float global_HSM_REFLECT_MASK_FOLLOW_MODE : packoffset(c85.y);
    float global_HSM_REFLECT_MASK_BRIGHTNESS : packoffset(c85.z);
    float global_HSM_REFLECT_MASK_BLACK_LEVEL : packoffset(c85.w);
    float global_HSM_REFLECT_MASK_MIPMAPPING_BLEND_BIAS : packoffset(c86);
    float global_HSM_GLASS_BORDER_ON : packoffset(c86.y);
    float global_HSM_REFLECT_VIGNETTE_AMOUNT : packoffset(c86.z);
    float global_HSM_REFLECT_VIGNETTE_SIZE : packoffset(c86.w);
    float global_HSM_POTATO_SHOW_BG_OVER_SCREEN : packoffset(c87);
    float global_HSM_POTATO_COLORIZE_CRT_WITH_BG : packoffset(c87.y);
    float global_HSM_POTATO_COLORIZE_BRIGHTNESS : packoffset(c87.z);
    float global_HSM_STANDARD_DECAL_SCALE_WITH_FRAME : packoffset(c87.w);
    float global_HSM_STANDARD_TOP_SCALE_WITH_FRAME : packoffset(c88);
    float global_HSM_BG_LAYER_ORDER : packoffset(c88.y);
    float global_HSM_VIEWPORT_VIGNETTE_LAYER_ORDER : packoffset(c88.z);
    float global_HSM_CRT_LAYER_ORDER : packoffset(c88.w);
    float global_HSM_DEVICE_LAYER_ORDER : packoffset(c89);
    float global_HSM_DEVICELED_LAYER_ORDER : packoffset(c89.y);
    float global_HSM_CAB_GLASS_LAYER_ORDER : packoffset(c89.z);
    float global_HSM_DECAL_LAYER_ORDER : packoffset(c89.w);
    float global_HSM_LED_LAYER_ORDER : packoffset(c90);
    float global_HSM_TOP_LAYER_ORDER : packoffset(c90.y);
    float global_HSM_CUTOUT_ASPECT_MODE : packoffset(c90.z);
    float global_HSM_CUTOUT_EXPLICIT_ASPECT : packoffset(c90.w);
    float global_HSM_CUTOUT_FOLLOW_LAYER : packoffset(c91);
    float global_HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM : packoffset(c91.y);
    float global_HSM_CUTOUT_SCALE : packoffset(c91.z);
    float global_HSM_CUTOUT_SCALE_X : packoffset(c91.w);
    float global_HSM_CUTOUT_CORNER_RADIUS : packoffset(c92);
    float global_HSM_CUTOUT_POS_X : packoffset(c92.y);
    float global_HSM_CUTOUT_POS_Y : packoffset(c92.z);
    float global_HSM_BG_OPACITY : packoffset(c92.w);
    float global_HSM_BG_HUE : packoffset(c93);
    float global_HSM_BG_COLORIZE_ON : packoffset(c93.y);
    float global_HSM_BG_SATURATION : packoffset(c93.z);
    float global_HSM_BG_BRIGHTNESS : packoffset(c93.w);
    float global_HSM_BG_GAMMA : packoffset(c94);
    float global_HSM_BG_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c94.y);
    float global_HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c94.z);
    float global_HSM_BG_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c94.w);
    float global_HSM_BG_BLEND_MODE : packoffset(c95);
    float global_HSM_BG_SOURCE_MATTE_TYPE : packoffset(c95.y);
    float global_HSM_BG_MASK_MODE : packoffset(c95.z);
    float global_HSM_BG_CUTOUT_MODE : packoffset(c95.w);
    float global_HSM_BG_DUALSCREEN_VIS_MODE : packoffset(c96);
    float global_HSM_BG_FOLLOW_LAYER : packoffset(c96.y);
    float global_HSM_BG_FOLLOW_MODE : packoffset(c96.z);
    float global_HSM_BG_FOLLOW_FULL_USES_ZOOM : packoffset(c96.w);
    float global_HSM_BG_FILL_MODE : packoffset(c97);
    float global_HSM_BG_SPLIT_PRESERVE_CENTER : packoffset(c97.y);
    float global_HSM_BG_SPLIT_REPEAT_WIDTH : packoffset(c97.z);
    float global_HSM_BG_SCALE : packoffset(c97.w);
    float global_HSM_BG_SCALE_X : packoffset(c98);
    float global_HSM_BG_POS_X : packoffset(c98.y);
    float global_HSM_BG_POS_Y : packoffset(c98.z);
    float global_HSM_BG_WRAP_MODE : packoffset(c98.w);
    float global_HSM_BG_MIPMAPPING_BLEND_BIAS : packoffset(c99);
    float global_HSM_VIEWPORT_VIGNETTE_OPACITY : packoffset(c99.y);
    float global_HSM_VIEWPORT_VIGNETTE_MASK_MODE : packoffset(c99.z);
    float global_HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE : packoffset(c99.w);
    float global_HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER : packoffset(c100);
    float global_HSM_VIEWPORT_VIGNETTE_SCALE : packoffset(c100.y);
    float global_HSM_VIEWPORT_VIGNETTE_SCALE_X : packoffset(c100.z);
    float global_HSM_VIEWPORT_VIGNETTE_POS_X : packoffset(c100.w);
    float global_HSM_VIEWPORT_VIGNETTE_POS_Y : packoffset(c101);
    float global_HSM_LED_OPACITY : packoffset(c101.y);
    float global_HSM_LED_HUE : packoffset(c101.z);
    float global_HSM_LED_COLORIZE_ON : packoffset(c101.w);
    float global_HSM_LED_SATURATION : packoffset(c102);
    float global_HSM_LED_BRIGHTNESS : packoffset(c102.y);
    float global_HSM_LED_GAMMA : packoffset(c102.z);
    float global_HSM_LED_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c102.w);
    float global_HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c103);
    float global_HSM_LED_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c103.y);
    float global_HSM_LED_BLEND_MODE : packoffset(c103.z);
    float global_HSM_LED_SOURCE_MATTE_TYPE : packoffset(c103.w);
    float global_HSM_LED_MASK_MODE : packoffset(c104);
    float global_HSM_LED_CUTOUT_MODE : packoffset(c104.y);
    float global_HSM_LED_DUALSCREEN_VIS_MODE : packoffset(c104.z);
    float global_HSM_LED_FOLLOW_LAYER : packoffset(c104.w);
    float global_HSM_LED_FOLLOW_MODE : packoffset(c105);
    float global_HSM_LED_FOLLOW_FULL_USES_ZOOM : packoffset(c105.y);
    float global_HSM_LED_FILL_MODE : packoffset(c105.z);
    float global_HSM_LED_SPLIT_PRESERVE_CENTER : packoffset(c105.w);
    float global_HSM_LED_SPLIT_REPEAT_WIDTH : packoffset(c106);
    float global_HSM_LED_SCALE : packoffset(c106.y);
    float global_HSM_LED_SCALE_X : packoffset(c106.z);
    float global_HSM_LED_POS_X : packoffset(c106.w);
    float global_HSM_LED_POS_Y : packoffset(c107);
    float global_HSM_LED_MIPMAPPING_BLEND_BIAS : packoffset(c107.y);
    float global_HSM_DEVICE_OPACITY : packoffset(c107.z);
    float global_HSM_DEVICE_HUE : packoffset(c107.w);
    float global_HSM_DEVICE_COLORIZE_ON : packoffset(c108);
    float global_HSM_DEVICE_SATURATION : packoffset(c108.y);
    float global_HSM_DEVICE_BRIGHTNESS : packoffset(c108.z);
    float global_HSM_DEVICE_GAMMA : packoffset(c108.w);
    float global_HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c109);
    float global_HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c109.y);
    float global_HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c109.z);
    float global_HSM_DEVICE_BLEND_MODE : packoffset(c109.w);
    float global_HSM_DEVICE_SOURCE_MATTE_TYPE : packoffset(c110);
    float global_HSM_DEVICE_MASK_MODE : packoffset(c110.y);
    float global_HSM_DEVICE_CUTOUT_MODE : packoffset(c110.z);
    float global_HSM_DEVICE_DUALSCREEN_VIS_MODE : packoffset(c110.w);
    float global_HSM_DEVICE_FOLLOW_LAYER : packoffset(c111);
    float global_HSM_DEVICE_FOLLOW_MODE : packoffset(c111.y);
    float global_HSM_DEVICE_FOLLOW_FULL_USES_ZOOM : packoffset(c111.z);
    float global_HSM_DEVICE_FILL_MODE : packoffset(c111.w);
    float global_HSM_DEVICE_SPLIT_PRESERVE_CENTER : packoffset(c112);
    float global_HSM_DEVICE_SPLIT_REPEAT_WIDTH : packoffset(c112.y);
    float global_HSM_DEVICE_SCALE : packoffset(c112.z);
    float global_HSM_DEVICE_SCALE_X : packoffset(c112.w);
    float global_HSM_DEVICE_POS_X : packoffset(c113);
    float global_HSM_DEVICE_POS_Y : packoffset(c113.y);
    float global_HSM_DEVICE_MIPMAPPING_BLEND_BIAS : packoffset(c113.z);
    float global_HSM_DEVICELED_OPACITY : packoffset(c113.w);
    float global_HSM_DEVICELED_HUE : packoffset(c114);
    float global_HSM_DEVICELED_COLORIZE_ON : packoffset(c114.y);
    float global_HSM_DEVICELED_SATURATION : packoffset(c114.z);
    float global_HSM_DEVICELED_BRIGHTNESS : packoffset(c114.w);
    float global_HSM_DEVICELED_GAMMA : packoffset(c115);
    float global_HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c115.y);
    float global_HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c115.z);
    float global_HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c115.w);
    float global_HSM_DEVICELED_BLEND_MODE : packoffset(c116);
    float global_HSM_DEVICELED_SOURCE_MATTE_TYPE : packoffset(c116.y);
    float global_HSM_DEVICELED_MASK_MODE : packoffset(c116.z);
    float global_HSM_DEVICELED_CUTOUT_MODE : packoffset(c116.w);
    float global_HSM_DEVICELED_DUALSCREEN_VIS_MODE : packoffset(c117);
    float global_HSM_DEVICELED_FOLLOW_LAYER : packoffset(c117.y);
    float global_HSM_DEVICELED_FOLLOW_MODE : packoffset(c117.z);
    float global_HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM : packoffset(c117.w);
    float global_HSM_DEVICELED_FILL_MODE : packoffset(c118);
    float global_HSM_DEVICELED_SPLIT_PRESERVE_CENTER : packoffset(c118.y);
    float global_HSM_DEVICELED_SPLIT_REPEAT_WIDTH : packoffset(c118.z);
    float global_HSM_DEVICELED_SCALE : packoffset(c118.w);
    float global_HSM_DEVICELED_SCALE_X : packoffset(c119);
    float global_HSM_DEVICELED_POS_X : packoffset(c119.y);
    float global_HSM_DEVICELED_POS_Y : packoffset(c119.z);
    float global_HSM_DEVICELED_MIPMAPPING_BLEND_BIAS : packoffset(c119.w);
    float global_HSM_FRM_OPACITY : packoffset(c120);
    float global_HSM_FRM_BLEND_MODE : packoffset(c120.y);
    float global_HSM_FRM_TEXTURE_OPACITY : packoffset(c120.z);
    float global_HSM_FRM_TEXTURE_BLEND_MODE : packoffset(c120.w);
    float global_HSM_DECAL_OPACITY : packoffset(c121);
    float global_HSM_DECAL_HUE : packoffset(c121.y);
    float global_HSM_DECAL_COLORIZE_ON : packoffset(c121.z);
    float global_HSM_DECAL_SATURATION : packoffset(c121.w);
    float global_HSM_DECAL_BRIGHTNESS : packoffset(c122);
    float global_HSM_DECAL_GAMMA : packoffset(c122.y);
    float global_HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c122.z);
    float global_HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c122.w);
    float global_HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c123);
    float global_HSM_DECAL_BLEND_MODE : packoffset(c123.y);
    float global_HSM_DECAL_SOURCE_MATTE_TYPE : packoffset(c123.z);
    float global_HSM_DECAL_MASK_MODE : packoffset(c123.w);
    float global_HSM_DECAL_CUTOUT_MODE : packoffset(c124);
    float global_HSM_DECAL_DUALSCREEN_VIS_MODE : packoffset(c124.y);
    float global_HSM_DECAL_FOLLOW_LAYER : packoffset(c124.z);
    float global_HSM_DECAL_FOLLOW_MODE : packoffset(c124.w);
    float global_HSM_DECAL_FOLLOW_FULL_USES_ZOOM : packoffset(c125);
    float global_HSM_DECAL_FILL_MODE : packoffset(c125.y);
    float global_HSM_DECAL_SPLIT_PRESERVE_CENTER : packoffset(c125.z);
    float global_HSM_DECAL_SPLIT_REPEAT_WIDTH : packoffset(c125.w);
    float global_HSM_DECAL_SCALE : packoffset(c126);
    float global_HSM_DECAL_SCALE_X : packoffset(c126.y);
    float global_HSM_DECAL_POS_X : packoffset(c126.z);
    float global_HSM_DECAL_POS_Y : packoffset(c126.w);
    float global_HSM_DECAL_MIPMAPPING_BLEND_BIAS : packoffset(c127);
    float global_HSM_CAB_GLASS_OPACITY : packoffset(c127.y);
    float global_HSM_CAB_GLASS_HUE : packoffset(c127.z);
    float global_HSM_CAB_GLASS_COLORIZE_ON : packoffset(c127.w);
    float global_HSM_CAB_GLASS_SATURATION : packoffset(c128);
    float global_HSM_CAB_GLASS_BRIGHTNESS : packoffset(c128.y);
    float global_HSM_CAB_GLASS_GAMMA : packoffset(c128.z);
    float global_HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c128.w);
    float global_HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c129);
    float global_HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c129.y);
    float global_HSM_CAB_GLASS_BLEND_MODE : packoffset(c129.z);
    float global_HSM_CAB_GLASS_SOURCE_MATTE_TYPE : packoffset(c129.w);
    float global_HSM_CAB_GLASS_MASK_MODE : packoffset(c130);
    float global_HSM_CAB_GLASS_CUTOUT_MODE : packoffset(c130.y);
    float global_HSM_CAB_GLASS_DUALSCREEN_VIS_MODE : packoffset(c130.z);
    float global_HSM_CAB_GLASS_FOLLOW_LAYER : packoffset(c130.w);
    float global_HSM_CAB_GLASS_FOLLOW_MODE : packoffset(c131);
    float global_HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM : packoffset(c131.y);
    float global_HSM_CAB_GLASS_FILL_MODE : packoffset(c131.z);
    float global_HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER : packoffset(c131.w);
    float global_HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH : packoffset(c132);
    float global_HSM_CAB_GLASS_SCALE : packoffset(c132.y);
    float global_HSM_CAB_GLASS_SCALE_X : packoffset(c132.z);
    float global_HSM_CAB_GLASS_POS_X : packoffset(c132.w);
    float global_HSM_CAB_GLASS_POS_Y : packoffset(c133);
    float global_HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS : packoffset(c133.y);
    float global_HSM_TOP_OPACITY : packoffset(c133.z);
    float global_HSM_TOP_HUE : packoffset(c133.w);
    float global_HSM_TOP_COLORIZE_ON : packoffset(c134);
    float global_HSM_TOP_SATURATION : packoffset(c134.y);
    float global_HSM_TOP_BRIGHTNESS : packoffset(c134.z);
    float global_HSM_TOP_GAMMA : packoffset(c134.w);
    float global_HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER : packoffset(c135);
    float global_HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER : packoffset(c135.y);
    float global_HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE : packoffset(c135.z);
    float global_HSM_TOP_BLEND_MODE : packoffset(c135.w);
    float global_HSM_TOP_SOURCE_MATTE_TYPE : packoffset(c136);
    float global_HSM_TOP_MASK_MODE : packoffset(c136.y);
    float global_HSM_TOP_CUTOUT_MODE : packoffset(c136.z);
    float global_HSM_TOP_DUALSCREEN_VIS_MODE : packoffset(c136.w);
    float global_HSM_TOP_FOLLOW_LAYER : packoffset(c137);
    float global_HSM_TOP_FOLLOW_MODE : packoffset(c137.y);
    float global_HSM_TOP_FOLLOW_FULL_USES_ZOOM : packoffset(c137.z);
    float global_HSM_TOP_FILL_MODE : packoffset(c137.w);
    float global_HSM_TOP_SPLIT_PRESERVE_CENTER : packoffset(c138);
    float global_HSM_TOP_SPLIT_REPEAT_WIDTH : packoffset(c138.y);
    float global_HSM_TOP_SCALE : packoffset(c138.z);
    float global_HSM_TOP_SCALE_X : packoffset(c138.w);
    float global_HSM_TOP_POS_X : packoffset(c139);
    float global_HSM_TOP_POS_Y : packoffset(c139.y);
    float global_HSM_TOP_MIRROR_WRAP : packoffset(c139.z);
    float global_HSM_TOP_MIPMAPPING_BLEND_BIAS : packoffset(c139.w);
    float global_HSM_RENDER_SIMPLE_MODE : packoffset(c140);
    float global_HSM_RENDER_SIMPLE_MASK_TYPE : packoffset(c140.y);
    float global_HSM_LAYERING_DEBUG_MASK_MODE : packoffset(c140.z);
    float global_HSM_INTRO_LOGO_BLEND_MODE : packoffset(c140.w);
    float global_HSM_INTRO_LOGO_FLIP_VERTICAL : packoffset(c141);
    float global_HSM_INTRO_NOISE_BLEND_MODE : packoffset(c141.y);
    float global_HSM_INTRO_NOISE_HOLD : packoffset(c141.z);
    float global_HSM_INTRO_NOISE_FADE_OUT : packoffset(c141.w);
    float global_HSM_INTRO_SOLID_BLACK_HOLD : packoffset(c142);
    float global_HSM_INTRO_SOLID_BLACK_FADE_OUT : packoffset(c142.y);
    float global_HSM_INTRO_SOLID_COLOR_BLEND_MODE : packoffset(c142.z);
    float global_HSM_INTRO_LOGO_OVER_SOLID_COLOR : packoffset(c142.w);
    float global_HSM_INTRO_LOGO_PLACEMENT : packoffset(c143);
    float global_HSM_INTRO_LOGO_HEIGHT : packoffset(c143.y);
    float global_HSM_INTRO_LOGO_POS_X : packoffset(c143.z);
    float global_HSM_INTRO_LOGO_POS_Y : packoffset(c143.w);
    float global_HSM_INTRO_WHEN_TO_SHOW : packoffset(c144);
    float global_HSM_INTRO_SPEED : packoffset(c144.y);
    float global_HSM_INTRO_LOGO_WAIT : packoffset(c144.z);
    float global_HSM_INTRO_LOGO_FADE_IN : packoffset(c144.w);
    float global_HSM_INTRO_LOGO_HOLD : packoffset(c145);
    float global_HSM_INTRO_LOGO_FADE_OUT : packoffset(c145.y);
    float global_HSM_INTRO_SOLID_COLOR_HUE : packoffset(c145.z);
    float global_HSM_INTRO_SOLID_COLOR_SAT : packoffset(c145.w);
    float global_HSM_INTRO_SOLID_COLOR_VALUE : packoffset(c146);
    float global_HSM_INTRO_SOLID_COLOR_HOLD : packoffset(c146.y);
    float global_HSM_INTRO_SOLID_COLOR_FADE_OUT : packoffset(c146.z);
    float global_GAMMA_INPUT : packoffset(c146.w);
    float global_gamma_out : packoffset(c147);
    float global_post_br : packoffset(c147.y);
    float global_post_br_affect_black_level : packoffset(c147.z);
    float global_m_glow : packoffset(c147.w);
    float global_m_glow_low : packoffset(c148);
    float global_m_glow_high : packoffset(c148.y);
    float global_m_glow_dist : packoffset(c148.z);
    float global_m_glow_mask : packoffset(c148.w);
    float global_smask_mit : packoffset(c149);
    float global_glow : packoffset(c149.y);
    float global_bloom : packoffset(c149.z);
    float global_mask_bloom : packoffset(c149.w);
    float global_bloom_dist : packoffset(c150);
    float global_halation : packoffset(c150.y);
    float global_TATE : packoffset(c150.z);
    float global_IOS : packoffset(c150.w);
    float global_HSM_OVERSCAN_RASTER_BLOOM_ON : packoffset(c151);
    float global_HSM_OVERSCAN_RASTER_BLOOM_MODE : packoffset(c151.y);
    float global_HSM_OVERSCAN_RASTER_BLOOM_AMOUNT : packoffset(c151.z);
    float global_HSM_OVERSCAN_AMOUNT : packoffset(c151.w);
    float global_HSM_OVERSCAN_X : packoffset(c152);
    float global_HSM_OVERSCAN_Y : packoffset(c152.y);
    float global_intres : packoffset(c152.z);
    float global_prescalex : packoffset(c152.w);
    float global_c_shape : packoffset(c153);
    float global_sborder : packoffset(c153.y);
    float global_csize : packoffset(c153.z);
    float global_bsize1 : packoffset(c153.w);
    float global_warpX : packoffset(c154);
    float global_warpY : packoffset(c154.y);
    float global_gamma_c : packoffset(c154.z);
    float global_brightboost : packoffset(c154.w);
    float global_brightboost1 : packoffset(c155);
    float global_blendMode : packoffset(c155.y);
    float global_gsl : packoffset(c155.z);
    float global_scanline1 : packoffset(c155.w);
    float global_scanline2 : packoffset(c156);
    float global_beam_min : packoffset(c156.y);
    float global_beam_max : packoffset(c156.z);
    float global_beam_size : packoffset(c156.w);
    float global_vertmask : packoffset(c157);
    float global_scans : packoffset(c157.y);
    float global_scan_falloff : packoffset(c157.z);
    float global_spike : packoffset(c157.w);
    float global_ring : packoffset(c158);
    float global_no_scanlines : packoffset(c158.y);
    float global_scangamma : packoffset(c158.z);
    float global_rolling_scan : packoffset(c158.w);
    float global_h_sharp : packoffset(c159);
    float global_s_sharp : packoffset(c159.y);
    float global_smart_ei : packoffset(c159.z);
    float global_ei_limit : packoffset(c159.w);
    float global_sth : packoffset(c160);
    float global_barspeed : packoffset(c160.y);
    float global_barintensity : packoffset(c160.z);
    float global_bardir : packoffset(c160.w);
    float global_shadowMask : packoffset(c161);
    float global_maskstr : packoffset(c161.y);
    float global_mcut : packoffset(c161.z);
    float global_maskboost : packoffset(c161.w);
    float global_masksize : packoffset(c162);
    float global_masksizeautothreshold : packoffset(c162.y);
    float global_maskDark : packoffset(c162.z);
    float global_maskLight : packoffset(c162.w);
    float global_mask_gamma : packoffset(c163);
    float global_slotmask : packoffset(c163.y);
    float global_slotmask1 : packoffset(c163.z);
    float global_slotwidth : packoffset(c163.w);
    float global_double_slot : packoffset(c164);
    float global_slotms : packoffset(c164.y);
    float global_mclip : packoffset(c164.z);
    float global_smoothmask : packoffset(c164.w);
    float global_mshift : packoffset(c165);
    float global_mask_layout : packoffset(c165.y);
    float global_GDV_DECONVERGENCE_ON : packoffset(c165.z);
    float global_decons : packoffset(c165.w);
    float global_deconrr : packoffset(c166);
    float global_deconrg : packoffset(c166.y);
    float global_deconrb : packoffset(c166.z);
    float global_deconrry : packoffset(c166.w);
    float global_deconrgy : packoffset(c167);
    float global_deconrby : packoffset(c167.y);
    float global_deconsmooth : packoffset(c167.z);
    float global_dctypex : packoffset(c167.w);
    float global_dctypey : packoffset(c168);
    float global_dcscalemode : packoffset(c168.y);
    float global_GDV_NOISE_ON : packoffset(c168.z);
    float global_addnoised : packoffset(c168.w);
    float global_noisetype : packoffset(c169);
    float global_noiseresd : packoffset(c169.y);
    float global_noiseresd4kmult : packoffset(c169.z);
    float global_g_grade_on : packoffset(c169.w);
    float global_wp_temperature : packoffset(c170);
    float global_g_satr : packoffset(c170.y);
    float global_g_satg : packoffset(c170.z);
    float global_g_satb : packoffset(c170.w);
    float global_AS : packoffset(c171);
    float global_asat : packoffset(c171.y);
    float global_hcrt_h_size : packoffset(c171.z);
    float global_hcrt_v_size : packoffset(c171.w);
    float global_hcrt_h_cent : packoffset(c172);
    float global_hcrt_v_cent : packoffset(c172.y);
    float global_hcrt_pin_phase : packoffset(c172.z);
    float global_hcrt_pin_amp : packoffset(c172.w);
};

Texture2D<float4> InfoCachePass : register(t8);
SamplerState _InfoCachePass_sampler : register(s8);
Texture2D<float4> TextPassFeedback : register(t2);
SamplerState _TextPassFeedback_sampler : register(s2);
Texture2D<float4> InfoCachePassFeedback : register(t9);
SamplerState _InfoCachePassFeedback_sampler : register(s9);

static float2 vTexCoord;
static float4 FragColor;

struct SPIRV_Cross_Input
{
    float2 vTexCoord : TEXCOORD0;
};

struct SPIRV_Cross_Output
{
    float4 FragColor : SV_Target0;
};

static float FOLLOW_MODE_SCALE_AND_POS;
static float FOLLOW_MODE_EXACT;
static float NEGATIVE_CROP_EXPAND_MULTIPLIER;
static float MAX_NEGATIVE_CROP;
static float DEFAULT_SCREEN_ASPECT;
static float DEFAULT_BEZEL_ASPECT;
static float2 DEFAULT_SCREEN_SCALE;
static float2 DEFAULT_BEZEL_SCALE;
static int INFOCACHE_MAX_INDEX;
static bool CACHE_INFO_CHANGED;
static float CURRENT_FRAME_FROM_CACHE_INFO;
static float TUBE_DIFFUSE_MASK;
static float TUBE_MASK;
static float BEZEL_MASK;
static float INSIDE_BEZEL_MASK;
static float OUTSIDE_TUBE_MASK_FOR_IMAGE;
static float FRAME_MASK;
static float FRAME_MASK_FOR_IMAGE;
static float OUTSIDE_BEZEL_MASK;
static float OUTSIDE_FRAME_MASK_FOR_IMAGE;
static float OUTSIDE_FRAME_MASK;
static float CUTOUT_MASK;
static float SCREEN_INDEX;
static float SCREEN_ASPECT;
static float2 SCREEN_SCALE;
static float2 SCREEN_SCALE_WITH_ZOOM;
static float2 SCREEN_POS_OFFSET;
static float2 SCREEN_SCALE_2ND_SCREEN;
static float2 SCREEN_POS_OFFSET_1ST_SCREEN;
static float2 SCREEN_POS_OFFSET_2ND_SCREEN;
static float2 VIEWPORT_SCALE;
static float2 VIEWPORT_POS;
static float2 TUBE_SCALE;
static float2 TUBE_DIFFUSE_SCALE;
static float TUBE_DIFFUSE_ASPECT;
static float2 TUBE_DIFFUSE_SCALE_1ST_SCREEN;
static float2 TUBE_DIFFUSE_SCALE_2ND_SCREEN;
static float2 FRAME_SCALE;
static float2 BEZEL_OUTSIDE_SCALE;
static float2 BACKGROUND_SCALE;
static float2 LED_SCALE;
static float2 DEVICE_SCALE;
static float2 DEVICELED_SCALE;
static float2 DECAL_SCALE;
static float2 CAB_GLASS_SCALE;
static float2 TOP_IMAGE_SCALE;
static float AVERAGE_LUMA;
static float USE_VERTICAL_SCANLINES;
static float SAMPLING_SCANLINE_DIR_MULT;
static float SAMPLING_OPPOSITE_DIR_MULT;
static float2 CORE_SIZE;
static float2 ROTATED_CORE_ORIGINAL_SIZE;
static float2 ROTATED_CORE_PREPPED_SIZE;
static float2 ROTATED_DEREZED_SIZE;
static float2 CROPPED_ROTATED_SIZE_WITH_RES_MULT;
static float2 CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK;
static float2 CROPPED_ROTATED_SIZE;
static float2 SAMPLE_AREA_START_PIXEL_COORD;
static float2 SCREEN_SIZE;
static float2 VIEWPORT_UNSCALED_COORD;
static float2 SCREEN_COORD;
static float2 TUBE_COORD;
static float2 TUBE_DIFFUSE_COORD;
static float2 TUBE_DIFFUSE_COORD_MIXED_POS;
static float2 BEZEL_OUTSIDE_COORD;
static float2 BACKGROUND_COORD;
static float2 DEVICE_COORD;
static float2 DEVICELED_COORD;
static float2 LED_COORD;
static float2 DECAL_COORD;
static float2 CAB_GLASS_COORD;
static float2 TOP_IMAGE_COORD;
static float2 SCREEN_CURVED_COORD;
static float2 TUBE_CURVED_COORD;
static float2 TUBE_DIFFUSE_CURVED_COORD;
static float2 BEZEL_OUTSIDE_CURVED_COORD;
static float2 FRAME_OUTSIDE_CURVED_COORD;
static float2 BACKGROUND_CURVED_COORD;
static float2 LED_CURVED_COORD;
static float2 DEVICE_CURVED_COORD;
static float2 DEVICELED_CURVED_COORD;
static float2 DECAL_CURVED_COORD;
static float2 CAB_GLASS_CURVED_COORD;
static float2 TOP_IMAGE_CURVED_COORD;
static float HSM_RESOLUTION_DEBUG_ON;
static float HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
static float HSM_STATIC_LAYERS_GAMMA;
static float HSM_AMBIENT_LIGHTING_OPACITY;
static float HSM_AMBIENT1_OPACITY;
static float HSM_AMBIENT2_OPACITY;
static float HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
static float HSM_SINDEN_BORDER_ON;
static float HSM_SINDEN_BORDER_BRIGHTNESS;
static float HSM_SINDEN_BORDER_THICKNESS;
static float HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
static float HSM_VIEWPORT_ZOOM;
static float HSM_VIEWPORT_ZOOM_MASK;
static float HSM_VIEWPORT_POSITION_X;
static float HSM_VIEWPORT_POSITION_Y;
static float HSM_FLIP_VIEWPORT_VERTICAL;
static float HSM_FLIP_VIEWPORT_HORIZONTAL;
static float HSM_FLIP_CORE_VERTICAL;
static float HSM_FLIP_CORE_HORIZONTAL;
static float HSM_ROTATE_CORE_IMAGE;
static float HSM_ASPECT_RATIO_ORIENTATION;
static float HSM_ASPECT_RATIO_MODE;
static float HSM_ASPECT_RATIO_EXPLICIT;
static float HSM_VERTICAL_PRESET;
static float HSM_INT_SCALE_MAX_HEIGHT;
static float HSM_NON_INTEGER_SCALE;
static float HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
static float HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
static float HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
static float HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
static float HSM_USE_IMAGE_FOR_PLACEMENT;
static float HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
static float HSM_PLACEMENT_IMAGE_MODE;
static float HSM_NON_INTEGER_SCALE_OFFSET;
static float HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
static float HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE;
static float HSM_SCREEN_POSITION_X;
static float HSM_SCREEN_POSITION_Y;
static float HSM_CROP_MODE;
static float HSM_CROP_PERCENT_ZOOM;
static float HSM_CROP_PERCENT_TOP;
static float HSM_CROP_PERCENT_BOTTOM;
static float HSM_CROP_PERCENT_LEFT;
static float HSM_CROP_PERCENT_RIGHT;
static float HSM_CROP_BLACK_THRESHOLD;
static float HSM_SCANLINE_DIRECTION;
static float HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;
static float HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR;
static float HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;
static float HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR;
static float HSM_USE_GEOM;
static float HSM_CURVATURE_MODE;
static float HSM_CURVATURE_3D_RADIUS;
static float HSM_CURVATURE_3D_VIEW_DIST;
static float HSM_CURVATURE_3D_TILT_ANGLE_X;
static float HSM_CURVATURE_3D_TILT_ANGLE_Y;
static float HSM_CRT_CURVATURE_SCALE;
static float HSM_CACHE_GRAPHICS_ON;
static float HSM_CACHE_UPDATE_INDICATOR_MODE;
static float HSM_AB_COMPARE_SHOW_MODE;
static float HSM_AB_COMPARE_AREA;
static float HSM_AB_COMPARE_SPLIT_POSITION;
static float HSM_AB_COMPARE_FREEZE_CRT_TUBE;
static float HSM_AB_COMPARE_FREEZE_GRAPHICS;
static float HSM_SHOW_PASS_INDEX;
static float HSM_SHOW_PASS_APPLY_SCREEN_COORD;
static float HSM_SHOW_PASS_ALPHA;
static float HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
static float HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
static float HSM_TUBE_DIFFUSE_MODE;
static float HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
static float HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
static float HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
static float HSM_TUBE_DIFFUSE_IMAGE_HUE;
static float HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
static float HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
static float HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
static float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
static float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
static float HSM_TUBE_DIFFUSE_IMAGE_SCALE;
static float HSM_TUBE_DIFFUSE_IMAGE_SCALE_X;
static float HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
static float HSM_TUBE_SHADOW_IMAGE_ON;
static float HSM_TUBE_SHADOW_IMAGE_OPACITY;
static float HSM_TUBE_SHADOW_IMAGE_POS_X;
static float HSM_TUBE_SHADOW_IMAGE_POS_Y;
static float HSM_TUBE_SHADOW_IMAGE_SCALE_X;
static float HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
static float HSM_TUBE_SHADOW_CURVATURE_SCALE;
static float HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
static float HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
static float HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY;
static float HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY;
static float HSM_TUBE_STATIC_BLACK_LEVEL;
static float HSM_TUBE_STATIC_AMBIENT_LIGHTING;
static float HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
static float HSM_TUBE_STATIC_SCALE;
static float HSM_TUBE_STATIC_SCALE_X;
static float HSM_TUBE_STATIC_POS_X;
static float HSM_TUBE_STATIC_POS_Y;
static float HSM_TUBE_STATIC_SHADOW_OPACITY;
static float HSM_TUBE_STATIC_DITHER_SAMPLES;
static float HSM_TUBE_STATIC_DITHER_DISTANCE;
static float HSM_TUBE_STATIC_DITHER_AMOUNT;
static float HSM_TUBE_OPACITY;
static float HSM_TUBE_COLORED_GEL_IMAGE_ON;
static float HSM_TUBE_COLORED_GEL_IMAGE_SCALE;
static float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL;
static float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL;
static float HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
static float HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT;
static float HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT;
static float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
static float HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD;
static float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
static float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
static float HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
static float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
static float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
static float HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL;
static float HSM_DUALSCREEN_MODE;
static float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
static float HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
static float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET;
static float HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION;
static float HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
static float HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS;
static float HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
static float HSM_2ND_SCREEN_INDEPENDENT_SCALE;
static float HSM_2ND_SCREEN_SCALE_OFFSET;
static float HSM_2ND_SCREEN_POS_X;
static float HSM_2ND_SCREEN_POS_Y;
static float HSM_2ND_SCREEN_CROP_PERCENT_ZOOM;
static float HSM_2ND_SCREEN_CROP_PERCENT_TOP;
static float HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM;
static float HSM_2ND_SCREEN_CROP_PERCENT_LEFT;
static float HSM_2ND_SCREEN_CROP_PERCENT_RIGHT;
static float HSM_SCREEN_REFLECTION_SCALE;
static float HSM_SCREEN_REFLECTION_POS_X;
static float HSM_SCREEN_REFLECTION_POS_Y;
static float HSM_AMBIENT1_HUE;
static float HSM_AMBIENT1_SATURATION;
static float HSM_AMBIENT1_VALUE;
static float HSM_AMBIENT1_CONTRAST;
static float HSM_AMBIENT1_SCALE_KEEP_ASPECT;
static float HSM_AMBIENT1_SCALE_INHERIT_MODE;
static float HSM_AMBIENT1_SCALE;
static float HSM_AMBIENT1_SCALE_X;
static float HSM_AMBIENT1_ROTATE;
static float HSM_AMBIENT1_MIRROR_HORZ;
static float HSM_AMBIENT1_POS_INHERIT_MODE;
static float HSM_AMBIENT1_POSITION_X;
static float HSM_AMBIENT1_POSITION_Y;
static float HSM_AMBIENT1_DITHERING_SAMPLES;
static float HSM_AMBIENT2_HUE;
static float HSM_AMBIENT2_SATURATION;
static float HSM_AMBIENT2_VALUE;
static float HSM_AMBIENT2_CONTRAST;
static float HSM_AMBIENT2_SCALE_KEEP_ASPECT;
static float HSM_AMBIENT2_SCALE_INHERIT_MODE;
static float HSM_AMBIENT2_SCALE;
static float HSM_AMBIENT2_SCALE_X;
static float HSM_AMBIENT2_ROTATE;
static float HSM_AMBIENT2_MIRROR_HORZ;
static float HSM_AMBIENT2_POS_INHERIT_MODE;
static float HSM_AMBIENT2_POSITION_X;
static float HSM_AMBIENT2_POSITION_Y;
static float HSM_BZL_OPACITY;
static float HSM_BZL_BLEND_MODE;
static float HSM_BZL_WIDTH;
static float HSM_BZL_HEIGHT;
static float HSM_BZL_INNER_CORNER_RADIUS_SCALE;
static float HSM_BZL_INNER_EDGE_THICKNESS;
static float HSM_BZL_INNER_EDGE_SHARPNESS;
static float HSM_BZL_OUTER_POSITION_Y;
static float HSM_BZL_OUTER_CURVATURE_SCALE;
static float HSM_BZL_OUTER_CORNER_RADIUS_SCALE;
static float HSM_BZL_NOISE;
static float HSM_BZL_INNER_EDGE_SHADOW;
static float HSM_BZL_BRIGHTNESS;
static float HSM_BZL_BRIGHTNESS_MULT_TOP;
static float HSM_BZL_BRIGHTNESS_MULT_BOTTOM;
static float HSM_BZL_BRIGHTNESS_MULT_SIDES;
static float HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT;
static float HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT;
static float HSM_BZL_HIGHLIGHT;
static float HSM_BZL_INNER_EDGE_HIGHLIGHT;
static float HSM_BZL_COLOR_HUE;
static float HSM_BZL_COLOR_SATURATION;
static float HSM_BZL_COLOR_VALUE;
static float HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_FRM_USE_INDEPENDENT_COLOR;
static float HSM_FRM_COLOR_HUE;
static float HSM_FRM_COLOR_SATURATION;
static float HSM_FRM_COLOR_VALUE;
static float HSM_FRM_OPACITY;
static float HSM_FRM_BLEND_MODE;
static float HSM_FRM_TEXTURE_OPACITY;
static float HSM_FRM_TEXTURE_BLEND_MODE;
static float HSM_FRM_NOISE;
static float HSM_FRM_INNER_EDGE_THICKNESS;
static float HSM_FRM_INNER_EDGE_HIGHLIGHT;
static float HSM_FRM_THICKNESS;
static float HSM_FRM_THICKNESS_SCALE_X;
static float HSM_FRM_OUTER_POS_Y;
static float HSM_FRM_OUTER_CURVATURE_SCALE;
static float HSM_FRM_OUTER_CORNER_RADIUS;
static float HSM_FRM_OUTER_EDGE_THICKNESS;
static float HSM_FRM_OUTER_EDGE_SHADING;
static float HSM_FRM_SHADOW_OPACITY;
static float HSM_FRM_SHADOW_WIDTH;
static float HSM_REFLECT_CORNER_FADE;
static float HSM_REFLECT_CORNER_FADE_DISTANCE;
static float HSM_REFLECT_CORNER_INNER_SPREAD;
static float HSM_REFLECT_CORNER_OUTER_SPREAD;
static float HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
static float HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
static float HSM_REFLECT_CORNER_SPREAD_FALLOFF;
static float HSM_REFLECT_GLOBAL_AMOUNT;
static float HSM_REFLECT_GLOBAL_GAMMA_ADJUST;
static float HSM_REFLECT_DIRECT_AMOUNT;
static float HSM_REFLECT_DIFFUSED_AMOUNT;
static float HSM_REFLECT_FULLSCREEN_GLOW;
static float HSM_REFLECT_FULLSCREEN_GLOW_GAMMA;
static float HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT;
static float HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW;
static float HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT;
static float HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS;
static float HSM_REFLECT_SHOW_TUBE_FX_AMOUNT;
static float HSM_REFLECT_FADE_AMOUNT;
static float HSM_REFLECT_RADIAL_FADE_WIDTH;
static float HSM_REFLECT_RADIAL_FADE_HEIGHT;
static float HSM_REFLECT_LATERAL_OUTER_FADE_POSITION;
static float HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE;
static float HSM_REFLECT_BLUR_NUM_SAMPLES;
static float HSM_REFLECT_BLUR_MIN;
static float HSM_REFLECT_BLUR_MAX;
static float HSM_REFLECT_BLUR_FALLOFF_DISTANCE;
static float HSM_REFLECT_NOISE_AMOUNT;
static float HSM_REFLECT_NOISE_SAMPLES;
static float HSM_REFLECT_NOISE_SAMPLE_DISTANCE;
static float HSM_GLASS_BORDER_ON;
static float HSM_REFLECT_VIGNETTE_AMOUNT;
static float HSM_REFLECT_VIGNETTE_SIZE;
static float HSM_BG_LAYER_ORDER;
static float HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
static float HSM_LED_LAYER_ORDER;
static float HSM_DEVICE_LAYER_ORDER;
static float HSM_DEVICELED_LAYER_ORDER;
static float HSM_CRT_LAYER_ORDER;
static float HSM_DECAL_LAYER_ORDER;
static float HSM_CAB_GLASS_LAYER_ORDER;
static float HSM_TOP_LAYER_ORDER;
static float HSM_CUTOUT_ASPECT_MODE;
static float HSM_CUTOUT_EXPLICIT_ASPECT;
static float HSM_CUTOUT_FOLLOW_LAYER;
static float HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
static float HSM_CUTOUT_SCALE;
static float HSM_CUTOUT_SCALE_X;
static float HSM_CUTOUT_POS_X;
static float HSM_CUTOUT_POS_Y;
static float HSM_CUTOUT_CORNER_RADIUS;
static float HSM_LAYERING_DEBUG_MASK_MODE;
static float HSM_BG_OPACITY;
static float HSM_BG_COLORIZE_ON;
static float HSM_BG_HUE;
static float HSM_BG_SATURATION;
static float HSM_BG_BRIGHTNESS;
static float HSM_BG_GAMMA;
static float HSM_BG_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_BG_BLEND_MODE;
static float HSM_BG_SOURCE_MATTE_TYPE;
static float HSM_BG_MIPMAPPING_BLEND_BIAS;
static float HSM_BG_MASK_MODE;
static float HSM_BG_CUTOUT_MODE;
static float HSM_BG_DUALSCREEN_VIS_MODE;
static float HSM_BG_FOLLOW_LAYER;
static float HSM_BG_FOLLOW_MODE;
static float HSM_BG_FOLLOW_FULL_USES_ZOOM;
static float HSM_BG_FILL_MODE;
static float HSM_BG_SPLIT_PRESERVE_CENTER;
static float HSM_BG_SPLIT_REPEAT_WIDTH;
static float HSM_BG_SCALE;
static float HSM_BG_SCALE_X;
static float HSM_BG_POS_X;
static float HSM_BG_POS_Y;
static float HSM_BG_WRAP_MODE;
static float HSM_VIEWPORT_VIGNETTE_OPACITY;
static float HSM_VIEWPORT_VIGNETTE_MASK_MODE;
static float HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
static float HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
static float HSM_VIEWPORT_VIGNETTE_SCALE;
static float HSM_VIEWPORT_VIGNETTE_SCALE_X;
static float HSM_VIEWPORT_VIGNETTE_POS_X;
static float HSM_VIEWPORT_VIGNETTE_POS_Y;
static float HSM_LED_OPACITY;
static float HSM_LED_COLORIZE_ON;
static float HSM_LED_HUE;
static float HSM_LED_SATURATION;
static float HSM_LED_BRIGHTNESS;
static float HSM_LED_GAMMA;
static float HSM_LED_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_LED_BLEND_MODE;
static float HSM_LED_SOURCE_MATTE_TYPE;
static float HSM_LED_MASK_MODE;
static float HSM_LED_MIPMAPPING_BLEND_BIAS;
static float HSM_LED_CUTOUT_MODE;
static float HSM_LED_DUALSCREEN_VIS_MODE;
static float HSM_LED_FOLLOW_LAYER;
static float HSM_LED_FOLLOW_MODE;
static float HSM_LED_FOLLOW_FULL_USES_ZOOM;
static float HSM_LED_FILL_MODE;
static float HSM_LED_SPLIT_PRESERVE_CENTER;
static float HSM_LED_SPLIT_REPEAT_WIDTH;
static float HSM_LED_SCALE;
static float HSM_LED_SCALE_X;
static float HSM_LED_POS_X;
static float HSM_LED_POS_Y;
static float HSM_DEVICE_OPACITY;
static float HSM_DEVICE_COLORIZE_ON;
static float HSM_DEVICE_HUE;
static float HSM_DEVICE_SATURATION;
static float HSM_DEVICE_BRIGHTNESS;
static float HSM_DEVICE_GAMMA;
static float HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_DEVICE_BLEND_MODE;
static float HSM_DEVICE_SOURCE_MATTE_TYPE;
static float HSM_DEVICE_MASK_MODE;
static float HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
static float HSM_DEVICE_CUTOUT_MODE;
static float HSM_DEVICE_DUALSCREEN_VIS_MODE;
static float HSM_DEVICE_FOLLOW_LAYER;
static float HSM_DEVICE_FOLLOW_MODE;
static float HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
static float HSM_DEVICE_FILL_MODE;
static float HSM_DEVICE_SPLIT_PRESERVE_CENTER;
static float HSM_DEVICE_SPLIT_REPEAT_WIDTH;
static float HSM_DEVICE_SCALE;
static float HSM_DEVICE_SCALE_X;
static float HSM_DEVICE_POS_X;
static float HSM_DEVICE_POS_Y;
static float HSM_DEVICELED_OPACITY;
static float HSM_DEVICELED_COLORIZE_ON;
static float HSM_DEVICELED_HUE;
static float HSM_DEVICELED_SATURATION;
static float HSM_DEVICELED_BRIGHTNESS;
static float HSM_DEVICELED_GAMMA;
static float HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_DEVICELED_BLEND_MODE;
static float HSM_DEVICELED_SOURCE_MATTE_TYPE;
static float HSM_DEVICELED_MASK_MODE;
static float HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
static float HSM_DEVICELED_CUTOUT_MODE;
static float HSM_DEVICELED_DUALSCREEN_VIS_MODE;
static float HSM_DEVICELED_FOLLOW_LAYER;
static float HSM_DEVICELED_FOLLOW_MODE;
static float HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
static float HSM_DEVICELED_FILL_MODE;
static float HSM_DEVICELED_SPLIT_PRESERVE_CENTER;
static float HSM_DEVICELED_SPLIT_REPEAT_WIDTH;
static float HSM_DEVICELED_SCALE;
static float HSM_DEVICELED_SCALE_X;
static float HSM_DEVICELED_POS_X;
static float HSM_DEVICELED_POS_Y;
static float HSM_DECAL_OPACITY;
static float HSM_DECAL_COLORIZE_ON;
static float HSM_DECAL_HUE;
static float HSM_DECAL_SATURATION;
static float HSM_DECAL_BRIGHTNESS;
static float HSM_DECAL_GAMMA;
static float HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_DECAL_BLEND_MODE;
static float HSM_DECAL_SOURCE_MATTE_TYPE;
static float HSM_DECAL_MIPMAPPING_BLEND_BIAS;
static float HSM_DECAL_MASK_MODE;
static float HSM_DECAL_CUTOUT_MODE;
static float HSM_DECAL_DUALSCREEN_VIS_MODE;
static float HSM_DECAL_FOLLOW_LAYER;
static float HSM_DECAL_FOLLOW_MODE;
static float HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
static float HSM_DECAL_FILL_MODE;
static float HSM_DECAL_SPLIT_PRESERVE_CENTER;
static float HSM_DECAL_SPLIT_REPEAT_WIDTH;
static float HSM_DECAL_SCALE;
static float HSM_DECAL_SCALE_X;
static float HSM_DECAL_POS_X;
static float HSM_DECAL_POS_Y;
static float HSM_CAB_GLASS_OPACITY;
static float HSM_CAB_GLASS_COLORIZE_ON;
static float HSM_CAB_GLASS_HUE;
static float HSM_CAB_GLASS_SATURATION;
static float HSM_CAB_GLASS_BRIGHTNESS;
static float HSM_CAB_GLASS_GAMMA;
static float HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_CAB_GLASS_BLEND_MODE;
static float HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
static float HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
static float HSM_CAB_GLASS_MASK_MODE;
static float HSM_CAB_GLASS_CUTOUT_MODE;
static float HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
static float HSM_CAB_GLASS_FOLLOW_LAYER;
static float HSM_CAB_GLASS_FOLLOW_MODE;
static float HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
static float HSM_CAB_GLASS_FILL_MODE;
static float HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER;
static float HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH;
static float HSM_CAB_GLASS_SCALE;
static float HSM_CAB_GLASS_SCALE_X;
static float HSM_CAB_GLASS_POS_X;
static float HSM_CAB_GLASS_POS_Y;
static float HSM_TOP_OPACITY;
static float HSM_TOP_COLORIZE_ON;
static float HSM_TOP_HUE;
static float HSM_TOP_SATURATION;
static float HSM_TOP_BRIGHTNESS;
static float HSM_TOP_GAMMA;
static float HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER;
static float HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER;
static float HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
static float HSM_TOP_BLEND_MODE;
static float HSM_TOP_SOURCE_MATTE_TYPE;
static float HSM_TOP_MIPMAPPING_BLEND_BIAS;
static float HSM_TOP_MASK_MODE;
static float HSM_TOP_CUTOUT_MODE;
static float HSM_TOP_DUALSCREEN_VIS_MODE;
static float HSM_TOP_FOLLOW_LAYER;
static float HSM_TOP_FOLLOW_MODE;
static float HSM_TOP_FOLLOW_FULL_USES_ZOOM;
static float HSM_TOP_FILL_MODE;
static float HSM_TOP_SPLIT_PRESERVE_CENTER;
static float HSM_TOP_SPLIT_REPEAT_WIDTH;
static float HSM_TOP_SCALE;
static float HSM_TOP_SCALE_X;
static float HSM_TOP_POS_X;
static float HSM_TOP_POS_Y;
static float HSM_TOP_MIRROR_WRAP;
static float HSM_RENDER_SIMPLE_MODE;
static float HSM_RENDER_SIMPLE_MASK_TYPE;
static float2 ch_spc;
static float2 ch_exc;
static float2 ch_quo;
static float2 ch_hsh;
static float2 ch_dol;
static float2 ch_pct;
static float2 ch_amp;
static float2 ch_apo;
static float2 ch_lbr;
static float2 ch_rbr;
static float2 ch_ast;
static float2 ch_crs;
static float2 ch_per;
static float2 ch_dsh;
static float2 ch_com;
static float2 ch_lsl;
static float2 ch_0;
static float2 ch_1;
static float2 ch_2;
static float2 ch_3;
static float2 ch_4;
static float2 ch_5;
static float2 ch_6;
static float2 ch_7;
static float2 ch_8;
static float2 ch_9;
static float2 ch_col;
static float2 ch_scl;
static float2 ch_les;
static float2 ch_equ;
static float2 ch_grt;
static float2 ch_que;
static float2 ch_ats;
static float2 ch_A;
static float2 ch_B;
static float2 ch_C;
static float2 ch_D;
static float2 ch_E;
static float2 ch_F;
static float2 ch_G;
static float2 ch_H;
static float2 ch_I;
static float2 ch_J;
static float2 ch_K;
static float2 ch_L;
static float2 ch_M;
static float2 ch_N;
static float2 ch_O;
static float2 ch_P;
static float2 ch_Q;
static float2 ch_R;
static float2 ch_S;
static float2 ch_T;
static float2 ch_U;
static float2 ch_V;
static float2 ch_W;
static float2 ch_X;
static float2 ch_Y;
static float2 ch_Z;
static float2 ch_lsb;
static float2 ch_rsl;
static float2 ch_rsb;
static float2 ch_pow;
static float2 ch_usc;
static float2 ch_a;
static float2 ch_b;
static float2 ch_c;
static float2 ch_d;
static float2 ch_e;
static float2 ch_f;
static float2 ch_g;
static float2 ch_h;
static float2 ch_i;
static float2 ch_j;
static float2 ch_k;
static float2 ch_l;
static float2 ch_m;
static float2 ch_n;
static float2 ch_o;
static float2 ch_p;
static float2 ch_q;
static float2 ch_r;
static float2 ch_s;
static float2 ch_t;
static float2 ch_u;
static float2 ch_v;
static float2 ch_w;
static float2 ch_x;
static float2 ch_y;
static float2 ch_z;
static float2 ch_lpa;
static float2 ch_bar;
static float2 ch_rpa;
static float2 ch_tid;
static float2 ch_lar;
static float TEXT_MASK;
static float2 CUR_UV;
static float2 print_pos;
static float2 res;

float mod(float x, float y)
{
    return x - y * floor(x / y);
}

float2 mod(float2 x, float2 y)
{
    return x - y * floor(x / y);
}

float3 mod(float3 x, float3 y)
{
    return x - y * floor(x / y);
}

float4 mod(float4 x, float4 y)
{
    return x - y * floor(x / y);
}

float2 HSM_GetViewportCoordWithFlip(float2 viewport_coord)
{
    float2 out_coord = viewport_coord;
    if (HSM_FLIP_VIEWPORT_VERTICAL == (-1.0f))
    {
        out_coord.y = 1.0f - out_coord.y;
    }
    if (HSM_FLIP_VIEWPORT_HORIZONTAL == (-1.0f))
    {
        out_coord.x = 1.0f - out_coord.x;
    }
    return out_coord;
}

float2 HSM_GetViewportCoordWithZoomAndPan(float2 viewport_coord)
{
    float2 param = viewport_coord;
    float2 out_coord = HSM_GetViewportCoordWithFlip(param);
    out_coord = ((out_coord - 0.5f.xx) / HSM_VIEWPORT_ZOOM.xx) + 0.5f.xx;
    out_coord.x += HSM_VIEWPORT_POSITION_X;
    out_coord.y -= HSM_VIEWPORT_POSITION_Y;
    return out_coord;
}

float HSM_GetScreenIndex(float2 viewport_coord)
{
    float out_index = 1.0f;
    float output_aspect = global_FinalViewportSize.x / global_FinalViewportSize.y;
    if (HSM_DUALSCREEN_MODE == 0.0f)
    {
        out_index = 1.0f;
    }
    if (HSM_DUALSCREEN_MODE == 1.0f)
    {
        out_index = float((viewport_coord.y < (0.5f + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    if (HSM_DUALSCREEN_MODE == 2.0f)
    {
        out_index = float((viewport_coord.x < (0.5f + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    return out_index;
}

float4 HSM_GetCacheSampleRange(float column_index, float row_index)
{
    float num_rows = 8.0f;
    float num_columns = 8.0f;
    float range_width = 1.0f / num_columns;
    float range_height = 1.0f / num_rows;
    float zero_based_row_index = row_index - 1.0f;
    float zero_based_column_index = column_index - 1.0f;
    float4 out_sample_range = 0.0f.xxxx;
    out_sample_range.x = zero_based_column_index * range_width;
    out_sample_range.y = zero_based_row_index * range_height;
    out_sample_range.z = out_sample_range.x + range_width;
    out_sample_range.w = out_sample_range.y + range_height;
    return out_sample_range;
}

float2 HSM_GetCacheSampleCoord(float column_index, float row_index)
{
    float num_rows = 8.0f;
    float num_columns = 8.0f;
    float range_width = 1.0f / num_columns;
    float range_height = 1.0f / num_rows;
    float param = column_index;
    float param_1 = row_index;
    float4 sample_range = HSM_GetCacheSampleRange(param, param_1);
    return float2(sample_range.x + (range_width / 2.0f), sample_range.y + (range_height / 2.0f));
}

float2 HSM_GetCoordWithPositionOffset(float2 in_coord, float2 position_offset)
{
    return in_coord - position_offset;
}

float2 HSM_GetInverseScaledCoord(float2 in_coord, float2 in_scale)
{
    float2 middle = 0.499989986419677734375f.xx;
    float2 diff = in_coord - middle;
    float2 screen_inverse_scale = 1.0f.xx / in_scale;
    float2 scaled_coord = middle + (diff * screen_inverse_scale);
    return scaled_coord;
}

float2 HSM_GetVTexCoordWithArgs(float2 in_coord, float2 in_scale, float2 position_offset)
{
    float2 param = in_coord;
    float2 param_1 = position_offset;
    float2 param_2 = HSM_GetCoordWithPositionOffset(param, param_1);
    float2 param_3 = in_scale;
    return HSM_GetInverseScaledCoord(param_2, param_3);
}

float4 HSM_UpdateGlobalScreenValuesFromCache(Texture2D<float4> in_cache_pass, SamplerState _in_cache_pass_sampler, float2 vTexCoord_1)
{
    float output_aspect = global_FinalViewportSize.x / global_FinalViewportSize.y;
    float2 param = vTexCoord_1;
    float2 flipped_viewport_coord = HSM_GetViewportCoordWithZoomAndPan(param);
    float2 param_1 = flipped_viewport_coord;
    SCREEN_INDEX = HSM_GetScreenIndex(param_1);
    float2 sample_coord = 0.0f.xx;
    float4 texture_sample = 0.0f.xxxx;
    float param_2 = 1.0f;
    float param_3 = 1.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_2, param_3);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    AVERAGE_LUMA = texture_sample.w;
    SAMPLING_SCANLINE_DIR_MULT = texture_sample.x;
    SAMPLING_OPPOSITE_DIR_MULT = texture_sample.y;
    float res_mult_size_sum = 0.0f;
    float res_mult_size2_sum = 0.0f;
    if (SCREEN_INDEX == 1.0f)
    {
        float param_4 = 2.0f;
        float param_5 = 1.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_4, param_5);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.zw;
        float param_6 = 3.0f;
        float param_7 = 1.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_6, param_7);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_8 = 3.0f;
        float param_9 = 4.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_8, param_9);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.xy;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_10 = 4.0f;
        float param_11 = 1.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_10, param_11);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        ROTATED_CORE_PREPPED_SIZE = texture_sample.zw;
        float param_12 = 1.0f;
        float param_13 = 2.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_12, param_13);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_14 = 4.0f;
        float param_15 = 4.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_14, param_15);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        SCREEN_SIZE = texture_sample.xy;
    }
    if (SCREEN_INDEX == 2.0f)
    {
        float param_16 = 2.0f;
        float param_17 = 2.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_16, param_17);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.yz;
        float param_18 = 3.0f;
        float param_19 = 2.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_18, param_19);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_20 = 3.0f;
        float param_21 = 4.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_20, param_21);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.zw;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_22 = 4.0f;
        float param_23 = 2.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_22, param_23);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size2_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        float param_24 = 1.0f;
        float param_25 = 3.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_24, param_25);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_26 = 4.0f;
        float param_27 = 4.0f;
        sample_coord = HSM_GetCacheSampleCoord(param_26, param_27);
        texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
        SCREEN_SIZE = texture_sample.zw;
    }
    float param_28 = 3.0f;
    float param_29 = 1.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_28, param_29);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    SCREEN_POS_OFFSET_1ST_SCREEN = texture_sample.zw;
    float param_30 = 3.0f;
    float param_31 = 4.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_30, param_31);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = texture_sample.xy;
    float param_32 = 3.0f;
    float param_33 = 2.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_32, param_33);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_34 = 3.0f;
    float param_35 = 4.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_34, param_35);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = texture_sample.zw;
    float param_36 = 2.0f;
    float param_37 = 3.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_36, param_37);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    CORE_SIZE = texture_sample.xy;
    ROTATED_CORE_ORIGINAL_SIZE = texture_sample.zw;
    float param_38 = 3.0f;
    float param_39 = 3.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_38, param_39);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    VIEWPORT_SCALE = texture_sample.xy;
    VIEWPORT_POS = texture_sample.zw;
    float param_40 = 4.0f;
    float param_41 = 3.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_40, param_41);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    SCREEN_SCALE_2ND_SCREEN = texture_sample.xy;
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_42 = 1.0f;
    float param_43 = 4.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_42, param_43);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    CURRENT_FRAME_FROM_CACHE_INFO = texture_sample.y;
    ROTATED_DEREZED_SIZE = texture_sample.zw;
    float param_44 = 2.0f;
    float param_45 = 4.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_44, param_45);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    NEGATIVE_CROP_EXPAND_MULTIPLIER = texture_sample.x;
    MAX_NEGATIVE_CROP = texture_sample.y;
    USE_VERTICAL_SCANLINES = texture_sample.z;
    float param_46 = 8.0f;
    float param_47 = 8.0f;
    sample_coord = HSM_GetCacheSampleCoord(param_46, param_47);
    texture_sample = in_cache_pass.Sample(_in_cache_pass_sampler, sample_coord);
    CACHE_INFO_CHANGED = (texture_sample.x > 0.5f) ? true : false;
    SCREEN_SCALE_WITH_ZOOM = SCREEN_SCALE * HSM_VIEWPORT_ZOOM;
    float2 param_48 = flipped_viewport_coord;
    float2 param_49 = SCREEN_SCALE;
    float2 param_50 = SCREEN_POS_OFFSET;
    SCREEN_COORD = HSM_GetVTexCoordWithArgs(param_48, param_49, param_50);
    float2 param_51 = flipped_viewport_coord;
    float2 param_52 = TUBE_DIFFUSE_SCALE;
    float2 param_53 = SCREEN_POS_OFFSET;
    TUBE_DIFFUSE_COORD = HSM_GetVTexCoordWithArgs(param_51, param_52, param_53);
    float2 param_54 = flipped_viewport_coord;
    float2 param_55 = TUBE_DIFFUSE_SCALE_1ST_SCREEN;
    float2 param_56 = (SCREEN_POS_OFFSET_1ST_SCREEN + SCREEN_POS_OFFSET_2ND_SCREEN) / 2.0f.xx;
    TUBE_DIFFUSE_COORD_MIXED_POS = HSM_GetVTexCoordWithArgs(param_54, param_55, param_56);
    return 0.0f.xxxx;
}

float2 GetIntegerScaleMult(float2 screen_size, float2 cropped_size)
{
    float epsilon = 0.00999999977648258209228515625f;
    float2 integer_scale = screen_size / cropped_size;
    float _5628;
    if (abs(integer_scale.x - round(integer_scale.x)) < epsilon)
    {
        _5628 = round(integer_scale.x);
    }
    else
    {
        _5628 = integer_scale.x;
    }
    float _5647;
    if (abs(integer_scale.y - round(integer_scale.y)) < epsilon)
    {
        _5647 = round(integer_scale.y);
    }
    else
    {
        _5647 = integer_scale.y;
    }
    integer_scale = float2(_5628, _5647);
    return integer_scale;
}

float4 GetScreenRegion(float2 screen_size)
{
    float2 position_offset = ((SCREEN_POS_OFFSET * global_FinalViewportSize.xy) * HSM_VIEWPORT_ZOOM) + ((float2(-HSM_VIEWPORT_POSITION_X, HSM_VIEWPORT_POSITION_Y) * HSM_VIEWPORT_ZOOM) * global_FinalViewportSize.xy);
    float2 top_left = ((global_FinalViewportSize.xy / 2.0f.xx) - (screen_size / 2.0f.xx)) + position_offset;
    float2 bottom_right = ((global_FinalViewportSize.xy / 2.0f.xx) + (screen_size / 2.0f.xx)) + position_offset;
    float4 out_region = round(float4(top_left, bottom_right));
    return out_region;
}

float extract_bit(float n, inout float b)
{
    b = clamp(b, -1.0f, 22.0f);
    return floor(mod(floor(n / pow(2.0f, floor(b))), 2.0f));
}

float sprite(float2 spr, float2 size, inout float2 uv)
{
    uv = floor(uv);
    float bit = ((size.x - uv.x) - 1.0f) + (uv.y * size.x);
    bool bounds = all(bool2(uv.x >= 0.0f.xx.x, uv.y >= 0.0f.xx.y));
    bool _3194;
    if (bounds)
    {
        _3194 = all(bool2(uv.x < size.x, uv.y < size.y));
    }
    else
    {
        _3194 = bounds;
    }
    bounds = _3194;
    float _3196;
    if (bounds)
    {
        float param = spr.x;
        float param_1 = bit - 21.0f;
        float _3206 = extract_bit(param, param_1);
        float param_2 = spr.y;
        float param_3 = bit;
        float _3212 = extract_bit(param_2, param_3);
        _3196 = _3206 + _3212;
    }
    else
    {
        _3196 = 0.0f;
    }
    return _3196;
}

float char_px(float2 ch, float2 uv)
{
    float2 param = ch;
    float2 param_1 = float2(6.0f, 7.0f);
    float2 param_2 = uv - print_pos;
    float _3228 = sprite(param, param_1, param_2);
    float px = _3228;
    print_pos.x += 6.0f;
    return px;
}

float2 get_digit(inout float d)
{
    d = floor(d);
    if (d == 0.0f)
    {
        return ch_0;
    }
    if (d == 1.0f)
    {
        return ch_1;
    }
    if (d == 2.0f)
    {
        return ch_2;
    }
    if (d == 3.0f)
    {
        return ch_3;
    }
    if (d == 4.0f)
    {
        return ch_4;
    }
    if (d == 5.0f)
    {
        return ch_5;
    }
    if (d == 6.0f)
    {
        return ch_6;
    }
    if (d == 7.0f)
    {
        return ch_7;
    }
    if (d == 8.0f)
    {
        return ch_8;
    }
    if (d == 9.0f)
    {
        return ch_9;
    }
    return 0.0f.xx;
}

float print_integer(float number, int zeros, float2 uv)
{
    float result = 0.0f;
    for (int i = 4; i >= 0; i--)
    {
        float digit = mod(number / pow(10.0f, float(i)), 10.0f);
        if (((abs(number) > pow(10.0f, float(i))) || (zeros > i)) || (i == 0))
        {
            float param = digit;
            float2 _3416 = get_digit(param);
            float2 param_1 = _3416;
            float2 param_2 = uv;
            float _3420 = char_px(param_1, param_2);
            result += _3420;
        }
    }
    return result;
}

float print_number(float number, float2 pos, float2 uv)
{
    float2 dec_pos = pos;
    float result = 0.0f;
    for (int i = 3; i >= (-2); i--)
    {
        float clip = float((abs(number) > pow(10.0f, float(i))) || (i == 0));
        float digit = mod(number / pow(10.0f, float(i)), 10.0f);
        if (i == (-1))
        {
            float2 param = ch_per;
            float2 param_1 = float2(6.0f, 7.0f);
            float2 param_2 = uv - dec_pos;
            float _3347 = sprite(param, param_1, param_2);
            result += (_3347 * clip);
            dec_pos.x += (6.0f * clip);
        }
        float param_3 = digit;
        float2 _3360 = get_digit(param_3);
        float2 param_4 = _3360;
        float2 param_5 = float2(6.0f, 7.0f);
        float2 param_6 = uv - dec_pos;
        float _3367 = sprite(param_4, param_5, param_6);
        result += (_3367 * clip);
        dec_pos.x += (6.0f * clip);
    }
    return result;
}

float DrawResolutions(float2 uv, float2 viewport_size, float2 screen_size, float4 screen_region, float2 derezed_size, float2 negative_crop_added_size, float2 cropped_original_size, float2 sampling_res, float2 int_mult)
{
    float col = 0.0f;
    float current_line_index = 0.0f;
    float margin = 11.0f;
    print_pos = float2(margin, 0.0f);
    print_pos.x = margin;
    print_pos.y += 11.0f;
    TEXT_MASK = 0.0f;
    CUR_UV = uv;
    float2 param = ch_V;
    float2 param_1 = CUR_UV;
    float _3445 = char_px(param, param_1);
    TEXT_MASK += _3445;
    float2 param_2 = ch_i;
    float2 param_3 = CUR_UV;
    float _3452 = char_px(param_2, param_3);
    TEXT_MASK += _3452;
    float2 param_4 = ch_e;
    float2 param_5 = CUR_UV;
    float _3459 = char_px(param_4, param_5);
    TEXT_MASK += _3459;
    float2 param_6 = ch_w;
    float2 param_7 = CUR_UV;
    float _3466 = char_px(param_6, param_7);
    TEXT_MASK += _3466;
    float2 param_8 = ch_p;
    float2 param_9 = CUR_UV;
    float _3473 = char_px(param_8, param_9);
    TEXT_MASK += _3473;
    float2 param_10 = ch_o;
    float2 param_11 = CUR_UV;
    float _3480 = char_px(param_10, param_11);
    TEXT_MASK += _3480;
    float2 param_12 = ch_r;
    float2 param_13 = CUR_UV;
    float _3487 = char_px(param_12, param_13);
    TEXT_MASK += _3487;
    float2 param_14 = ch_t;
    float2 param_15 = CUR_UV;
    float _3494 = char_px(param_14, param_15);
    TEXT_MASK += _3494;
    float2 param_16 = ch_spc;
    float2 param_17 = CUR_UV;
    float _3501 = char_px(param_16, param_17);
    TEXT_MASK += _3501;
    float2 param_18 = ch_dsh;
    float2 param_19 = CUR_UV;
    float _3508 = char_px(param_18, param_19);
    TEXT_MASK += _3508;
    float2 param_20 = ch_dsh;
    float2 param_21 = CUR_UV;
    float _3515 = char_px(param_20, param_21);
    TEXT_MASK += _3515;
    float2 param_22 = ch_dsh;
    float2 param_23 = CUR_UV;
    float _3522 = char_px(param_22, param_23);
    TEXT_MASK += _3522;
    float2 param_24 = ch_dsh;
    float2 param_25 = CUR_UV;
    float _3529 = char_px(param_24, param_25);
    TEXT_MASK += _3529;
    float2 param_26 = ch_dsh;
    float2 param_27 = CUR_UV;
    float _3536 = char_px(param_26, param_27);
    TEXT_MASK += _3536;
    float2 param_28 = ch_dsh;
    float2 param_29 = CUR_UV;
    float _3543 = char_px(param_28, param_29);
    TEXT_MASK += _3543;
    float2 param_30 = ch_spc;
    float2 param_31 = CUR_UV;
    float _3550 = char_px(param_30, param_31);
    TEXT_MASK += _3550;
    float param_32 = viewport_size.x;
    int param_33 = 0;
    float2 param_34 = uv;
    float _3559 = print_integer(param_32, param_33, param_34);
    TEXT_MASK += _3559;
    float2 param_35 = ch_spc;
    float2 param_36 = CUR_UV;
    float _3566 = char_px(param_35, param_36);
    TEXT_MASK += _3566;
    float2 param_37 = ch_x;
    float2 param_38 = CUR_UV;
    float _3573 = char_px(param_37, param_38);
    TEXT_MASK += _3573;
    float2 param_39 = ch_spc;
    float2 param_40 = CUR_UV;
    float _3580 = char_px(param_39, param_40);
    TEXT_MASK += _3580;
    float param_41 = viewport_size.y;
    int param_42 = 0;
    float2 param_43 = uv;
    float _3589 = print_integer(param_41, param_42, param_43);
    TEXT_MASK += _3589;
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_44 = ch_S;
    float2 param_45 = CUR_UV;
    float _3602 = char_px(param_44, param_45);
    TEXT_MASK += _3602;
    float2 param_46 = ch_c;
    float2 param_47 = CUR_UV;
    float _3609 = char_px(param_46, param_47);
    TEXT_MASK += _3609;
    float2 param_48 = ch_r;
    float2 param_49 = CUR_UV;
    float _3616 = char_px(param_48, param_49);
    TEXT_MASK += _3616;
    float2 param_50 = ch_e;
    float2 param_51 = CUR_UV;
    float _3623 = char_px(param_50, param_51);
    TEXT_MASK += _3623;
    float2 param_52 = ch_e;
    float2 param_53 = CUR_UV;
    float _3630 = char_px(param_52, param_53);
    TEXT_MASK += _3630;
    float2 param_54 = ch_n;
    float2 param_55 = CUR_UV;
    float _3637 = char_px(param_54, param_55);
    TEXT_MASK += _3637;
    float2 param_56 = ch_spc;
    float2 param_57 = CUR_UV;
    float _3644 = char_px(param_56, param_57);
    TEXT_MASK += _3644;
    float2 param_58 = ch_R;
    float2 param_59 = CUR_UV;
    float _3651 = char_px(param_58, param_59);
    TEXT_MASK += _3651;
    float2 param_60 = ch_e;
    float2 param_61 = CUR_UV;
    float _3658 = char_px(param_60, param_61);
    TEXT_MASK += _3658;
    float2 param_62 = ch_g;
    float2 param_63 = CUR_UV;
    float _3665 = char_px(param_62, param_63);
    TEXT_MASK += _3665;
    float2 param_64 = ch_i;
    float2 param_65 = CUR_UV;
    float _3672 = char_px(param_64, param_65);
    TEXT_MASK += _3672;
    float2 param_66 = ch_o;
    float2 param_67 = CUR_UV;
    float _3679 = char_px(param_66, param_67);
    TEXT_MASK += _3679;
    float2 param_68 = ch_n;
    float2 param_69 = CUR_UV;
    float _3686 = char_px(param_68, param_69);
    TEXT_MASK += _3686;
    float2 param_70 = ch_spc;
    float2 param_71 = CUR_UV;
    float _3693 = char_px(param_70, param_71);
    TEXT_MASK += _3693;
    float2 param_72 = ch_dsh;
    float2 param_73 = CUR_UV;
    float _3700 = char_px(param_72, param_73);
    TEXT_MASK += _3700;
    float2 param_74 = ch_spc;
    float2 param_75 = CUR_UV;
    float _3707 = char_px(param_74, param_75);
    TEXT_MASK += _3707;
    float param_76 = screen_region.x;
    int param_77 = 0;
    float2 param_78 = uv;
    float _3716 = print_integer(param_76, param_77, param_78);
    TEXT_MASK += _3716;
    float2 param_79 = ch_spc;
    float2 param_80 = CUR_UV;
    float _3723 = char_px(param_79, param_80);
    TEXT_MASK += _3723;
    float param_81 = screen_region.y;
    int param_82 = 0;
    float2 param_83 = uv;
    float _3732 = print_integer(param_81, param_82, param_83);
    TEXT_MASK += _3732;
    float2 param_84 = ch_spc;
    float2 param_85 = CUR_UV;
    float _3739 = char_px(param_84, param_85);
    TEXT_MASK += _3739;
    float param_86 = screen_region.z;
    int param_87 = 0;
    float2 param_88 = uv;
    float _3748 = print_integer(param_86, param_87, param_88);
    TEXT_MASK += _3748;
    float2 param_89 = ch_spc;
    float2 param_90 = CUR_UV;
    float _3755 = char_px(param_89, param_90);
    TEXT_MASK += _3755;
    float param_91 = screen_region.w;
    int param_92 = 0;
    float2 param_93 = uv;
    float _3764 = print_integer(param_91, param_92, param_93);
    TEXT_MASK += _3764;
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_94 = ch_S;
    float2 param_95 = CUR_UV;
    float _3777 = char_px(param_94, param_95);
    TEXT_MASK += _3777;
    float2 param_96 = ch_c;
    float2 param_97 = CUR_UV;
    float _3784 = char_px(param_96, param_97);
    TEXT_MASK += _3784;
    float2 param_98 = ch_r;
    float2 param_99 = CUR_UV;
    float _3791 = char_px(param_98, param_99);
    TEXT_MASK += _3791;
    float2 param_100 = ch_e;
    float2 param_101 = CUR_UV;
    float _3798 = char_px(param_100, param_101);
    TEXT_MASK += _3798;
    float2 param_102 = ch_e;
    float2 param_103 = CUR_UV;
    float _3805 = char_px(param_102, param_103);
    TEXT_MASK += _3805;
    float2 param_104 = ch_n;
    float2 param_105 = CUR_UV;
    float _3812 = char_px(param_104, param_105);
    TEXT_MASK += _3812;
    float2 param_106 = ch_spc;
    float2 param_107 = CUR_UV;
    float _3819 = char_px(param_106, param_107);
    TEXT_MASK += _3819;
    float2 param_108 = ch_dsh;
    float2 param_109 = CUR_UV;
    float _3826 = char_px(param_108, param_109);
    TEXT_MASK += _3826;
    float2 param_110 = ch_dsh;
    float2 param_111 = CUR_UV;
    float _3833 = char_px(param_110, param_111);
    TEXT_MASK += _3833;
    float2 param_112 = ch_dsh;
    float2 param_113 = CUR_UV;
    float _3840 = char_px(param_112, param_113);
    TEXT_MASK += _3840;
    float2 param_114 = ch_dsh;
    float2 param_115 = CUR_UV;
    float _3847 = char_px(param_114, param_115);
    TEXT_MASK += _3847;
    float2 param_116 = ch_dsh;
    float2 param_117 = CUR_UV;
    float _3854 = char_px(param_116, param_117);
    TEXT_MASK += _3854;
    float2 param_118 = ch_dsh;
    float2 param_119 = CUR_UV;
    float _3861 = char_px(param_118, param_119);
    TEXT_MASK += _3861;
    float2 param_120 = ch_dsh;
    float2 param_121 = CUR_UV;
    float _3868 = char_px(param_120, param_121);
    TEXT_MASK += _3868;
    float2 param_122 = ch_dsh;
    float2 param_123 = CUR_UV;
    float _3875 = char_px(param_122, param_123);
    TEXT_MASK += _3875;
    float2 param_124 = ch_spc;
    float2 param_125 = CUR_UV;
    float _3882 = char_px(param_124, param_125);
    TEXT_MASK += _3882;
    float param_126 = screen_size.x;
    int param_127 = 0;
    float2 param_128 = uv;
    float _3891 = print_integer(param_126, param_127, param_128);
    TEXT_MASK += _3891;
    float2 param_129 = ch_spc;
    float2 param_130 = CUR_UV;
    float _3898 = char_px(param_129, param_130);
    TEXT_MASK += _3898;
    float2 param_131 = ch_x;
    float2 param_132 = CUR_UV;
    float _3905 = char_px(param_131, param_132);
    TEXT_MASK += _3905;
    float2 param_133 = ch_spc;
    float2 param_134 = CUR_UV;
    float _3912 = char_px(param_133, param_134);
    TEXT_MASK += _3912;
    float param_135 = screen_size.y;
    int param_136 = 0;
    float2 param_137 = uv;
    float _3921 = print_integer(param_135, param_136, param_137);
    TEXT_MASK += _3921;
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_138 = ch_F;
    float2 param_139 = CUR_UV;
    float _3934 = char_px(param_138, param_139);
    TEXT_MASK += _3934;
    float2 param_140 = ch_i;
    float2 param_141 = CUR_UV;
    float _3941 = char_px(param_140, param_141);
    TEXT_MASK += _3941;
    float2 param_142 = ch_n;
    float2 param_143 = CUR_UV;
    float _3948 = char_px(param_142, param_143);
    TEXT_MASK += _3948;
    float2 param_144 = ch_a;
    float2 param_145 = CUR_UV;
    float _3955 = char_px(param_144, param_145);
    TEXT_MASK += _3955;
    float2 param_146 = ch_l;
    float2 param_147 = CUR_UV;
    float _3962 = char_px(param_146, param_147);
    TEXT_MASK += _3962;
    float2 param_148 = ch_spc;
    float2 param_149 = CUR_UV;
    float _3969 = char_px(param_148, param_149);
    TEXT_MASK += _3969;
    float2 param_150 = ch_A;
    float2 param_151 = CUR_UV;
    float _3976 = char_px(param_150, param_151);
    TEXT_MASK += _3976;
    float2 param_152 = ch_s;
    float2 param_153 = CUR_UV;
    float _3983 = char_px(param_152, param_153);
    TEXT_MASK += _3983;
    float2 param_154 = ch_p;
    float2 param_155 = CUR_UV;
    float _3990 = char_px(param_154, param_155);
    TEXT_MASK += _3990;
    float2 param_156 = ch_e;
    float2 param_157 = CUR_UV;
    float _3997 = char_px(param_156, param_157);
    TEXT_MASK += _3997;
    float2 param_158 = ch_c;
    float2 param_159 = CUR_UV;
    float _4004 = char_px(param_158, param_159);
    TEXT_MASK += _4004;
    float2 param_160 = ch_t;
    float2 param_161 = CUR_UV;
    float _4011 = char_px(param_160, param_161);
    TEXT_MASK += _4011;
    float2 param_162 = ch_spc;
    float2 param_163 = CUR_UV;
    float _4018 = char_px(param_162, param_163);
    TEXT_MASK += _4018;
    float2 param_164 = ch_dsh;
    float2 param_165 = CUR_UV;
    float _4025 = char_px(param_164, param_165);
    TEXT_MASK += _4025;
    float2 param_166 = ch_dsh;
    float2 param_167 = CUR_UV;
    float _4032 = char_px(param_166, param_167);
    TEXT_MASK += _4032;
    float2 param_168 = ch_spc;
    float2 param_169 = CUR_UV;
    float _4039 = char_px(param_168, param_169);
    TEXT_MASK += _4039;
    float _4048;
    if ((screen_size.x / screen_size.y) > 1.0f)
    {
        _4048 = screen_size.x / screen_size.y;
    }
    else
    {
        _4048 = screen_size.y / screen_size.x;
    }
    float param_170 = _4048;
    float2 param_171 = print_pos;
    float2 param_172 = uv;
    TEXT_MASK += print_number(param_170, param_171, param_172);
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_173 = ch_N;
    float2 param_174 = CUR_UV;
    float _4081 = char_px(param_173, param_174);
    TEXT_MASK += _4081;
    float2 param_175 = ch_o;
    float2 param_176 = CUR_UV;
    float _4088 = char_px(param_175, param_176);
    TEXT_MASK += _4088;
    float2 param_177 = ch_n;
    float2 param_178 = CUR_UV;
    float _4095 = char_px(param_177, param_178);
    TEXT_MASK += _4095;
    float2 param_179 = ch_spc;
    float2 param_180 = CUR_UV;
    float _4102 = char_px(param_179, param_180);
    TEXT_MASK += _4102;
    float2 param_181 = ch_I;
    float2 param_182 = CUR_UV;
    float _4109 = char_px(param_181, param_182);
    TEXT_MASK += _4109;
    float2 param_183 = ch_n;
    float2 param_184 = CUR_UV;
    float _4116 = char_px(param_183, param_184);
    TEXT_MASK += _4116;
    float2 param_185 = ch_t;
    float2 param_186 = CUR_UV;
    float _4123 = char_px(param_185, param_186);
    TEXT_MASK += _4123;
    float2 param_187 = ch_spc;
    float2 param_188 = CUR_UV;
    float _4130 = char_px(param_187, param_188);
    TEXT_MASK += _4130;
    float2 param_189 = ch_S;
    float2 param_190 = CUR_UV;
    float _4137 = char_px(param_189, param_190);
    TEXT_MASK += _4137;
    float2 param_191 = ch_c;
    float2 param_192 = CUR_UV;
    float _4144 = char_px(param_191, param_192);
    TEXT_MASK += _4144;
    float2 param_193 = ch_l;
    float2 param_194 = CUR_UV;
    float _4151 = char_px(param_193, param_194);
    TEXT_MASK += _4151;
    float2 param_195 = ch_spc;
    float2 param_196 = CUR_UV;
    float _4158 = char_px(param_195, param_196);
    TEXT_MASK += _4158;
    float2 param_197 = ch_pct;
    float2 param_198 = CUR_UV;
    float _4165 = char_px(param_197, param_198);
    TEXT_MASK += _4165;
    float2 param_199 = ch_dsh;
    float2 param_200 = CUR_UV;
    float _4172 = char_px(param_199, param_200);
    TEXT_MASK += _4172;
    float2 param_201 = ch_dsh;
    float2 param_202 = CUR_UV;
    float _4179 = char_px(param_201, param_202);
    TEXT_MASK += _4179;
    float2 param_203 = ch_spc;
    float2 param_204 = CUR_UV;
    float _4186 = char_px(param_203, param_204);
    TEXT_MASK += _4186;
    float param_205 = (screen_size.y / viewport_size.y) * 100.0f;
    float2 param_206 = print_pos;
    float2 param_207 = uv;
    TEXT_MASK += print_number(param_205, param_206, param_207);
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_208 = ch_I;
    float2 param_209 = CUR_UV;
    float _4213 = char_px(param_208, param_209);
    TEXT_MASK += _4213;
    float2 param_210 = ch_n;
    float2 param_211 = CUR_UV;
    float _4220 = char_px(param_210, param_211);
    TEXT_MASK += _4220;
    float2 param_212 = ch_t;
    float2 param_213 = CUR_UV;
    float _4227 = char_px(param_212, param_213);
    TEXT_MASK += _4227;
    float2 param_214 = ch_spc;
    float2 param_215 = CUR_UV;
    float _4234 = char_px(param_214, param_215);
    TEXT_MASK += _4234;
    float2 param_216 = ch_S;
    float2 param_217 = CUR_UV;
    float _4241 = char_px(param_216, param_217);
    TEXT_MASK += _4241;
    float2 param_218 = ch_c;
    float2 param_219 = CUR_UV;
    float _4248 = char_px(param_218, param_219);
    TEXT_MASK += _4248;
    float2 param_220 = ch_l;
    float2 param_221 = CUR_UV;
    float _4255 = char_px(param_220, param_221);
    TEXT_MASK += _4255;
    float2 param_222 = ch_spc;
    float2 param_223 = CUR_UV;
    float _4262 = char_px(param_222, param_223);
    TEXT_MASK += _4262;
    float2 param_224 = ch_V;
    float2 param_225 = CUR_UV;
    float _4269 = char_px(param_224, param_225);
    TEXT_MASK += _4269;
    float2 param_226 = ch_e;
    float2 param_227 = CUR_UV;
    float _4276 = char_px(param_226, param_227);
    TEXT_MASK += _4276;
    float2 param_228 = ch_r;
    float2 param_229 = CUR_UV;
    float _4283 = char_px(param_228, param_229);
    TEXT_MASK += _4283;
    float2 param_230 = ch_t;
    float2 param_231 = CUR_UV;
    float _4290 = char_px(param_230, param_231);
    TEXT_MASK += _4290;
    float2 param_232 = ch_spc;
    float2 param_233 = CUR_UV;
    float _4297 = char_px(param_232, param_233);
    TEXT_MASK += _4297;
    float2 param_234 = ch_dsh;
    float2 param_235 = CUR_UV;
    float _4304 = char_px(param_234, param_235);
    TEXT_MASK += _4304;
    float2 param_236 = ch_dsh;
    float2 param_237 = CUR_UV;
    float _4311 = char_px(param_236, param_237);
    TEXT_MASK += _4311;
    float2 param_238 = ch_spc;
    float2 param_239 = CUR_UV;
    float _4318 = char_px(param_238, param_239);
    TEXT_MASK += _4318;
    if (frac(int_mult.y) < 0.00999999977648258209228515625f)
    {
        float param_240 = int_mult.y;
        int param_241 = 0;
        float2 param_242 = uv;
        float _4334 = print_integer(param_240, param_241, param_242);
        TEXT_MASK += _4334;
    }
    else
    {
        float param_243 = int_mult.y;
        float2 param_244 = print_pos;
        float2 param_245 = uv;
        TEXT_MASK += print_number(param_243, param_244, param_245);
    }
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_246 = ch_I;
    float2 param_247 = CUR_UV;
    float _4358 = char_px(param_246, param_247);
    TEXT_MASK += _4358;
    float2 param_248 = ch_n;
    float2 param_249 = CUR_UV;
    float _4365 = char_px(param_248, param_249);
    TEXT_MASK += _4365;
    float2 param_250 = ch_t;
    float2 param_251 = CUR_UV;
    float _4372 = char_px(param_250, param_251);
    TEXT_MASK += _4372;
    float2 param_252 = ch_spc;
    float2 param_253 = CUR_UV;
    float _4379 = char_px(param_252, param_253);
    TEXT_MASK += _4379;
    float2 param_254 = ch_S;
    float2 param_255 = CUR_UV;
    float _4386 = char_px(param_254, param_255);
    TEXT_MASK += _4386;
    float2 param_256 = ch_c;
    float2 param_257 = CUR_UV;
    float _4393 = char_px(param_256, param_257);
    TEXT_MASK += _4393;
    float2 param_258 = ch_l;
    float2 param_259 = CUR_UV;
    float _4400 = char_px(param_258, param_259);
    TEXT_MASK += _4400;
    float2 param_260 = ch_spc;
    float2 param_261 = CUR_UV;
    float _4407 = char_px(param_260, param_261);
    TEXT_MASK += _4407;
    float2 param_262 = ch_H;
    float2 param_263 = CUR_UV;
    float _4414 = char_px(param_262, param_263);
    TEXT_MASK += _4414;
    float2 param_264 = ch_o;
    float2 param_265 = CUR_UV;
    float _4421 = char_px(param_264, param_265);
    TEXT_MASK += _4421;
    float2 param_266 = ch_r;
    float2 param_267 = CUR_UV;
    float _4428 = char_px(param_266, param_267);
    TEXT_MASK += _4428;
    float2 param_268 = ch_z;
    float2 param_269 = CUR_UV;
    float _4435 = char_px(param_268, param_269);
    TEXT_MASK += _4435;
    float2 param_270 = ch_spc;
    float2 param_271 = CUR_UV;
    float _4442 = char_px(param_270, param_271);
    TEXT_MASK += _4442;
    float2 param_272 = ch_dsh;
    float2 param_273 = CUR_UV;
    float _4449 = char_px(param_272, param_273);
    TEXT_MASK += _4449;
    float2 param_274 = ch_dsh;
    float2 param_275 = CUR_UV;
    float _4456 = char_px(param_274, param_275);
    TEXT_MASK += _4456;
    float2 param_276 = ch_spc;
    float2 param_277 = CUR_UV;
    float _4463 = char_px(param_276, param_277);
    TEXT_MASK += _4463;
    if (frac(int_mult.x) < 0.00999999977648258209228515625f)
    {
        float param_278 = int_mult.x;
        int param_279 = 0;
        float2 param_280 = uv;
        float _4478 = print_integer(param_278, param_279, param_280);
        TEXT_MASK += _4478;
    }
    else
    {
        float param_281 = int_mult.x;
        float2 param_282 = print_pos;
        float2 param_283 = uv;
        TEXT_MASK += print_number(param_281, param_282, param_283);
    }
    bool _4496 = cropped_original_size.x != sampling_res.x;
    bool _4505;
    if (!_4496)
    {
        _4505 = cropped_original_size.y != sampling_res.y;
    }
    else
    {
        _4505 = _4496;
    }
    if (_4505)
    {
        print_pos.x = margin;
        print_pos.y += 11.0f;
        float2 param_284 = ch_S;
        float2 param_285 = CUR_UV;
        float _4518 = char_px(param_284, param_285);
        TEXT_MASK += _4518;
        float2 param_286 = ch_a;
        float2 param_287 = CUR_UV;
        float _4525 = char_px(param_286, param_287);
        TEXT_MASK += _4525;
        float2 param_288 = ch_m;
        float2 param_289 = CUR_UV;
        float _4532 = char_px(param_288, param_289);
        TEXT_MASK += _4532;
        float2 param_290 = ch_p;
        float2 param_291 = CUR_UV;
        float _4539 = char_px(param_290, param_291);
        TEXT_MASK += _4539;
        float2 param_292 = ch_l;
        float2 param_293 = CUR_UV;
        float _4546 = char_px(param_292, param_293);
        TEXT_MASK += _4546;
        float2 param_294 = ch_i;
        float2 param_295 = CUR_UV;
        float _4553 = char_px(param_294, param_295);
        TEXT_MASK += _4553;
        float2 param_296 = ch_n;
        float2 param_297 = CUR_UV;
        float _4560 = char_px(param_296, param_297);
        TEXT_MASK += _4560;
        float2 param_298 = ch_g;
        float2 param_299 = CUR_UV;
        float _4567 = char_px(param_298, param_299);
        TEXT_MASK += _4567;
        float2 param_300 = ch_spc;
        float2 param_301 = CUR_UV;
        float _4574 = char_px(param_300, param_301);
        TEXT_MASK += _4574;
        float2 param_302 = ch_R;
        float2 param_303 = CUR_UV;
        float _4581 = char_px(param_302, param_303);
        TEXT_MASK += _4581;
        float2 param_304 = ch_e;
        float2 param_305 = CUR_UV;
        float _4588 = char_px(param_304, param_305);
        TEXT_MASK += _4588;
        float2 param_306 = ch_s;
        float2 param_307 = CUR_UV;
        float _4595 = char_px(param_306, param_307);
        TEXT_MASK += _4595;
        float2 param_308 = ch_spc;
        float2 param_309 = CUR_UV;
        float _4602 = char_px(param_308, param_309);
        TEXT_MASK += _4602;
        float2 param_310 = ch_dsh;
        float2 param_311 = CUR_UV;
        float _4609 = char_px(param_310, param_311);
        TEXT_MASK += _4609;
        float2 param_312 = ch_dsh;
        float2 param_313 = CUR_UV;
        float _4616 = char_px(param_312, param_313);
        TEXT_MASK += _4616;
        float2 param_314 = ch_spc;
        float2 param_315 = CUR_UV;
        float _4623 = char_px(param_314, param_315);
        TEXT_MASK += _4623;
        float param_316 = sampling_res.x;
        int param_317 = 0;
        float2 param_318 = uv;
        float _4632 = print_integer(param_316, param_317, param_318);
        TEXT_MASK += _4632;
        float2 param_319 = ch_spc;
        float2 param_320 = CUR_UV;
        float _4639 = char_px(param_319, param_320);
        TEXT_MASK += _4639;
        float2 param_321 = ch_x;
        float2 param_322 = CUR_UV;
        float _4646 = char_px(param_321, param_322);
        TEXT_MASK += _4646;
        float2 param_323 = ch_spc;
        float2 param_324 = CUR_UV;
        float _4653 = char_px(param_323, param_324);
        TEXT_MASK += _4653;
        float param_325 = sampling_res.y;
        int param_326 = 0;
        float2 param_327 = uv;
        float _4662 = print_integer(param_325, param_326, param_327);
        TEXT_MASK += _4662;
    }
    bool _4669 = cropped_original_size.x != ROTATED_CORE_PREPPED_SIZE.x;
    bool _4678;
    if (!_4669)
    {
        _4678 = cropped_original_size.y != ROTATED_CORE_PREPPED_SIZE.y;
    }
    else
    {
        _4678 = _4669;
    }
    if (_4678)
    {
        print_pos.x = margin;
        print_pos.y += 11.0f;
        float2 param_328 = ch_C;
        float2 param_329 = CUR_UV;
        float _4691 = char_px(param_328, param_329);
        TEXT_MASK += _4691;
        float2 param_330 = ch_r;
        float2 param_331 = CUR_UV;
        float _4698 = char_px(param_330, param_331);
        TEXT_MASK += _4698;
        float2 param_332 = ch_o;
        float2 param_333 = CUR_UV;
        float _4705 = char_px(param_332, param_333);
        TEXT_MASK += _4705;
        float2 param_334 = ch_p;
        float2 param_335 = CUR_UV;
        float _4712 = char_px(param_334, param_335);
        TEXT_MASK += _4712;
        float2 param_336 = ch_p;
        float2 param_337 = CUR_UV;
        float _4719 = char_px(param_336, param_337);
        TEXT_MASK += _4719;
        float2 param_338 = ch_e;
        float2 param_339 = CUR_UV;
        float _4726 = char_px(param_338, param_339);
        TEXT_MASK += _4726;
        float2 param_340 = ch_d;
        float2 param_341 = CUR_UV;
        float _4733 = char_px(param_340, param_341);
        TEXT_MASK += _4733;
        float2 param_342 = ch_spc;
        float2 param_343 = CUR_UV;
        float _4740 = char_px(param_342, param_343);
        TEXT_MASK += _4740;
        float2 param_344 = ch_dsh;
        float2 param_345 = CUR_UV;
        float _4747 = char_px(param_344, param_345);
        TEXT_MASK += _4747;
        float2 param_346 = ch_dsh;
        float2 param_347 = CUR_UV;
        float _4754 = char_px(param_346, param_347);
        TEXT_MASK += _4754;
        float2 param_348 = ch_dsh;
        float2 param_349 = CUR_UV;
        float _4761 = char_px(param_348, param_349);
        TEXT_MASK += _4761;
        float2 param_350 = ch_dsh;
        float2 param_351 = CUR_UV;
        float _4768 = char_px(param_350, param_351);
        TEXT_MASK += _4768;
        float2 param_352 = ch_dsh;
        float2 param_353 = CUR_UV;
        float _4775 = char_px(param_352, param_353);
        TEXT_MASK += _4775;
        float2 param_354 = ch_dsh;
        float2 param_355 = CUR_UV;
        float _4782 = char_px(param_354, param_355);
        TEXT_MASK += _4782;
        float2 param_356 = ch_dsh;
        float2 param_357 = CUR_UV;
        float _4789 = char_px(param_356, param_357);
        TEXT_MASK += _4789;
        float2 param_358 = ch_spc;
        float2 param_359 = CUR_UV;
        float _4796 = char_px(param_358, param_359);
        TEXT_MASK += _4796;
        float param_360 = cropped_original_size.x;
        int param_361 = 0;
        float2 param_362 = uv;
        float _4805 = print_integer(param_360, param_361, param_362);
        TEXT_MASK += _4805;
        float2 param_363 = ch_spc;
        float2 param_364 = CUR_UV;
        float _4812 = char_px(param_363, param_364);
        TEXT_MASK += _4812;
        float2 param_365 = ch_x;
        float2 param_366 = CUR_UV;
        float _4819 = char_px(param_365, param_366);
        TEXT_MASK += _4819;
        float2 param_367 = ch_spc;
        float2 param_368 = CUR_UV;
        float _4826 = char_px(param_367, param_368);
        TEXT_MASK += _4826;
        float param_369 = cropped_original_size.y;
        int param_370 = 0;
        float2 param_371 = uv;
        float _4835 = print_integer(param_369, param_370, param_371);
        TEXT_MASK += _4835;
    }
    bool _4842 = derezed_size.x != ROTATED_CORE_PREPPED_SIZE.x;
    bool _4851;
    if (!_4842)
    {
        _4851 = derezed_size.y != ROTATED_CORE_PREPPED_SIZE.y;
    }
    else
    {
        _4851 = _4842;
    }
    if (_4851)
    {
        print_pos.x = margin;
        print_pos.y += 11.0f;
        float2 param_372 = ch_N;
        float2 param_373 = CUR_UV;
        float _4864 = char_px(param_372, param_373);
        TEXT_MASK += _4864;
        float2 param_374 = ch_e;
        float2 param_375 = CUR_UV;
        float _4871 = char_px(param_374, param_375);
        TEXT_MASK += _4871;
        float2 param_376 = ch_g;
        float2 param_377 = CUR_UV;
        float _4878 = char_px(param_376, param_377);
        TEXT_MASK += _4878;
        float2 param_378 = ch_dsh;
        float2 param_379 = CUR_UV;
        float _4885 = char_px(param_378, param_379);
        TEXT_MASK += _4885;
        float2 param_380 = ch_C;
        float2 param_381 = CUR_UV;
        float _4892 = char_px(param_380, param_381);
        TEXT_MASK += _4892;
        float2 param_382 = ch_r;
        float2 param_383 = CUR_UV;
        float _4899 = char_px(param_382, param_383);
        TEXT_MASK += _4899;
        float2 param_384 = ch_o;
        float2 param_385 = CUR_UV;
        float _4906 = char_px(param_384, param_385);
        TEXT_MASK += _4906;
        float2 param_386 = ch_p;
        float2 param_387 = CUR_UV;
        float _4913 = char_px(param_386, param_387);
        TEXT_MASK += _4913;
        float2 param_388 = ch_spc;
        float2 param_389 = CUR_UV;
        float _4920 = char_px(param_388, param_389);
        TEXT_MASK += _4920;
        float2 param_390 = ch_A;
        float2 param_391 = CUR_UV;
        float _4927 = char_px(param_390, param_391);
        TEXT_MASK += _4927;
        float2 param_392 = ch_d;
        float2 param_393 = CUR_UV;
        float _4934 = char_px(param_392, param_393);
        TEXT_MASK += _4934;
        float2 param_394 = ch_d;
        float2 param_395 = CUR_UV;
        float _4941 = char_px(param_394, param_395);
        TEXT_MASK += _4941;
        float2 param_396 = ch_spc;
        float2 param_397 = CUR_UV;
        float _4948 = char_px(param_396, param_397);
        TEXT_MASK += _4948;
        float2 param_398 = ch_dsh;
        float2 param_399 = CUR_UV;
        float _4955 = char_px(param_398, param_399);
        TEXT_MASK += _4955;
        float2 param_400 = ch_dsh;
        float2 param_401 = CUR_UV;
        float _4962 = char_px(param_400, param_401);
        TEXT_MASK += _4962;
        float2 param_402 = ch_spc;
        float2 param_403 = CUR_UV;
        float _4969 = char_px(param_402, param_403);
        TEXT_MASK += _4969;
        float param_404 = ROTATED_CORE_PREPPED_SIZE.x;
        int param_405 = 0;
        float2 param_406 = uv;
        float _4978 = print_integer(param_404, param_405, param_406);
        TEXT_MASK += _4978;
        float2 param_407 = ch_spc;
        float2 param_408 = CUR_UV;
        float _4985 = char_px(param_407, param_408);
        TEXT_MASK += _4985;
        float2 param_409 = ch_x;
        float2 param_410 = CUR_UV;
        float _4992 = char_px(param_409, param_410);
        TEXT_MASK += _4992;
        float2 param_411 = ch_spc;
        float2 param_412 = CUR_UV;
        float _4999 = char_px(param_411, param_412);
        TEXT_MASK += _4999;
        float param_413 = ROTATED_CORE_PREPPED_SIZE.y;
        int param_414 = 0;
        float2 param_415 = uv;
        float _5008 = print_integer(param_413, param_414, param_415);
        TEXT_MASK += _5008;
    }
    bool _5015 = derezed_size.x != ROTATED_CORE_ORIGINAL_SIZE.x;
    bool _5024;
    if (!_5015)
    {
        _5024 = derezed_size.y != ROTATED_CORE_ORIGINAL_SIZE.y;
    }
    else
    {
        _5024 = _5015;
    }
    if (_5024)
    {
        print_pos.x = margin;
        print_pos.y += 11.0f;
        float2 param_416 = ch_D;
        float2 param_417 = CUR_UV;
        float _5037 = char_px(param_416, param_417);
        TEXT_MASK += _5037;
        float2 param_418 = ch_e;
        float2 param_419 = CUR_UV;
        float _5044 = char_px(param_418, param_419);
        TEXT_MASK += _5044;
        float2 param_420 = ch_r;
        float2 param_421 = CUR_UV;
        float _5051 = char_px(param_420, param_421);
        TEXT_MASK += _5051;
        float2 param_422 = ch_e;
        float2 param_423 = CUR_UV;
        float _5058 = char_px(param_422, param_423);
        TEXT_MASK += _5058;
        float2 param_424 = ch_z;
        float2 param_425 = CUR_UV;
        float _5065 = char_px(param_424, param_425);
        TEXT_MASK += _5065;
        float2 param_426 = ch_e;
        float2 param_427 = CUR_UV;
        float _5072 = char_px(param_426, param_427);
        TEXT_MASK += _5072;
        float2 param_428 = ch_d;
        float2 param_429 = CUR_UV;
        float _5079 = char_px(param_428, param_429);
        TEXT_MASK += _5079;
        float2 param_430 = ch_spc;
        float2 param_431 = CUR_UV;
        float _5086 = char_px(param_430, param_431);
        TEXT_MASK += _5086;
        float2 param_432 = ch_dsh;
        float2 param_433 = CUR_UV;
        float _5093 = char_px(param_432, param_433);
        TEXT_MASK += _5093;
        float2 param_434 = ch_dsh;
        float2 param_435 = CUR_UV;
        float _5100 = char_px(param_434, param_435);
        TEXT_MASK += _5100;
        float2 param_436 = ch_dsh;
        float2 param_437 = CUR_UV;
        float _5107 = char_px(param_436, param_437);
        TEXT_MASK += _5107;
        float2 param_438 = ch_dsh;
        float2 param_439 = CUR_UV;
        float _5114 = char_px(param_438, param_439);
        TEXT_MASK += _5114;
        float2 param_440 = ch_dsh;
        float2 param_441 = CUR_UV;
        float _5121 = char_px(param_440, param_441);
        TEXT_MASK += _5121;
        float2 param_442 = ch_dsh;
        float2 param_443 = CUR_UV;
        float _5128 = char_px(param_442, param_443);
        TEXT_MASK += _5128;
        float2 param_444 = ch_dsh;
        float2 param_445 = CUR_UV;
        float _5135 = char_px(param_444, param_445);
        TEXT_MASK += _5135;
        float2 param_446 = ch_spc;
        float2 param_447 = CUR_UV;
        float _5142 = char_px(param_446, param_447);
        TEXT_MASK += _5142;
        float param_448 = derezed_size.x;
        int param_449 = 0;
        float2 param_450 = uv;
        float _5151 = print_integer(param_448, param_449, param_450);
        TEXT_MASK += _5151;
        float2 param_451 = ch_spc;
        float2 param_452 = CUR_UV;
        float _5158 = char_px(param_451, param_452);
        TEXT_MASK += _5158;
        float2 param_453 = ch_x;
        float2 param_454 = CUR_UV;
        float _5165 = char_px(param_453, param_454);
        TEXT_MASK += _5165;
        float2 param_455 = ch_spc;
        float2 param_456 = CUR_UV;
        float _5172 = char_px(param_455, param_456);
        TEXT_MASK += _5172;
        float param_457 = derezed_size.y;
        int param_458 = 0;
        float2 param_459 = uv;
        float _5181 = print_integer(param_457, param_458, param_459);
        TEXT_MASK += _5181;
    }
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_460 = ch_C;
    float2 param_461 = CUR_UV;
    float _5194 = char_px(param_460, param_461);
    TEXT_MASK += _5194;
    float2 param_462 = ch_o;
    float2 param_463 = CUR_UV;
    float _5201 = char_px(param_462, param_463);
    TEXT_MASK += _5201;
    float2 param_464 = ch_r;
    float2 param_465 = CUR_UV;
    float _5208 = char_px(param_464, param_465);
    TEXT_MASK += _5208;
    float2 param_466 = ch_e;
    float2 param_467 = CUR_UV;
    float _5215 = char_px(param_466, param_467);
    TEXT_MASK += _5215;
    float2 param_468 = ch_spc;
    float2 param_469 = CUR_UV;
    float _5222 = char_px(param_468, param_469);
    TEXT_MASK += _5222;
    float2 param_470 = ch_dsh;
    float2 param_471 = CUR_UV;
    float _5229 = char_px(param_470, param_471);
    TEXT_MASK += _5229;
    float2 param_472 = ch_dsh;
    float2 param_473 = CUR_UV;
    float _5236 = char_px(param_472, param_473);
    TEXT_MASK += _5236;
    float2 param_474 = ch_dsh;
    float2 param_475 = CUR_UV;
    float _5243 = char_px(param_474, param_475);
    TEXT_MASK += _5243;
    float2 param_476 = ch_dsh;
    float2 param_477 = CUR_UV;
    float _5250 = char_px(param_476, param_477);
    TEXT_MASK += _5250;
    float2 param_478 = ch_dsh;
    float2 param_479 = CUR_UV;
    float _5257 = char_px(param_478, param_479);
    TEXT_MASK += _5257;
    float2 param_480 = ch_dsh;
    float2 param_481 = CUR_UV;
    float _5264 = char_px(param_480, param_481);
    TEXT_MASK += _5264;
    float2 param_482 = ch_dsh;
    float2 param_483 = CUR_UV;
    float _5271 = char_px(param_482, param_483);
    TEXT_MASK += _5271;
    float2 param_484 = ch_dsh;
    float2 param_485 = CUR_UV;
    float _5278 = char_px(param_484, param_485);
    TEXT_MASK += _5278;
    float2 param_486 = ch_dsh;
    float2 param_487 = CUR_UV;
    float _5285 = char_px(param_486, param_487);
    TEXT_MASK += _5285;
    float2 param_488 = ch_dsh;
    float2 param_489 = CUR_UV;
    float _5292 = char_px(param_488, param_489);
    TEXT_MASK += _5292;
    float2 param_490 = ch_spc;
    float2 param_491 = CUR_UV;
    float _5299 = char_px(param_490, param_491);
    TEXT_MASK += _5299;
    float param_492 = ROTATED_CORE_ORIGINAL_SIZE.x;
    int param_493 = 0;
    float2 param_494 = uv;
    float _5308 = print_integer(param_492, param_493, param_494);
    TEXT_MASK += _5308;
    float2 param_495 = ch_spc;
    float2 param_496 = CUR_UV;
    float _5315 = char_px(param_495, param_496);
    TEXT_MASK += _5315;
    float2 param_497 = ch_x;
    float2 param_498 = CUR_UV;
    float _5322 = char_px(param_497, param_498);
    TEXT_MASK += _5322;
    float2 param_499 = ch_spc;
    float2 param_500 = CUR_UV;
    float _5329 = char_px(param_499, param_500);
    TEXT_MASK += _5329;
    float param_501 = ROTATED_CORE_ORIGINAL_SIZE.y;
    int param_502 = 0;
    float2 param_503 = uv;
    float _5338 = print_integer(param_501, param_502, param_503);
    TEXT_MASK += _5338;
    print_pos.x = margin;
    print_pos.y += 22.0f;
    float2 param_504 = ch_S;
    float2 param_505 = CUR_UV;
    float _5351 = char_px(param_504, param_505);
    TEXT_MASK += _5351;
    float2 param_506 = ch_T;
    float2 param_507 = CUR_UV;
    float _5358 = char_px(param_506, param_507);
    TEXT_MASK += _5358;
    float2 param_508 = ch_A;
    float2 param_509 = CUR_UV;
    float _5365 = char_px(param_508, param_509);
    TEXT_MASK += _5365;
    float2 param_510 = ch_N;
    float2 param_511 = CUR_UV;
    float _5372 = char_px(param_510, param_511);
    TEXT_MASK += _5372;
    float2 param_512 = ch_D;
    float2 param_513 = CUR_UV;
    float _5379 = char_px(param_512, param_513);
    TEXT_MASK += _5379;
    float2 param_514 = ch_A;
    float2 param_515 = CUR_UV;
    float _5386 = char_px(param_514, param_515);
    TEXT_MASK += _5386;
    float2 param_516 = ch_R;
    float2 param_517 = CUR_UV;
    float _5393 = char_px(param_516, param_517);
    TEXT_MASK += _5393;
    float2 param_518 = ch_D;
    float2 param_519 = CUR_UV;
    float _5400 = char_px(param_518, param_519);
    TEXT_MASK += _5400;
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_520 = ch_1;
    float2 param_521 = CUR_UV;
    float _5413 = char_px(param_520, param_521);
    TEXT_MASK += _5413;
    float2 param_522 = ch_per;
    float2 param_523 = CUR_UV;
    float _5420 = char_px(param_522, param_523);
    TEXT_MASK += _5420;
    float2 param_524 = ch_1;
    float2 param_525 = CUR_UV;
    float _5427 = char_px(param_524, param_525);
    TEXT_MASK += _5427;
    float2 param_526 = ch_4;
    float2 param_527 = CUR_UV;
    float _5434 = char_px(param_526, param_527);
    TEXT_MASK += _5434;
    float2 param_528 = ch_per;
    float2 param_529 = CUR_UV;
    float _5441 = char_px(param_528, param_529);
    TEXT_MASK += _5441;
    float2 param_530 = ch_0;
    float2 param_531 = CUR_UV;
    float _5448 = char_px(param_530, param_531);
    TEXT_MASK += _5448;
    float2 param_532 = ch_spc;
    float2 param_533 = CUR_UV;
    float _5455 = char_px(param_532, param_533);
    TEXT_MASK += _5455;
    float2 param_534 = ch_2;
    float2 param_535 = CUR_UV;
    float _5462 = char_px(param_534, param_535);
    TEXT_MASK += _5462;
    float2 param_536 = ch_0;
    float2 param_537 = CUR_UV;
    float _5469 = char_px(param_536, param_537);
    TEXT_MASK += _5469;
    float2 param_538 = ch_2;
    float2 param_539 = CUR_UV;
    float _5476 = char_px(param_538, param_539);
    TEXT_MASK += _5476;
    float2 param_540 = ch_3;
    float2 param_541 = CUR_UV;
    float _5483 = char_px(param_540, param_541);
    TEXT_MASK += _5483;
    float2 param_542 = ch_dsh;
    float2 param_543 = CUR_UV;
    float _5490 = char_px(param_542, param_543);
    TEXT_MASK += _5490;
    float2 param_544 = ch_0;
    float2 param_545 = CUR_UV;
    float _5497 = char_px(param_544, param_545);
    TEXT_MASK += _5497;
    float2 param_546 = ch_4;
    float2 param_547 = CUR_UV;
    float _5504 = char_px(param_546, param_547);
    TEXT_MASK += _5504;
    float2 param_548 = ch_dsh;
    float2 param_549 = CUR_UV;
    float _5511 = char_px(param_548, param_549);
    TEXT_MASK += _5511;
    float2 param_550 = ch_1;
    float2 param_551 = CUR_UV;
    float _5518 = char_px(param_550, param_551);
    TEXT_MASK += _5518;
    float2 param_552 = ch_5;
    float2 param_553 = CUR_UV;
    float _5525 = char_px(param_552, param_553);
    TEXT_MASK += _5525;
    print_pos.x = margin;
    print_pos.y += 11.0f;
    float2 param_554 = ch_M;
    float2 param_555 = CUR_UV;
    float _5538 = char_px(param_554, param_555);
    TEXT_MASK += _5538;
    float2 param_556 = ch_E;
    float2 param_557 = CUR_UV;
    float _5545 = char_px(param_556, param_557);
    TEXT_MASK += _5545;
    float2 param_558 = ch_G;
    float2 param_559 = CUR_UV;
    float _5552 = char_px(param_558, param_559);
    TEXT_MASK += _5552;
    float2 param_560 = ch_A;
    float2 param_561 = CUR_UV;
    float _5559 = char_px(param_560, param_561);
    TEXT_MASK += _5559;
    float2 param_562 = ch_spc;
    float2 param_563 = CUR_UV;
    float _5566 = char_px(param_562, param_563);
    TEXT_MASK += _5566;
    float2 param_564 = ch_B;
    float2 param_565 = CUR_UV;
    float _5573 = char_px(param_564, param_565);
    TEXT_MASK += _5573;
    float2 param_566 = ch_E;
    float2 param_567 = CUR_UV;
    float _5580 = char_px(param_566, param_567);
    TEXT_MASK += _5580;
    float2 param_568 = ch_Z;
    float2 param_569 = CUR_UV;
    float _5587 = char_px(param_568, param_569);
    TEXT_MASK += _5587;
    float2 param_570 = ch_E;
    float2 param_571 = CUR_UV;
    float _5594 = char_px(param_570, param_571);
    TEXT_MASK += _5594;
    float2 param_572 = ch_L;
    float2 param_573 = CUR_UV;
    float _5601 = char_px(param_572, param_573);
    TEXT_MASK += _5601;
    float2 param_574 = ch_spc;
    float2 param_575 = CUR_UV;
    float _5608 = char_px(param_574, param_575);
    TEXT_MASK += _5608;
    return TEXT_MASK;
}

float GetText(inout float2 in_coord)
{
    in_coord.x = ((HSM_FLIP_VIEWPORT_HORIZONTAL * HSM_FLIP_CORE_HORIZONTAL) * (in_coord.x - 0.5f)) + 0.5f;
    in_coord.y = ((HSM_FLIP_VIEWPORT_VERTICAL * HSM_FLIP_CORE_VERTICAL) * (in_coord.y - 0.5f)) + 0.5f;
    float2 param = SCREEN_SIZE;
    float2 param_1 = CROPPED_ROTATED_SIZE;
    float2 int_mult = GetIntegerScaleMult(param, param_1);
    float2 canvas_size = global_DerezedPassSize.xy;
    in_coord = ((in_coord - 0.5f.xx) * float2(1.0f, -1.0f)) + 0.5f.xx;
    float downscale = 1.0f;
    if (canvas_size.y > 460.0f)
    {
        downscale = 2.0f;
    }
    if (canvas_size.y > 1000.0f)
    {
        downscale = 3.0f;
    }
    float2 uv = global_OutputSize.xy * in_coord;
    float2 downscaled_uv = floor((global_OutputSize.xy * in_coord) / downscale.xx);
    float2 param_2 = SCREEN_SIZE;
    float4 screen_region = GetScreenRegion(param_2);
    float2 param_3 = downscaled_uv;
    float2 param_4 = global_FinalViewportSize.xy;
    float2 param_5 = SCREEN_SIZE;
    float4 param_6 = screen_region;
    float2 param_7 = ROTATED_DEREZED_SIZE;
    float2 param_8 = ROTATED_CORE_PREPPED_SIZE;
    float2 param_9 = CROPPED_ROTATED_SIZE;
    float2 param_10 = CROPPED_ROTATED_SIZE_WITH_RES_MULT;
    float2 param_11 = int_mult;
    float _5806 = DrawResolutions(param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10, param_11);
    float pixel = _5806;
    float3 col = 1.0f.xxx;
    pixel *= ((1.0f - distance(mod(uv, 1.0f.xx), 0.64999997615814208984375f.xx)) * 1.2000000476837158203125f);
    col *= lerp(0.0f.xxx, 1.0f.xxx, pixel.xxx);
    return col.x;
}

void frag_main()
{
    FOLLOW_MODE_SCALE_AND_POS = 0.0f;
    FOLLOW_MODE_EXACT = 1.0f;
    NEGATIVE_CROP_EXPAND_MULTIPLIER = 0.5f;
    MAX_NEGATIVE_CROP = 0.5f;
    DEFAULT_SCREEN_ASPECT = 1.3329918384552001953125f;
    DEFAULT_BEZEL_ASPECT = 1.32272231578826904296875f;
    DEFAULT_SCREEN_SCALE = 0.0f.xx;
    DEFAULT_BEZEL_SCALE = 0.0f.xx;
    INFOCACHE_MAX_INDEX = 4;
    CACHE_INFO_CHANGED = false;
    CURRENT_FRAME_FROM_CACHE_INFO = 0.0f;
    TUBE_DIFFUSE_MASK = 0.0f;
    TUBE_MASK = 0.0f;
    BEZEL_MASK = 0.0f;
    INSIDE_BEZEL_MASK = 0.0f;
    OUTSIDE_TUBE_MASK_FOR_IMAGE = 0.0f;
    FRAME_MASK = 0.0f;
    FRAME_MASK_FOR_IMAGE = 0.0f;
    OUTSIDE_BEZEL_MASK = 0.0f;
    OUTSIDE_FRAME_MASK_FOR_IMAGE = 0.0f;
    OUTSIDE_FRAME_MASK = 0.0f;
    CUTOUT_MASK = 0.0f;
    SCREEN_INDEX = 1.0f;
    SCREEN_ASPECT = 1.0f;
    SCREEN_SCALE = 1.0f.xx;
    SCREEN_SCALE_WITH_ZOOM = 1.0f.xx;
    SCREEN_POS_OFFSET = 0.1500000059604644775390625f.xx;
    SCREEN_SCALE_2ND_SCREEN = 1.0f.xx;
    SCREEN_POS_OFFSET_1ST_SCREEN = 0.1500000059604644775390625f.xx;
    SCREEN_POS_OFFSET_2ND_SCREEN = 0.1500000059604644775390625f.xx;
    VIEWPORT_SCALE = 1.0f.xx;
    VIEWPORT_POS = 1.0f.xx;
    TUBE_SCALE = 1.0f.xx;
    TUBE_DIFFUSE_SCALE = 1.0f.xx;
    TUBE_DIFFUSE_ASPECT = 1.0f;
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = 1.0f.xx;
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = 1.0f.xx;
    FRAME_SCALE = 1.0f.xx;
    BEZEL_OUTSIDE_SCALE = 0.5f.xx;
    BACKGROUND_SCALE = 0.5f.xx;
    LED_SCALE = 0.5f.xx;
    DEVICE_SCALE = 0.5f.xx;
    DEVICELED_SCALE = 0.5f.xx;
    DECAL_SCALE = 0.5f.xx;
    CAB_GLASS_SCALE = 0.5f.xx;
    TOP_IMAGE_SCALE = 0.5f.xx;
    AVERAGE_LUMA = 0.0f;
    USE_VERTICAL_SCANLINES = 0.0f;
    SAMPLING_SCANLINE_DIR_MULT = 0.0f;
    SAMPLING_OPPOSITE_DIR_MULT = 0.0f;
    CORE_SIZE = 1.0f.xx;
    ROTATED_CORE_ORIGINAL_SIZE = 1.0f.xx;
    ROTATED_CORE_PREPPED_SIZE = 1.0f.xx;
    ROTATED_DEREZED_SIZE = 1.0f.xx;
    CROPPED_ROTATED_SIZE_WITH_RES_MULT = 1.0f.xx;
    CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK = 1.0f.xx;
    CROPPED_ROTATED_SIZE = 1.0f.xx;
    SAMPLE_AREA_START_PIXEL_COORD = 1.0f.xx;
    SCREEN_SIZE = 1.0f.xx;
    VIEWPORT_UNSCALED_COORD = 0.5f.xx;
    SCREEN_COORD = 0.5f.xx;
    TUBE_COORD = 0.5f.xx;
    TUBE_DIFFUSE_COORD = 0.5f.xx;
    TUBE_DIFFUSE_COORD_MIXED_POS = 0.5f.xx;
    BEZEL_OUTSIDE_COORD = 0.5f.xx;
    BACKGROUND_COORD = 0.5f.xx;
    DEVICE_COORD = 0.5f.xx;
    DEVICELED_COORD = 0.5f.xx;
    LED_COORD = 0.5f.xx;
    DECAL_COORD = 0.5f.xx;
    CAB_GLASS_COORD = 0.5f.xx;
    TOP_IMAGE_COORD = 0.5f.xx;
    SCREEN_CURVED_COORD = 0.5f.xx;
    TUBE_CURVED_COORD = 0.5f.xx;
    TUBE_DIFFUSE_CURVED_COORD = 0.5f.xx;
    BEZEL_OUTSIDE_CURVED_COORD = 0.5f.xx;
    FRAME_OUTSIDE_CURVED_COORD = 0.5f.xx;
    BACKGROUND_CURVED_COORD = 0.5f.xx;
    LED_CURVED_COORD = 0.5f.xx;
    DEVICE_CURVED_COORD = 0.5f.xx;
    DEVICELED_CURVED_COORD = 0.5f.xx;
    DECAL_CURVED_COORD = 0.5f.xx;
    CAB_GLASS_CURVED_COORD = 0.5f.xx;
    TOP_IMAGE_CURVED_COORD = 0.5f.xx;
    HSM_RESOLUTION_DEBUG_ON = global_HSM_RESOLUTION_DEBUG_ON;
    HSM_GLOBAL_GRAPHICS_BRIGHTNESS = global_HSM_GLOBAL_GRAPHICS_BRIGHTNESS / 100.0f;
    HSM_STATIC_LAYERS_GAMMA = global_HSM_STATIC_LAYERS_GAMMA;
    HSM_AMBIENT_LIGHTING_OPACITY = global_HSM_AMBIENT_LIGHTING_OPACITY / 100.0f;
    HSM_AMBIENT1_OPACITY = ((global_HSM_AMBIENT1_OPACITY / 100.0f) * global_HSM_AMBIENT_LIGHTING_OPACITY) / 100.0f;
    HSM_AMBIENT2_OPACITY = ((global_HSM_AMBIENT2_OPACITY / 100.0f) * global_HSM_AMBIENT_LIGHTING_OPACITY) / 100.0f;
    HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE = global_HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    HSM_SINDEN_BORDER_ON = global_HSM_SINDEN_BORDER_ON;
    HSM_SINDEN_BORDER_BRIGHTNESS = global_HSM_SINDEN_BORDER_BRIGHTNESS / 100.0f;
    HSM_SINDEN_BORDER_THICKNESS = global_HSM_SINDEN_BORDER_THICKNESS / 100.0f;
    HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION = global_HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
    HSM_VIEWPORT_ZOOM = global_HSM_VIEWPORT_ZOOM / 100.0f;
    HSM_VIEWPORT_ZOOM_MASK = global_HSM_VIEWPORT_ZOOM_MASK;
    HSM_VIEWPORT_POSITION_X = ((-1.0f) * global_HSM_VIEWPORT_POSITION_X) / 1000.0f;
    HSM_VIEWPORT_POSITION_Y = ((-1.0f) * global_HSM_VIEWPORT_POSITION_Y) / 1000.0f;
    HSM_FLIP_VIEWPORT_VERTICAL = -((global_HSM_FLIP_VIEWPORT_VERTICAL * 2.0f) - 1.0f);
    HSM_FLIP_VIEWPORT_HORIZONTAL = -((global_HSM_FLIP_VIEWPORT_HORIZONTAL * 2.0f) - 1.0f);
    HSM_FLIP_CORE_VERTICAL = -((global_HSM_FLIP_CORE_VERTICAL * 2.0f) - 1.0f);
    HSM_FLIP_CORE_HORIZONTAL = -((global_HSM_FLIP_CORE_HORIZONTAL * 2.0f) - 1.0f);
    HSM_ROTATE_CORE_IMAGE = global_HSM_ROTATE_CORE_IMAGE;
    HSM_ASPECT_RATIO_ORIENTATION = global_HSM_ASPECT_RATIO_ORIENTATION;
    HSM_ASPECT_RATIO_MODE = global_HSM_ASPECT_RATIO_MODE;
    HSM_ASPECT_RATIO_EXPLICIT = global_HSM_ASPECT_RATIO_EXPLICIT;
    HSM_VERTICAL_PRESET = global_HSM_VERTICAL_PRESET;
    HSM_INT_SCALE_MAX_HEIGHT = global_HSM_INT_SCALE_MAX_HEIGHT / 100.0f;
    HSM_NON_INTEGER_SCALE = global_HSM_NON_INTEGER_SCALE / 100.0f;
    HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER = global_HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
    HSM_PHYSICAL_MONITOR_ASPECT_RATIO = global_HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
    HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE = global_HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
    HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE = global_HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
    HSM_USE_IMAGE_FOR_PLACEMENT = global_HSM_USE_IMAGE_FOR_PLACEMENT;
    HSM_PLACEMENT_IMAGE_USE_HORIZONTAL = global_HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
    HSM_PLACEMENT_IMAGE_MODE = global_HSM_PLACEMENT_IMAGE_MODE;
    HSM_NON_INTEGER_SCALE_OFFSET = global_HSM_NON_INTEGER_SCALE_OFFSET / 100.0f;
    HSM_USE_SNAP_TO_CLOSEST_INT_SCALE = global_HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
    float _401;
    if (HSM_USE_SNAP_TO_CLOSEST_INT_SCALE > 0.5f)
    {
        _401 = global_HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE / 100.0f;
    }
    else
    {
        _401 = 0.0f;
    }
    HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE = _401;
    HSM_SCREEN_POSITION_X = global_HSM_SCREEN_POSITION_X / 1000.0f;
    HSM_SCREEN_POSITION_Y = ((-1.0f) * global_HSM_SCREEN_POSITION_Y) / 1000.0f;
    HSM_CROP_MODE = global_HSM_CROP_MODE;
    HSM_CROP_PERCENT_ZOOM = global_HSM_CROP_PERCENT_ZOOM / 100.0f;
    HSM_CROP_PERCENT_TOP = global_HSM_CROP_PERCENT_TOP / 100.0f;
    HSM_CROP_PERCENT_BOTTOM = global_HSM_CROP_PERCENT_BOTTOM / 100.0f;
    HSM_CROP_PERCENT_LEFT = global_HSM_CROP_PERCENT_LEFT / 100.0f;
    HSM_CROP_PERCENT_RIGHT = global_HSM_CROP_PERCENT_RIGHT / 100.0f;
    HSM_CROP_BLACK_THRESHOLD = global_HSM_CROP_BLACK_THRESHOLD / 100.0f;
    HSM_SCANLINE_DIRECTION = global_HSM_SCANLINE_DIRECTION;
    HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR = global_HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR / 100.0f;
    HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR = global_HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR / 100.0f;
    HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR = global_HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR / 100.0f;
    HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR = global_HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR / 100.0f;
    HSM_USE_GEOM = 0.0f;
    HSM_CURVATURE_MODE = global_HSM_CURVATURE_MODE;
    HSM_CURVATURE_3D_RADIUS = global_HSM_CURVATURE_3D_RADIUS / 100.0f;
    HSM_CURVATURE_3D_VIEW_DIST = global_HSM_CURVATURE_3D_VIEW_DIST / 100.0f;
    HSM_CURVATURE_3D_TILT_ANGLE_X = global_HSM_CURVATURE_3D_TILT_ANGLE_X / 100.0f;
    HSM_CURVATURE_3D_TILT_ANGLE_Y = global_HSM_CURVATURE_3D_TILT_ANGLE_Y / 100.0f;
    HSM_CRT_CURVATURE_SCALE = global_HSM_CRT_CURVATURE_SCALE / 100.0f;
    HSM_CACHE_GRAPHICS_ON = global_HSM_CACHE_GRAPHICS_ON;
    HSM_CACHE_UPDATE_INDICATOR_MODE = global_HSM_CACHE_UPDATE_INDICATOR_MODE;
    HSM_AB_COMPARE_SHOW_MODE = global_HSM_AB_COMPARE_SHOW_MODE;
    HSM_AB_COMPARE_AREA = global_HSM_AB_COMPARE_AREA;
    HSM_AB_COMPARE_SPLIT_POSITION = global_HSM_AB_COMPARE_SPLIT_POSITION / 100.0f;
    HSM_AB_COMPARE_FREEZE_CRT_TUBE = global_HSM_AB_COMPARE_FREEZE_CRT_TUBE;
    HSM_AB_COMPARE_FREEZE_GRAPHICS = global_HSM_AB_COMPARE_FREEZE_GRAPHICS;
    HSM_SHOW_PASS_INDEX = global_HSM_SHOW_PASS_INDEX;
    HSM_SHOW_PASS_APPLY_SCREEN_COORD = global_HSM_SHOW_PASS_APPLY_SCREEN_COORD;
    HSM_SHOW_PASS_ALPHA = global_HSM_SHOW_PASS_ALPHA;
    HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE = global_HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
    HSM_MONOCHROME_DUALSCREEN_VIS_MODE = global_HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_MODE = global_HSM_TUBE_DIFFUSE_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_AMOUNT = global_HSM_TUBE_DIFFUSE_IMAGE_AMOUNT / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE = global_HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON = global_HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
    HSM_TUBE_DIFFUSE_IMAGE_HUE = global_HSM_TUBE_DIFFUSE_IMAGE_HUE / 360.0f;
    HSM_TUBE_DIFFUSE_IMAGE_SATURATION = global_HSM_TUBE_DIFFUSE_IMAGE_SATURATION / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS = global_HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_GAMMA = global_HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING = global_HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING = global_HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE = global_HSM_TUBE_DIFFUSE_IMAGE_SCALE / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE_X = global_HSM_TUBE_DIFFUSE_IMAGE_SCALE_X / 100.0f;
    HSM_TUBE_DIFFUSE_IMAGE_ROTATION = global_HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
    HSM_TUBE_SHADOW_IMAGE_ON = global_HSM_TUBE_SHADOW_IMAGE_ON;
    HSM_TUBE_SHADOW_IMAGE_OPACITY = global_HSM_TUBE_SHADOW_IMAGE_OPACITY / 100.0f;
    HSM_TUBE_SHADOW_IMAGE_POS_X = global_HSM_TUBE_SHADOW_IMAGE_POS_X / 100.0f;
    HSM_TUBE_SHADOW_IMAGE_POS_Y = global_HSM_TUBE_SHADOW_IMAGE_POS_Y / 100.0f;
    HSM_TUBE_SHADOW_IMAGE_SCALE_X = global_HSM_TUBE_SHADOW_IMAGE_SCALE_X / 100.0f;
    HSM_TUBE_SHADOW_IMAGE_SCALE_Y = global_HSM_TUBE_SHADOW_IMAGE_SCALE_Y / 100.0f;
    HSM_TUBE_SHADOW_CURVATURE_SCALE = global_HSM_TUBE_SHADOW_CURVATURE_SCALE / 100.0f;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_ON = global_HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE = global_HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY = global_HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY / 100.0f;
    HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY = global_HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY / 100.0f;
    HSM_TUBE_STATIC_BLACK_LEVEL = (global_HSM_TUBE_STATIC_BLACK_LEVEL / 1000.0f) + 1.0f;
    HSM_TUBE_STATIC_AMBIENT_LIGHTING = global_HSM_TUBE_STATIC_AMBIENT_LIGHTING / 100.0f;
    HSM_TUBE_STATIC_AMBIENT2_LIGHTING = global_HSM_TUBE_STATIC_AMBIENT2_LIGHTING / 100.0f;
    HSM_TUBE_STATIC_SCALE = global_HSM_TUBE_STATIC_SCALE / 100.0f;
    HSM_TUBE_STATIC_SCALE_X = global_HSM_TUBE_STATIC_SCALE_X / 100.0f;
    HSM_TUBE_STATIC_POS_X = global_HSM_TUBE_STATIC_POS_X / (-1000.0f);
    HSM_TUBE_STATIC_POS_Y = global_HSM_TUBE_STATIC_POS_Y / 1000.0f;
    HSM_TUBE_STATIC_SHADOW_OPACITY = global_HSM_TUBE_STATIC_SHADOW_OPACITY / 100.0f;
    HSM_TUBE_STATIC_DITHER_SAMPLES = global_HSM_TUBE_STATIC_DITHER_SAMPLES;
    HSM_TUBE_STATIC_DITHER_DISTANCE = global_HSM_TUBE_STATIC_DITHER_DISTANCE;
    HSM_TUBE_STATIC_DITHER_AMOUNT = global_HSM_TUBE_STATIC_DITHER_AMOUNT;
    HSM_TUBE_OPACITY = global_HSM_TUBE_OPACITY / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_ON = global_HSM_TUBE_COLORED_GEL_IMAGE_ON;
    HSM_TUBE_COLORED_GEL_IMAGE_SCALE = global_HSM_TUBE_COLORED_GEL_IMAGE_SCALE / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL = -((global_HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL * 2.0f) - 1.0f);
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL = -((global_HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL * 2.0f) - 1.0f);
    HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE = global_HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT = global_HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT = global_HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT = global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD = global_HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS = global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE = global_HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT = global_HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING = global_HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING / 100.0f;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING = global_HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING / 100.0f;
    HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL = 0.0f;
    HSM_DUALSCREEN_MODE = global_HSM_DUALSCREEN_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE = global_HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS = global_HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET = global_HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET / 1000.0f;
    HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION = global_HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / 1000.0f;
    HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE = global_HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
    HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS = global_HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS / 1000.0f;
    HSM_2ND_SCREEN_ASPECT_RATIO_MODE = global_HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
    HSM_2ND_SCREEN_INDEPENDENT_SCALE = global_HSM_2ND_SCREEN_INDEPENDENT_SCALE;
    HSM_2ND_SCREEN_SCALE_OFFSET = global_HSM_2ND_SCREEN_SCALE_OFFSET / 100.0f;
    HSM_2ND_SCREEN_POS_X = global_HSM_2ND_SCREEN_POS_X / 1000.0f;
    HSM_2ND_SCREEN_POS_Y = global_HSM_2ND_SCREEN_POS_Y / 1000.0f;
    HSM_2ND_SCREEN_CROP_PERCENT_ZOOM = global_HSM_2ND_SCREEN_CROP_PERCENT_ZOOM / 100.0f;
    HSM_2ND_SCREEN_CROP_PERCENT_TOP = global_HSM_2ND_SCREEN_CROP_PERCENT_TOP / 100.0f;
    HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM = global_HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM / 100.0f;
    HSM_2ND_SCREEN_CROP_PERCENT_LEFT = global_HSM_2ND_SCREEN_CROP_PERCENT_LEFT / 100.0f;
    HSM_2ND_SCREEN_CROP_PERCENT_RIGHT = global_HSM_2ND_SCREEN_CROP_PERCENT_RIGHT / 100.0f;
    HSM_SCREEN_REFLECTION_SCALE = global_HSM_SCREEN_REFLECTION_SCALE / 100.0f;
    HSM_SCREEN_REFLECTION_POS_X = global_HSM_SCREEN_REFLECTION_POS_X / 600.0f;
    HSM_SCREEN_REFLECTION_POS_Y = global_HSM_SCREEN_REFLECTION_POS_Y / 600.0f;
    HSM_AMBIENT1_HUE = global_HSM_AMBIENT1_HUE / 360.0f;
    HSM_AMBIENT1_SATURATION = global_HSM_AMBIENT1_SATURATION / 100.0f;
    HSM_AMBIENT1_VALUE = global_HSM_AMBIENT1_VALUE / 100.0f;
    HSM_AMBIENT1_CONTRAST = global_HSM_AMBIENT1_CONTRAST / 100.0f;
    HSM_AMBIENT1_SCALE_KEEP_ASPECT = global_HSM_AMBIENT1_SCALE_KEEP_ASPECT;
    HSM_AMBIENT1_SCALE_INHERIT_MODE = global_HSM_AMBIENT1_SCALE_INHERIT_MODE;
    HSM_AMBIENT1_SCALE = global_HSM_AMBIENT1_SCALE / 100.0f;
    HSM_AMBIENT1_SCALE_X = global_HSM_AMBIENT1_SCALE_X / 100.0f;
    HSM_AMBIENT1_ROTATE = global_HSM_AMBIENT1_ROTATE;
    HSM_AMBIENT1_MIRROR_HORZ = global_HSM_AMBIENT1_MIRROR_HORZ;
    HSM_AMBIENT1_POS_INHERIT_MODE = global_HSM_AMBIENT1_POS_INHERIT_MODE;
    HSM_AMBIENT1_POSITION_X = global_HSM_AMBIENT1_POSITION_X / (-1000.0f);
    HSM_AMBIENT1_POSITION_Y = ((-1.0f) * global_HSM_AMBIENT1_POSITION_Y) / (-1000.0f);
    HSM_AMBIENT1_DITHERING_SAMPLES = 0.0f;
    HSM_AMBIENT2_HUE = global_HSM_AMBIENT2_HUE / 360.0f;
    HSM_AMBIENT2_SATURATION = global_HSM_AMBIENT2_SATURATION / 100.0f;
    HSM_AMBIENT2_VALUE = global_HSM_AMBIENT2_VALUE / 100.0f;
    HSM_AMBIENT2_CONTRAST = global_HSM_AMBIENT2_CONTRAST / 100.0f;
    HSM_AMBIENT2_SCALE_KEEP_ASPECT = global_HSM_AMBIENT2_SCALE_KEEP_ASPECT;
    HSM_AMBIENT2_SCALE_INHERIT_MODE = global_HSM_AMBIENT2_SCALE_INHERIT_MODE;
    HSM_AMBIENT2_SCALE = global_HSM_AMBIENT2_SCALE / 100.0f;
    HSM_AMBIENT2_SCALE_X = global_HSM_AMBIENT2_SCALE_X / 100.0f;
    HSM_AMBIENT2_ROTATE = global_HSM_AMBIENT2_ROTATE;
    HSM_AMBIENT2_MIRROR_HORZ = global_HSM_AMBIENT2_MIRROR_HORZ;
    HSM_AMBIENT2_POS_INHERIT_MODE = global_HSM_AMBIENT2_POS_INHERIT_MODE;
    HSM_AMBIENT2_POSITION_X = global_HSM_AMBIENT2_POSITION_X / (-1000.0f);
    HSM_AMBIENT2_POSITION_Y = ((-1.0f) * global_HSM_AMBIENT2_POSITION_Y) / (-1000.0f);
    HSM_BZL_OPACITY = global_HSM_BZL_OPACITY / 100.0f;
    HSM_BZL_BLEND_MODE = global_HSM_BZL_BLEND_MODE;
    HSM_BZL_WIDTH = global_HSM_BZL_WIDTH * 0.0008623999892733991146087646484375f;
    HSM_BZL_HEIGHT = global_HSM_BZL_HEIGHT * 0.000873200013302266597747802734375f;
    HSM_BZL_INNER_CORNER_RADIUS_SCALE = global_HSM_BZL_INNER_CORNER_RADIUS_SCALE / 100.0f;
    HSM_BZL_INNER_EDGE_THICKNESS = global_HSM_BZL_INNER_EDGE_THICKNESS * 7.0000001869630068540573120117188e-05f;
    HSM_BZL_INNER_EDGE_SHARPNESS = global_HSM_BZL_INNER_EDGE_SHARPNESS / 100.0f;
    HSM_BZL_OUTER_POSITION_Y = global_HSM_BZL_OUTER_POSITION_Y / 2000.0f;
    HSM_BZL_OUTER_CURVATURE_SCALE = global_HSM_BZL_OUTER_CURVATURE_SCALE / 100.0f;
    HSM_BZL_OUTER_CORNER_RADIUS_SCALE = (0.89999997615814208984375f * global_HSM_BZL_OUTER_CORNER_RADIUS_SCALE) / 100.0f;
    HSM_BZL_NOISE = global_HSM_BZL_NOISE / 100.0f;
    HSM_BZL_INNER_EDGE_SHADOW = global_HSM_BZL_INNER_EDGE_SHADOW / 100.0f;
    HSM_BZL_BRIGHTNESS = global_HSM_BZL_BRIGHTNESS / 100.0f;
    HSM_BZL_BRIGHTNESS_MULT_TOP = global_HSM_BZL_BRIGHTNESS_MULT_TOP / 100.0f;
    HSM_BZL_BRIGHTNESS_MULT_BOTTOM = global_HSM_BZL_BRIGHTNESS_MULT_BOTTOM / 100.0f;
    HSM_BZL_BRIGHTNESS_MULT_SIDES = global_HSM_BZL_BRIGHTNESS_MULT_SIDES / 100.0f;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT = global_HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT / 100.0f;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT = global_HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT / 100.0f;
    HSM_BZL_HIGHLIGHT = global_HSM_BZL_HIGHLIGHT / 100.0f;
    HSM_BZL_INNER_EDGE_HIGHLIGHT = global_HSM_BZL_INNER_EDGE_HIGHLIGHT / 100.0f;
    HSM_BZL_COLOR_HUE = global_HSM_BZL_COLOR_HUE / 360.0f;
    HSM_BZL_COLOR_SATURATION = global_HSM_BZL_COLOR_SATURATION / 100.0f;
    HSM_BZL_COLOR_VALUE = global_HSM_BZL_COLOR_VALUE / 100.0f;
    HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_FRM_USE_INDEPENDENT_COLOR = global_HSM_FRM_USE_INDEPENDENT_COLOR;
    HSM_FRM_COLOR_HUE = global_HSM_FRM_COLOR_HUE / 360.0f;
    HSM_FRM_COLOR_SATURATION = global_HSM_FRM_COLOR_SATURATION / 100.0f;
    HSM_FRM_COLOR_VALUE = global_HSM_FRM_COLOR_VALUE / 100.0f;
    HSM_FRM_OPACITY = global_HSM_FRM_OPACITY / 100.0f;
    HSM_FRM_BLEND_MODE = 1.0f;
    HSM_FRM_TEXTURE_OPACITY = global_HSM_FRM_TEXTURE_OPACITY / 100.0f;
    HSM_FRM_TEXTURE_BLEND_MODE = global_HSM_FRM_TEXTURE_BLEND_MODE;
    HSM_FRM_NOISE = global_HSM_FRM_NOISE / 100.0f;
    HSM_FRM_INNER_EDGE_THICKNESS = global_HSM_FRM_INNER_EDGE_THICKNESS * 2.9999999242136254906654357910156e-05f;
    HSM_FRM_INNER_EDGE_HIGHLIGHT = global_HSM_FRM_INNER_EDGE_HIGHLIGHT * 0.001000000047497451305389404296875f;
    HSM_FRM_THICKNESS = global_HSM_FRM_THICKNESS * 0.00069999997504055500030517578125f;
    HSM_FRM_THICKNESS_SCALE_X = global_HSM_FRM_THICKNESS_SCALE_X / 100.0f;
    HSM_FRM_OUTER_POS_Y = global_HSM_FRM_OUTER_POS_Y / 100.0f;
    HSM_FRM_OUTER_CURVATURE_SCALE = global_HSM_FRM_OUTER_CURVATURE_SCALE / 100.0f;
    HSM_FRM_OUTER_CORNER_RADIUS = global_HSM_FRM_OUTER_CORNER_RADIUS;
    HSM_FRM_OUTER_EDGE_THICKNESS = global_HSM_FRM_OUTER_EDGE_THICKNESS * 5.9999998484272509813308715820312e-05f;
    HSM_FRM_OUTER_EDGE_SHADING = global_HSM_FRM_OUTER_EDGE_SHADING / 100.0f;
    HSM_FRM_SHADOW_OPACITY = global_HSM_FRM_SHADOW_OPACITY / 100.0f;
    HSM_FRM_SHADOW_WIDTH = global_HSM_FRM_SHADOW_WIDTH / 1000.0f;
    HSM_REFLECT_CORNER_FADE = global_HSM_REFLECT_CORNER_FADE / 100.0f;
    HSM_REFLECT_CORNER_FADE_DISTANCE = global_HSM_REFLECT_CORNER_FADE_DISTANCE / 100.0f;
    HSM_REFLECT_CORNER_INNER_SPREAD = global_HSM_REFLECT_CORNER_INNER_SPREAD / 100.0f;
    HSM_REFLECT_CORNER_OUTER_SPREAD = global_HSM_REFLECT_CORNER_OUTER_SPREAD / 100.0f;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP = global_HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM = global_HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
    HSM_REFLECT_CORNER_SPREAD_FALLOFF = global_HSM_REFLECT_CORNER_SPREAD_FALLOFF;
    HSM_REFLECT_GLOBAL_AMOUNT = global_HSM_REFLECT_GLOBAL_AMOUNT / 100.0f;
    HSM_REFLECT_GLOBAL_GAMMA_ADJUST = global_HSM_REFLECT_GLOBAL_GAMMA_ADJUST;
    HSM_REFLECT_DIRECT_AMOUNT = global_HSM_REFLECT_DIRECT_AMOUNT / 100.0f;
    HSM_REFLECT_DIFFUSED_AMOUNT = global_HSM_REFLECT_DIFFUSED_AMOUNT / 100.0f;
    HSM_REFLECT_FULLSCREEN_GLOW = global_HSM_REFLECT_FULLSCREEN_GLOW / 100.0f;
    HSM_REFLECT_FULLSCREEN_GLOW_GAMMA = global_HSM_REFLECT_FULLSCREEN_GLOW_GAMMA;
    HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT = global_HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT / 100.0f;
    HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW = global_HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW / 100.0f;
    HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT = global_HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT / 100.0f;
    HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS = global_HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS / 100.0f;
    HSM_REFLECT_SHOW_TUBE_FX_AMOUNT = global_HSM_REFLECT_SHOW_TUBE_FX_AMOUNT / 100.0f;
    HSM_REFLECT_FADE_AMOUNT = global_HSM_REFLECT_FADE_AMOUNT / 100.0f;
    HSM_REFLECT_RADIAL_FADE_WIDTH = global_HSM_REFLECT_RADIAL_FADE_WIDTH / 350.0f;
    HSM_REFLECT_RADIAL_FADE_HEIGHT = global_HSM_REFLECT_RADIAL_FADE_HEIGHT / 350.0f;
    HSM_REFLECT_LATERAL_OUTER_FADE_POSITION = global_HSM_REFLECT_LATERAL_OUTER_FADE_POSITION / (-1000.0f);
    HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE = global_HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE / 100.0f;
    HSM_REFLECT_BLUR_NUM_SAMPLES = global_HSM_REFLECT_BLUR_NUM_SAMPLES;
    HSM_REFLECT_BLUR_MIN = global_HSM_REFLECT_BLUR_MIN / 100.0f;
    HSM_REFLECT_BLUR_MAX = global_HSM_REFLECT_BLUR_MAX / 100.0f;
    HSM_REFLECT_BLUR_FALLOFF_DISTANCE = global_HSM_REFLECT_BLUR_FALLOFF_DISTANCE / 100.0f;
    HSM_REFLECT_NOISE_AMOUNT = global_HSM_REFLECT_NOISE_AMOUNT / 100.0f;
    HSM_REFLECT_NOISE_SAMPLES = global_HSM_REFLECT_NOISE_SAMPLES;
    HSM_REFLECT_NOISE_SAMPLE_DISTANCE = global_HSM_REFLECT_NOISE_SAMPLE_DISTANCE / 500.0f;
    HSM_GLASS_BORDER_ON = global_HSM_GLASS_BORDER_ON;
    HSM_REFLECT_VIGNETTE_AMOUNT = global_HSM_REFLECT_VIGNETTE_AMOUNT / 100.0f;
    HSM_REFLECT_VIGNETTE_SIZE = global_HSM_REFLECT_VIGNETTE_SIZE / 100.0f;
    HSM_BG_LAYER_ORDER = global_HSM_BG_LAYER_ORDER;
    HSM_VIEWPORT_VIGNETTE_LAYER_ORDER = global_HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
    HSM_LED_LAYER_ORDER = global_HSM_LED_LAYER_ORDER;
    HSM_DEVICE_LAYER_ORDER = global_HSM_DEVICE_LAYER_ORDER;
    HSM_DEVICELED_LAYER_ORDER = global_HSM_DEVICELED_LAYER_ORDER;
    HSM_CRT_LAYER_ORDER = global_HSM_CRT_LAYER_ORDER;
    HSM_DECAL_LAYER_ORDER = global_HSM_DECAL_LAYER_ORDER;
    HSM_CAB_GLASS_LAYER_ORDER = global_HSM_CAB_GLASS_LAYER_ORDER;
    HSM_TOP_LAYER_ORDER = global_HSM_TOP_LAYER_ORDER;
    HSM_CUTOUT_ASPECT_MODE = global_HSM_CUTOUT_ASPECT_MODE;
    HSM_CUTOUT_EXPLICIT_ASPECT = global_HSM_CUTOUT_EXPLICIT_ASPECT;
    HSM_CUTOUT_FOLLOW_LAYER = global_HSM_CUTOUT_FOLLOW_LAYER;
    HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM = global_HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
    HSM_CUTOUT_SCALE = global_HSM_CUTOUT_SCALE / 100.0f;
    HSM_CUTOUT_SCALE_X = global_HSM_CUTOUT_SCALE_X / 100.0f;
    HSM_CUTOUT_POS_X = global_HSM_CUTOUT_POS_X / (-100.0f);
    HSM_CUTOUT_POS_Y = global_HSM_CUTOUT_POS_Y / 100.0f;
    HSM_CUTOUT_CORNER_RADIUS = global_HSM_CUTOUT_CORNER_RADIUS;
    HSM_LAYERING_DEBUG_MASK_MODE = global_HSM_LAYERING_DEBUG_MASK_MODE;
    HSM_BG_OPACITY = global_HSM_BG_OPACITY / 100.0f;
    HSM_BG_COLORIZE_ON = global_HSM_BG_COLORIZE_ON;
    HSM_BG_HUE = global_HSM_BG_HUE / 360.0f;
    HSM_BG_SATURATION = global_HSM_BG_SATURATION / 100.0f;
    HSM_BG_BRIGHTNESS = global_HSM_BG_BRIGHTNESS / 100.0f;
    HSM_BG_GAMMA = global_HSM_BG_GAMMA;
    HSM_BG_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_BG_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_BG_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_BG_BLEND_MODE = global_HSM_BG_BLEND_MODE;
    HSM_BG_SOURCE_MATTE_TYPE = global_HSM_BG_SOURCE_MATTE_TYPE;
    HSM_BG_MIPMAPPING_BLEND_BIAS = global_HSM_BG_MIPMAPPING_BLEND_BIAS;
    HSM_BG_MASK_MODE = global_HSM_BG_MASK_MODE;
    HSM_BG_CUTOUT_MODE = global_HSM_BG_CUTOUT_MODE;
    HSM_BG_DUALSCREEN_VIS_MODE = global_HSM_BG_DUALSCREEN_VIS_MODE;
    HSM_BG_FOLLOW_LAYER = global_HSM_BG_FOLLOW_LAYER;
    HSM_BG_FOLLOW_MODE = global_HSM_BG_FOLLOW_MODE;
    HSM_BG_FOLLOW_FULL_USES_ZOOM = global_HSM_BG_FOLLOW_FULL_USES_ZOOM;
    HSM_BG_FILL_MODE = global_HSM_BG_FILL_MODE;
    HSM_BG_SPLIT_PRESERVE_CENTER = global_HSM_BG_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_BG_SPLIT_REPEAT_WIDTH = global_HSM_BG_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_BG_SCALE = global_HSM_BG_SCALE / 100.0f;
    HSM_BG_SCALE_X = global_HSM_BG_SCALE_X / 100.0f;
    HSM_BG_POS_X = global_HSM_BG_POS_X / (-100.0f);
    HSM_BG_POS_Y = global_HSM_BG_POS_Y / 100.0f;
    HSM_BG_WRAP_MODE = global_HSM_BG_WRAP_MODE;
    HSM_VIEWPORT_VIGNETTE_OPACITY = global_HSM_VIEWPORT_VIGNETTE_OPACITY / 100.0f;
    HSM_VIEWPORT_VIGNETTE_MASK_MODE = global_HSM_VIEWPORT_VIGNETTE_MASK_MODE;
    HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE = global_HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
    HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER = global_HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
    HSM_VIEWPORT_VIGNETTE_SCALE = global_HSM_VIEWPORT_VIGNETTE_SCALE / 100.0f;
    HSM_VIEWPORT_VIGNETTE_SCALE_X = global_HSM_VIEWPORT_VIGNETTE_SCALE_X / 100.0f;
    HSM_VIEWPORT_VIGNETTE_POS_X = global_HSM_VIEWPORT_VIGNETTE_POS_X / (-100.0f);
    HSM_VIEWPORT_VIGNETTE_POS_Y = global_HSM_VIEWPORT_VIGNETTE_POS_Y / 100.0f;
    HSM_LED_OPACITY = global_HSM_LED_OPACITY / 100.0f;
    HSM_LED_COLORIZE_ON = global_HSM_LED_COLORIZE_ON;
    HSM_LED_HUE = global_HSM_LED_HUE / 360.0f;
    HSM_LED_SATURATION = global_HSM_LED_SATURATION / 100.0f;
    HSM_LED_BRIGHTNESS = global_HSM_LED_BRIGHTNESS / 100.0f;
    HSM_LED_GAMMA = global_HSM_LED_GAMMA;
    HSM_LED_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_LED_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_LED_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_LED_BLEND_MODE = global_HSM_LED_BLEND_MODE;
    HSM_LED_SOURCE_MATTE_TYPE = global_HSM_LED_SOURCE_MATTE_TYPE;
    HSM_LED_MASK_MODE = global_HSM_LED_MASK_MODE;
    HSM_LED_MIPMAPPING_BLEND_BIAS = global_HSM_LED_MIPMAPPING_BLEND_BIAS;
    HSM_LED_CUTOUT_MODE = global_HSM_LED_CUTOUT_MODE;
    HSM_LED_DUALSCREEN_VIS_MODE = global_HSM_LED_DUALSCREEN_VIS_MODE;
    HSM_LED_FOLLOW_LAYER = global_HSM_LED_FOLLOW_LAYER;
    HSM_LED_FOLLOW_MODE = global_HSM_LED_FOLLOW_MODE;
    HSM_LED_FOLLOW_FULL_USES_ZOOM = global_HSM_LED_FOLLOW_FULL_USES_ZOOM;
    HSM_LED_FILL_MODE = global_HSM_LED_FILL_MODE;
    HSM_LED_SPLIT_PRESERVE_CENTER = global_HSM_LED_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_LED_SPLIT_REPEAT_WIDTH = global_HSM_LED_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_LED_SCALE = global_HSM_LED_SCALE / 100.0f;
    HSM_LED_SCALE_X = global_HSM_LED_SCALE_X / 100.0f;
    HSM_LED_POS_X = global_HSM_LED_POS_X / (-100.0f);
    HSM_LED_POS_Y = global_HSM_LED_POS_Y / 100.0f;
    HSM_DEVICE_OPACITY = global_HSM_DEVICE_OPACITY / 100.0f;
    HSM_DEVICE_COLORIZE_ON = global_HSM_DEVICE_COLORIZE_ON;
    HSM_DEVICE_HUE = global_HSM_DEVICE_HUE / 360.0f;
    HSM_DEVICE_SATURATION = global_HSM_DEVICE_SATURATION / 100.0f;
    HSM_DEVICE_BRIGHTNESS = global_HSM_DEVICE_BRIGHTNESS / 100.0f;
    HSM_DEVICE_GAMMA = global_HSM_DEVICE_GAMMA;
    HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICE_BLEND_MODE = global_HSM_DEVICE_BLEND_MODE;
    HSM_DEVICE_SOURCE_MATTE_TYPE = global_HSM_DEVICE_SOURCE_MATTE_TYPE;
    HSM_DEVICE_MASK_MODE = global_HSM_DEVICE_MASK_MODE;
    HSM_DEVICE_MIPMAPPING_BLEND_BIAS = global_HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICE_CUTOUT_MODE = global_HSM_DEVICE_CUTOUT_MODE;
    HSM_DEVICE_DUALSCREEN_VIS_MODE = global_HSM_DEVICE_DUALSCREEN_VIS_MODE;
    HSM_DEVICE_FOLLOW_LAYER = global_HSM_DEVICE_FOLLOW_LAYER;
    HSM_DEVICE_FOLLOW_MODE = global_HSM_DEVICE_FOLLOW_MODE;
    HSM_DEVICE_FOLLOW_FULL_USES_ZOOM = global_HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICE_FILL_MODE = global_HSM_DEVICE_FILL_MODE;
    HSM_DEVICE_SPLIT_PRESERVE_CENTER = global_HSM_DEVICE_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_DEVICE_SPLIT_REPEAT_WIDTH = global_HSM_DEVICE_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_DEVICE_SCALE = global_HSM_DEVICE_SCALE / 100.0f;
    HSM_DEVICE_SCALE_X = global_HSM_DEVICE_SCALE_X / 100.0f;
    HSM_DEVICE_POS_X = global_HSM_DEVICE_POS_X / (-100.0f);
    HSM_DEVICE_POS_Y = global_HSM_DEVICE_POS_Y / 100.0f;
    HSM_DEVICELED_OPACITY = global_HSM_DEVICELED_OPACITY / 100.0f;
    HSM_DEVICELED_COLORIZE_ON = global_HSM_DEVICELED_COLORIZE_ON;
    HSM_DEVICELED_HUE = global_HSM_DEVICELED_HUE / 360.0f;
    HSM_DEVICELED_SATURATION = global_HSM_DEVICELED_SATURATION / 100.0f;
    HSM_DEVICELED_BRIGHTNESS = global_HSM_DEVICELED_BRIGHTNESS / 100.0f;
    HSM_DEVICELED_GAMMA = global_HSM_DEVICELED_GAMMA;
    HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICELED_BLEND_MODE = global_HSM_DEVICELED_BLEND_MODE;
    HSM_DEVICELED_SOURCE_MATTE_TYPE = global_HSM_DEVICELED_SOURCE_MATTE_TYPE;
    HSM_DEVICELED_MASK_MODE = global_HSM_DEVICELED_MASK_MODE;
    HSM_DEVICELED_MIPMAPPING_BLEND_BIAS = global_HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICELED_CUTOUT_MODE = global_HSM_DEVICELED_CUTOUT_MODE;
    HSM_DEVICELED_DUALSCREEN_VIS_MODE = global_HSM_DEVICELED_DUALSCREEN_VIS_MODE;
    HSM_DEVICELED_FOLLOW_LAYER = global_HSM_DEVICELED_FOLLOW_LAYER;
    HSM_DEVICELED_FOLLOW_MODE = global_HSM_DEVICELED_FOLLOW_MODE;
    HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM = global_HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICELED_FILL_MODE = global_HSM_DEVICELED_FILL_MODE;
    HSM_DEVICELED_SPLIT_PRESERVE_CENTER = global_HSM_DEVICELED_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_DEVICELED_SPLIT_REPEAT_WIDTH = global_HSM_DEVICELED_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_DEVICELED_SCALE = global_HSM_DEVICELED_SCALE / 100.0f;
    HSM_DEVICELED_SCALE_X = global_HSM_DEVICELED_SCALE_X / 100.0f;
    HSM_DEVICELED_POS_X = global_HSM_DEVICELED_POS_X / (-100.0f);
    HSM_DEVICELED_POS_Y = global_HSM_DEVICELED_POS_Y / 100.0f;
    HSM_DECAL_OPACITY = global_HSM_DECAL_OPACITY / 100.0f;
    HSM_DECAL_COLORIZE_ON = global_HSM_DECAL_COLORIZE_ON;
    HSM_DECAL_HUE = global_HSM_DECAL_HUE / 360.0f;
    HSM_DECAL_SATURATION = global_HSM_DECAL_SATURATION / 100.0f;
    HSM_DECAL_BRIGHTNESS = global_HSM_DECAL_BRIGHTNESS / 100.0f;
    HSM_DECAL_GAMMA = global_HSM_DECAL_GAMMA;
    HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DECAL_BLEND_MODE = global_HSM_DECAL_BLEND_MODE;
    HSM_DECAL_SOURCE_MATTE_TYPE = global_HSM_DECAL_SOURCE_MATTE_TYPE;
    HSM_DECAL_MIPMAPPING_BLEND_BIAS = global_HSM_DECAL_MIPMAPPING_BLEND_BIAS;
    HSM_DECAL_MASK_MODE = global_HSM_DECAL_MASK_MODE;
    HSM_DECAL_CUTOUT_MODE = global_HSM_DECAL_CUTOUT_MODE;
    HSM_DECAL_DUALSCREEN_VIS_MODE = global_HSM_DECAL_DUALSCREEN_VIS_MODE;
    HSM_DECAL_FOLLOW_LAYER = global_HSM_DECAL_FOLLOW_LAYER;
    HSM_DECAL_FOLLOW_MODE = global_HSM_DECAL_FOLLOW_MODE;
    HSM_DECAL_FOLLOW_FULL_USES_ZOOM = global_HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
    HSM_DECAL_FILL_MODE = global_HSM_DECAL_FILL_MODE;
    HSM_DECAL_SPLIT_PRESERVE_CENTER = global_HSM_DECAL_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_DECAL_SPLIT_REPEAT_WIDTH = global_HSM_DECAL_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_DECAL_SCALE = global_HSM_DECAL_SCALE / 100.0f;
    HSM_DECAL_SCALE_X = global_HSM_DECAL_SCALE_X / 100.0f;
    HSM_DECAL_POS_X = global_HSM_DECAL_POS_X / (-100.0f);
    HSM_DECAL_POS_Y = global_HSM_DECAL_POS_Y / 100.0f;
    HSM_CAB_GLASS_OPACITY = global_HSM_CAB_GLASS_OPACITY / 100.0f;
    HSM_CAB_GLASS_COLORIZE_ON = global_HSM_CAB_GLASS_COLORIZE_ON;
    HSM_CAB_GLASS_HUE = global_HSM_CAB_GLASS_HUE / 360.0f;
    HSM_CAB_GLASS_SATURATION = global_HSM_CAB_GLASS_SATURATION / 100.0f;
    HSM_CAB_GLASS_BRIGHTNESS = global_HSM_CAB_GLASS_BRIGHTNESS / 100.0f;
    HSM_CAB_GLASS_GAMMA = global_HSM_CAB_GLASS_GAMMA;
    HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_CAB_GLASS_BLEND_MODE = global_HSM_CAB_GLASS_BLEND_MODE;
    HSM_CAB_GLASS_SOURCE_MATTE_TYPE = global_HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
    HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS = global_HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
    HSM_CAB_GLASS_MASK_MODE = global_HSM_CAB_GLASS_MASK_MODE;
    HSM_CAB_GLASS_CUTOUT_MODE = global_HSM_CAB_GLASS_CUTOUT_MODE;
    HSM_CAB_GLASS_DUALSCREEN_VIS_MODE = global_HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
    HSM_CAB_GLASS_FOLLOW_LAYER = global_HSM_CAB_GLASS_FOLLOW_LAYER;
    HSM_CAB_GLASS_FOLLOW_MODE = global_HSM_CAB_GLASS_FOLLOW_MODE;
    HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM = global_HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
    HSM_CAB_GLASS_FILL_MODE = global_HSM_CAB_GLASS_FILL_MODE;
    HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER = global_HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH = global_HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_CAB_GLASS_SCALE = global_HSM_CAB_GLASS_SCALE / 100.0f;
    HSM_CAB_GLASS_SCALE_X = global_HSM_CAB_GLASS_SCALE_X / 100.0f;
    HSM_CAB_GLASS_POS_X = global_HSM_CAB_GLASS_POS_X / (-100.0f);
    HSM_CAB_GLASS_POS_Y = global_HSM_CAB_GLASS_POS_Y / 100.0f;
    HSM_TOP_OPACITY = global_HSM_TOP_OPACITY / 100.0f;
    HSM_TOP_COLORIZE_ON = global_HSM_TOP_COLORIZE_ON;
    HSM_TOP_HUE = global_HSM_TOP_HUE / 360.0f;
    HSM_TOP_SATURATION = global_HSM_TOP_SATURATION / 100.0f;
    HSM_TOP_BRIGHTNESS = global_HSM_TOP_BRIGHTNESS / 100.0f;
    HSM_TOP_GAMMA = global_HSM_TOP_GAMMA;
    HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER = global_HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER / 100.0f;
    HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER = global_HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER / 100.0f;
    HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE = global_HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_TOP_BLEND_MODE = global_HSM_TOP_BLEND_MODE;
    HSM_TOP_SOURCE_MATTE_TYPE = global_HSM_TOP_SOURCE_MATTE_TYPE;
    HSM_TOP_MIPMAPPING_BLEND_BIAS = global_HSM_TOP_MIPMAPPING_BLEND_BIAS;
    HSM_TOP_MASK_MODE = global_HSM_TOP_MASK_MODE;
    HSM_TOP_CUTOUT_MODE = global_HSM_TOP_CUTOUT_MODE;
    HSM_TOP_DUALSCREEN_VIS_MODE = global_HSM_TOP_DUALSCREEN_VIS_MODE;
    HSM_TOP_FOLLOW_LAYER = global_HSM_TOP_FOLLOW_LAYER;
    HSM_TOP_FOLLOW_MODE = global_HSM_TOP_FOLLOW_MODE;
    HSM_TOP_FOLLOW_FULL_USES_ZOOM = global_HSM_TOP_FOLLOW_FULL_USES_ZOOM;
    HSM_TOP_FILL_MODE = global_HSM_TOP_FILL_MODE;
    HSM_TOP_SPLIT_PRESERVE_CENTER = global_HSM_TOP_SPLIT_PRESERVE_CENTER / 1000.0f;
    HSM_TOP_SPLIT_REPEAT_WIDTH = global_HSM_TOP_SPLIT_REPEAT_WIDTH / 1000.0f;
    HSM_TOP_SCALE = global_HSM_TOP_SCALE / 100.0f;
    HSM_TOP_SCALE_X = global_HSM_TOP_SCALE_X / 100.0f;
    HSM_TOP_POS_X = global_HSM_TOP_POS_X / (-100.0f);
    HSM_TOP_POS_Y = global_HSM_TOP_POS_Y / 100.0f;
    HSM_TOP_MIRROR_WRAP = global_HSM_TOP_MIRROR_WRAP;
    HSM_RENDER_SIMPLE_MODE = global_HSM_RENDER_SIMPLE_MODE;
    HSM_RENDER_SIMPLE_MASK_TYPE = global_HSM_RENDER_SIMPLE_MASK_TYPE;
    ch_spc = 0.0f.xx;
    ch_exc = float2(276705.0f, 32776.0f);
    ch_quo = float2(1797408.0f, 0.0f);
    ch_hsh = float2(10738.0f, 1134484.0f);
    ch_dol = float2(538883.0f, 19976.0f);
    ch_pct = float2(1664033.0f, 68006.0f);
    ch_amp = float2(545090.0f, 174362.0f);
    ch_apo = float2(798848.0f, 0.0f);
    ch_lbr = float2(270466.0f, 66568.0f);
    ch_rbr = float2(528449.0f, 33296.0f);
    ch_ast = float2(10471.0f, 1688832.0f);
    ch_crs = float2(4167.0f, 1606144.0f);
    ch_per = float2(0.0f, 1560.0f);
    ch_dsh = float2(7.0f, 1572864.0f);
    ch_com = float2(0.0f, 1544.0f);
    ch_lsl = float2(1057.0f, 67584.0f);
    ch_0 = float2(935221.0f, 731292.0f);
    ch_1 = float2(274497.0f, 33308.0f);
    ch_2 = float2(934929.0f, 1116222.0f);
    ch_3 = float2(934931.0f, 1058972.0f);
    ch_4 = float2(137380.0f, 1302788.0f);
    ch_5 = float2(2048263.0f, 1058972.0f);
    ch_6 = float2(401671.0f, 1190044.0f);
    ch_7 = float2(2032673.0f, 66576.0f);
    ch_8 = float2(935187.0f, 1190044.0f);
    ch_9 = float2(935187.0f, 1581336.0f);
    ch_col = float2(195.0f, 1560.0f);
    ch_scl = float2(195.0f, 1544.0f);
    ch_les = float2(135300.0f, 66052.0f);
    ch_equ = float2(496.0f, 3968.0f);
    ch_grt = float2(528416.0f, 541200.0f);
    ch_que = float2(934929.0f, 1081352.0f);
    ch_ats = float2(935285.0f, 714780.0f);
    ch_A = float2(935188.0f, 780450.0f);
    ch_B = float2(1983767.0f, 1190076.0f);
    ch_C = float2(935172.0f, 133276.0f);
    ch_D = float2(1983764.0f, 665788.0f);
    ch_E = float2(2048263.0f, 1181758.0f);
    ch_F = float2(2048263.0f, 1181728.0f);
    ch_G = float2(935173.0f, 1714334.0f);
    ch_H = float2(1131799.0f, 1714338.0f);
    ch_I = float2(921665.0f, 33308.0f);
    ch_J = float2(66576.0f, 665756.0f);
    ch_K = float2(1132870.0f, 166178.0f);
    ch_L = float2(1065220.0f, 133182.0f);
    ch_M = float2(1142100.0f, 665762.0f);
    ch_N = float2(1140052.0f, 1714338.0f);
    ch_O = float2(935188.0f, 665756.0f);
    ch_P = float2(1983767.0f, 1181728.0f);
    ch_Q = float2(935188.0f, 698650.0f);
    ch_R = float2(1983767.0f, 1198242.0f);
    ch_S = float2(935171.0f, 1058972.0f);
    ch_T = float2(2035777.0f, 33288.0f);
    ch_U = float2(1131796.0f, 665756.0f);
    ch_V = float2(1131796.0f, 664840.0f);
    ch_W = float2(1131861.0f, 699028.0f);
    ch_X = float2(1131681.0f, 84130.0f);
    ch_Y = float2(1131794.0f, 1081864.0f);
    ch_Z = float2(1968194.0f, 133180.0f);
    ch_lsb = float2(925826.0f, 66588.0f);
    ch_rsl = float2(16513.0f, 16512.0f);
    ch_rsb = float2(919584.0f, 1065244.0f);
    ch_pow = float2(272656.0f, 0.0f);
    ch_usc = float2(0.0f, 62.0f);
    ch_a = float2(224.0f, 649374.0f);
    ch_b = float2(1065444.0f, 665788.0f);
    ch_c = float2(228.0f, 657564.0f);
    ch_d = float2(66804.0f, 665758.0f);
    ch_e = float2(228.0f, 772124.0f);
    ch_f = float2(401543.0f, 1115152.0f);
    ch_g = float2(244.0f, 665474.0f);
    ch_h = float2(1065444.0f, 665762.0f);
    ch_i = float2(262209.0f, 33292.0f);
    ch_j = float2(131168.0f, 1066252.0f);
    ch_k = float2(1065253.0f, 199204.0f);
    ch_l = float2(266305.0f, 33292.0f);
    ch_m = float2(421.0f, 698530.0f);
    ch_n = float2(452.0f, 1198372.0f);
    ch_o = float2(228.0f, 665756.0f);
    ch_p = float2(484.0f, 667424.0f);
    ch_q = float2(244.0f, 665474.0f);
    ch_r = float2(354.0f, 590904.0f);
    ch_s = float2(228.0f, 114844.0f);
    ch_t = float2(8674.0f, 66824.0f);
    ch_u = float2(292.0f, 1198868.0f);
    ch_v = float2(276.0f, 664840.0f);
    ch_w = float2(276.0f, 700308.0f);
    ch_x = float2(292.0f, 1149220.0f);
    ch_y = float2(292.0f, 1163824.0f);
    ch_z = float2(480.0f, 1148988.0f);
    ch_lpa = float2(401542.0f, 66572.0f);
    ch_bar = float2(266304.0f, 33288.0f);
    ch_rpa = float2(788512.0f, 1589528.0f);
    ch_tid = float2(675840.0f, 0.0f);
    ch_lar = float2(8387.0f, 1147904.0f);
    TEXT_MASK = 0.0f;
    CUR_UV = 0.0f.xx;
    print_pos = 0.0f.xx;
    float2 UNFLIPPED_VIEWPORT_COORD = vTexCoord;
    float2 VIEWPORT_COORD = vTexCoord;
    float2 param = vTexCoord;
    float4 _5840 = HSM_UpdateGlobalScreenValuesFromCache(InfoCachePass, _InfoCachePass_sampler, param);
    if (!CACHE_INFO_CHANGED)
    {
        FragColor = TextPassFeedback.Sample(_TextPassFeedback_sampler, UNFLIPPED_VIEWPORT_COORD);
        return;
    }
    VIEWPORT_COORD.y = ((HSM_FLIP_VIEWPORT_VERTICAL * HSM_FLIP_CORE_VERTICAL) * (VIEWPORT_COORD.y - 0.5f)) + 0.5f;
    VIEWPORT_COORD.x = ((HSM_FLIP_VIEWPORT_HORIZONTAL * HSM_FLIP_CORE_HORIZONTAL) * (VIEWPORT_COORD.x - 0.5f)) + 0.5f;
    float2 param_1 = VIEWPORT_COORD - float2(MAX_NEGATIVE_CROP, -MAX_NEGATIVE_CROP);
    float _5877 = GetText(param_1);
    FragColor = _5877.xxxx;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    vTexCoord = stage_input.vTexCoord;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.FragColor = FragColor;
    return stage_output;
}
