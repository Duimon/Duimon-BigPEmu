#version 430

layout(binding = 0, std140) uniform UBO
{
    mat4 MVP;
    vec4 SourceSize;
    vec4 OriginalSize;
    vec4 CorePassSize;
    vec4 CorePassFeedbackSize;
    vec4 OutputSize;
    vec4 FinalViewportSize;
    vec4 NegativeCropAddedPassSize;
    vec4 DerezedPassSize;
    int FrameDirection;
    uint FrameCount;
    float HSM_RESOLUTION_DEBUG_ON;
    float HSM_SINDEN_BORDER_ON;
    float HSM_SINDEN_BORDER_OPACITY;
    float HSM_SINDEN_BORDER_BRIGHTNESS;
    float HSM_SINDEN_AMBIENT_LIGHTING;
    float HSM_SINDEN_BORDER_THICKNESS;
    float HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
    float HSM_CACHE_GRAPHICS_ON;
    float HSM_CACHE_UPDATE_INDICATOR_MODE;
    float HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
    float HSM_STATIC_LAYERS_GAMMA;
    float HSM_AMBIENT_LIGHTING_OPACITY;
    float HSM_AMBIENT1_OPACITY;
    float HSM_AMBIENT2_OPACITY;
    float HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    float HSM_AMBIENT1_HUE;
    float HSM_AMBIENT1_SATURATION;
    float HSM_AMBIENT1_VALUE;
    float HSM_AMBIENT1_CONTRAST;
    float HSM_AMBIENT1_SCALE_KEEP_ASPECT;
    float HSM_AMBIENT1_SCALE_INHERIT_MODE;
    float HSM_AMBIENT1_SCALE;
    float HSM_AMBIENT1_SCALE_X;
    float HSM_AMBIENT1_ROTATE;
    float HSM_AMBIENT1_MIRROR_HORZ;
    float HSM_AMBIENT1_POS_INHERIT_MODE;
    float HSM_AMBIENT1_POSITION_X;
    float HSM_AMBIENT1_POSITION_Y;
    float HSM_AMBIENT1_DITHERING_SAMPLES;
    float HSM_AMBIENT2_HUE;
    float HSM_AMBIENT2_SATURATION;
    float HSM_AMBIENT2_VALUE;
    float HSM_AMBIENT2_CONTRAST;
    float HSM_AMBIENT2_SCALE_KEEP_ASPECT;
    float HSM_AMBIENT2_SCALE_INHERIT_MODE;
    float HSM_AMBIENT2_SCALE;
    float HSM_AMBIENT2_SCALE_X;
    float HSM_AMBIENT2_ROTATE;
    float HSM_AMBIENT2_MIRROR_HORZ;
    float HSM_AMBIENT2_POS_INHERIT_MODE;
    float HSM_AMBIENT2_POSITION_X;
    float HSM_AMBIENT2_POSITION_Y;
    float HSM_VIEWPORT_ZOOM;
    float HSM_VIEWPORT_POSITION_X;
    float HSM_VIEWPORT_POSITION_Y;
    float HSM_VIEWPORT_ZOOM_MASK;
    float HSM_FLIP_VIEWPORT_VERTICAL;
    float HSM_FLIP_VIEWPORT_HORIZONTAL;
    float HSM_FLIP_CORE_VERTICAL;
    float HSM_FLIP_CORE_HORIZONTAL;
    float HSM_ROTATE_CORE_IMAGE;
    float HSM_ASPECT_RATIO_ORIENTATION;
    float HSM_ASPECT_RATIO_MODE;
    float HSM_ASPECT_RATIO_EXPLICIT;
    float HSM_INT_SCALE_MODE;
    float HSM_INT_SCALE_MULTIPLE_OFFSET;
    float HSM_INT_SCALE_MULTIPLE_OFFSET_LONG;
    float HSM_INT_SCALE_MAX_HEIGHT;
    float HSM_VERTICAL_PRESET;
    float HSM_NON_INTEGER_SCALE;
    float HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
    float HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
    float HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
    float HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
    float HSM_USE_IMAGE_FOR_PLACEMENT;
    float HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
    float HSM_PLACEMENT_IMAGE_MODE;
    float HSM_NON_INTEGER_SCALE_OFFSET;
    float HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
    float HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE;
    float HSM_SCREEN_POSITION_X;
    float HSM_SCREEN_POSITION_Y;
    float HSM_CROP_MODE;
    float HSM_CROP_PERCENT_ZOOM;
    float HSM_CROP_PERCENT_TOP;
    float HSM_CROP_PERCENT_BOTTOM;
    float HSM_CROP_PERCENT_LEFT;
    float HSM_CROP_PERCENT_RIGHT;
    float HSM_CROP_BLACK_THRESHOLD;
    float HSM_SCANLINE_DIRECTION;
    float HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;
    float HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR;
    float HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;
    float HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR;
    float HSM_CORE_RES_SAMPLING_SHIFT_OPPOSITE_DIR;
    float HSM_INTERLACE_TRIGGER_RES;
    float HSM_INTERLACE_MODE;
    float HSM_INTERLACE_EFFECT_SMOOTHNESS_INTERS;
    float HSM_INTERLACE_SCANLINE_EFFECT;
    float iscans;
    float HSM_FAKE_SCANLINE_MODE;
    float HSM_FAKE_SCANLINE_OPACITY;
    float HSM_FAKE_SCANLINE_RES_MODE;
    float HSM_FAKE_SCANLINE_RES;
    float HSM_FAKE_SCANLINE_INT_SCALE;
    float HSM_FAKE_SCANLINE_ROLL;
    float HSM_FAKE_SCANLINE_CURVATURE;
    float HSM_FAKE_SCANLINE_BRIGHTNESS_CUTOFF;
    float HSM_DUALSCREEN_MODE;
    float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
    float HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
    float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET;
    float HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION;
    float HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
    float HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS;
    float HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
    float HSM_2ND_SCREEN_INDEPENDENT_SCALE;
    float HSM_2ND_SCREEN_SCALE_OFFSET;
    float HSM_2ND_SCREEN_POS_X;
    float HSM_2ND_SCREEN_POS_Y;
    float HSM_2ND_SCREEN_CROP_PERCENT_ZOOM;
    float HSM_2ND_SCREEN_CROP_PERCENT_TOP;
    float HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM;
    float HSM_2ND_SCREEN_CROP_PERCENT_LEFT;
    float HSM_2ND_SCREEN_CROP_PERCENT_RIGHT;
    float HSM_CURVATURE_MODE;
    float HSM_CURVATURE_2D_SCALE_LONG_AXIS;
    float HSM_CURVATURE_2D_SCALE_SHORT_AXIS;
    float HSM_CURVATURE_3D_RADIUS;
    float HSM_CURVATURE_3D_VIEW_DIST;
    float HSM_CURVATURE_3D_TILT_ANGLE_X;
    float HSM_CURVATURE_3D_TILT_ANGLE_Y;
    float HSM_CRT_CURVATURE_SCALE;
    float HSM_SIGNAL_NOISE_ON;
    float HSM_SIGNAL_NOISE_AMOUNT;
    float HSM_SIGNAL_NOISE_BLACK_LEVEL;
    float HSM_SIGNAL_NOISE_SIZE_MODE;
    float HSM_SIGNAL_NOISE_SIZE_MULT;
    float HSM_SIGNAL_NOISE_TYPE;
    float HSM_ANTI_FLICKER_ON;
    float HSM_ANTI_FLICKER_THRESHOLD;
    float HSM_AB_COMPARE_SHOW_MODE;
    float HSM_AB_COMPARE_AREA;
    float HSM_AB_COMPARE_FREEZE_CRT_TUBE;
    float HSM_AB_COMPARE_FREEZE_GRAPHICS;
    float HSM_AB_COMPARE_SPLIT_AREA;
    float HSM_AB_COMPARE_SPLIT_POSITION;
    float HSM_SHOW_PASS_INDEX;
    float HSM_SHOW_PASS_ALPHA;
    float HSM_SHOW_PASS_APPLY_SCREEN_COORD;
    float HSM_SCREEN_VIGNETTE_ON;
    float HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
    float HSM_SCREEN_VIGNETTE_STRENGTH;
    float HSM_SCREEN_VIGNETTE_POWER;
    float HSM_SCREEN_VIGNETTE_IN_REFLECTION;
    float HSM_MONOCHROME_MODE;
    float HSM_MONOCHROME_BRIGHTNESS;
    float HSM_MONOCHROME_GAMMA;
    float HSM_MONOCHROME_HUE_OFFSET;
    float HSM_MONOCHROME_SATURATION;
    float HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
    float HSM_SCREEN_REFLECTION_SCALE;
    float HSM_SCREEN_REFLECTION_POS_X;
    float HSM_SCREEN_REFLECTION_POS_Y;
    float HSM_TUBE_DIFFUSE_MODE;
    float HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_OPACITY;
    float HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
    float HSM_TUBE_DIFFUSE_IMAGE_HUE;
    float HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
    float HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
    float HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
    float HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
    float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
    float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
    float HSM_TUBE_DIFFUSE_IMAGE_SCALE;
    float HSM_TUBE_DIFFUSE_IMAGE_SCALE_X;
    float HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
    float HSM_TUBE_EMPTY_THICKNESS;
    float HSM_TUBE_EMPTY_THICKNESS_X_SCALE;
    float HSM_TUBE_DIFFUSE_FORCE_ASPECT;
    float HSM_TUBE_EXPLICIT_ASPECT;
    float HSM_SCREEN_CORNER_RADIUS_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_ON;
    float HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
    float HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD;
    float HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT;
    float HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL;
    float HSM_TUBE_SHADOW_IMAGE_ON;
    float HSM_TUBE_SHADOW_IMAGE_OPACITY;
    float HSM_TUBE_SHADOW_IMAGE_SCALE_X;
    float HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
    float HSM_TUBE_SHADOW_IMAGE_POS_X;
    float HSM_TUBE_SHADOW_IMAGE_POS_Y;
    float HSM_TUBE_SHADOW_CURVATURE_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
    float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
    float HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL;
    float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY;
    float HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY;
    float HSM_TUBE_STATIC_BLACK_LEVEL;
    float HSM_TUBE_STATIC_AMBIENT_LIGHTING;
    float HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
    float HSM_TUBE_STATIC_SCALE;
    float HSM_TUBE_STATIC_SCALE_X;
    float HSM_TUBE_STATIC_POS_X;
    float HSM_TUBE_STATIC_POS_Y;
    float HSM_TUBE_STATIC_SHADOW_OPACITY;
    float HSM_TUBE_STATIC_DITHER_SAMPLES;
    float HSM_TUBE_STATIC_DITHER_DISTANCE;
    float HSM_TUBE_STATIC_DITHER_AMOUNT;
    float HSM_CRT_BLEND_MODE;
    float HSM_CRT_BLEND_AMOUNT;
    float HSM_CRT_SCREEN_BLEND_MODE;
    float HSM_GLOBAL_CORNER_RADIUS;
    float HSM_TUBE_BLACK_EDGE_CORNER_RADIUS_SCALE;
    float HSM_TUBE_BLACK_EDGE_SHARPNESS;
    float HSM_TUBE_BLACK_EDGE_CURVATURE_SCALE;
    float HSM_TUBE_BLACK_EDGE_THICKNESS;
    float HSM_TUBE_BLACK_EDGE_THICKNESS_X_SCALE;
    float HSM_BZL_USE_INDEPENDENT_SCALE;
    float HSM_BZL_INDEPENDENT_SCALE;
    float HSM_BZL_USE_INDEPENDENT_CURVATURE;
    float HSM_BZL_INDEPENDENT_CURVATURE_SCALE_LONG_AXIS;
    float HSM_BZL_INDEPENDENT_CURVATURE_SCALE_SHORT_AXIS;
    float HSM_BZL_OPACITY;
    float HSM_BZL_BLEND_MODE;
    float HSM_BZL_WIDTH;
    float HSM_BZL_HEIGHT;
    float HSM_BZL_SCALE_OFFSET;
    float HSM_BZL_INNER_CURVATURE_SCALE;
    float HSM_BZL_INNER_CORNER_RADIUS_SCALE;
    float HSM_BZL_OUTER_CURVATURE_SCALE;
    float HSM_BZL_INNER_EDGE_THICKNESS;
    float HSM_BZL_INNER_EDGE_SHARPNESS;
    float HSM_BZL_OUTER_CORNER_RADIUS_SCALE;
    float HSM_BZL_INNER_EDGE_SHADOW;
    float HSM_BZL_COLOR_HUE;
    float HSM_BZL_COLOR_SATURATION;
    float HSM_BZL_COLOR_VALUE;
    float HSM_BZL_NOISE;
    float HSM_BZL_BRIGHTNESS;
    float HSM_BZL_BRIGHTNESS_MULT_TOP;
    float HSM_BZL_BRIGHTNESS_MULT_BOTTOM;
    float HSM_BZL_BRIGHTNESS_MULT_SIDES;
    float HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT;
    float HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT;
    float HSM_BZL_HIGHLIGHT;
    float HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_FRM_USE_INDEPENDENT_COLOR;
    float HSM_FRM_COLOR_HUE;
    float HSM_FRM_COLOR_SATURATION;
    float HSM_FRM_COLOR_VALUE;
    float HSM_FRM_NOISE;
    float HSM_FRM_OUTER_CURVATURE_SCALE;
    float HSM_FRM_THICKNESS;
    float HSM_FRM_THICKNESS_SCALE_X;
    float HSM_FRM_OUTER_POS_Y;
    float HSM_FRM_INNER_EDGE_THICKNESS;
    float HSM_FRM_OUTER_EDGE_THICKNESS;
    float HSM_FRM_OUTER_EDGE_SHADING;
    float HSM_FRM_OUTER_CORNER_RADIUS;
    float HSM_BZL_OUTER_POSITION_Y;
    float HSM_FRM_SHADOW_OPACITY;
    float HSM_FRM_SHADOW_WIDTH;
    float HSM_REFLECT_CORNER_FADE;
    float HSM_REFLECT_CORNER_INNER_SPREAD;
    float HSM_REFLECT_CORNER_OUTER_SPREAD;
    float HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
    float HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
    float HSM_REFLECT_CORNER_SPREAD_FALLOFF;
    float HSM_REFLECT_CORNER_FADE_DISTANCE;
    float HSM_REFLECT_GLOBAL_AMOUNT;
    float HSM_REFLECT_GLOBAL_GAMMA_ADJUST;
    float HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT;
    float HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW;
    float HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT;
    float HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS;
    float HSM_REFLECT_SHOW_TUBE_FX_AMOUNT;
    float HSM_REFLECT_DIRECT_AMOUNT;
    float HSM_REFLECT_DIFFUSED_AMOUNT;
    float HSM_REFLECT_FULLSCREEN_GLOW;
    float HSM_REFLECT_FULLSCREEN_GLOW_GAMMA;
    float HSM_REFLECT_FADE_AMOUNT;
    float HSM_REFLECT_RADIAL_FADE_WIDTH;
    float HSM_REFLECT_RADIAL_FADE_HEIGHT;
    float HSM_REFLECT_LATERAL_OUTER_FADE_POSITION;
    float HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE;
    float HSM_REFLECT_NOISE_AMOUNT;
    float HSM_REFLECT_NOISE_SAMPLES;
    float HSM_REFLECT_NOISE_SAMPLE_DISTANCE;
    float HSM_REFLECT_BLUR_NUM_SAMPLES;
    float HSM_REFLECT_BLUR_FALLOFF_DISTANCE;
    float HSM_REFLECT_BLUR_MIN;
    float HSM_REFLECT_BLUR_MAX;
    float HSM_REFLECT_MASK_IMAGE_AMOUNT;
    float HSM_REFLECT_MASK_FOLLOW_LAYER;
    float HSM_REFLECT_MASK_FOLLOW_MODE;
    float HSM_REFLECT_MASK_BRIGHTNESS;
    float HSM_REFLECT_MASK_BLACK_LEVEL;
    float HSM_REFLECT_MASK_MIPMAPPING_BLEND_BIAS;
    float HSM_GLASS_BORDER_ON;
    float HSM_REFLECT_VIGNETTE_AMOUNT;
    float HSM_REFLECT_VIGNETTE_SIZE;
    float HSM_POTATO_SHOW_BG_OVER_SCREEN;
    float HSM_POTATO_COLORIZE_CRT_WITH_BG;
    float HSM_POTATO_COLORIZE_BRIGHTNESS;
    float HSM_STANDARD_DECAL_SCALE_WITH_FRAME;
    float HSM_STANDARD_TOP_SCALE_WITH_FRAME;
    float HSM_BG_LAYER_ORDER;
    float HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
    float HSM_CRT_LAYER_ORDER;
    float HSM_DEVICE_LAYER_ORDER;
    float HSM_DEVICELED_LAYER_ORDER;
    float HSM_CAB_GLASS_LAYER_ORDER;
    float HSM_DECAL_LAYER_ORDER;
    float HSM_LED_LAYER_ORDER;
    float HSM_TOP_LAYER_ORDER;
    float HSM_CUTOUT_ASPECT_MODE;
    float HSM_CUTOUT_EXPLICIT_ASPECT;
    float HSM_CUTOUT_FOLLOW_LAYER;
    float HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
    float HSM_CUTOUT_SCALE;
    float HSM_CUTOUT_SCALE_X;
    float HSM_CUTOUT_CORNER_RADIUS;
    float HSM_CUTOUT_POS_X;
    float HSM_CUTOUT_POS_Y;
    float HSM_BG_OPACITY;
    float HSM_BG_HUE;
    float HSM_BG_COLORIZE_ON;
    float HSM_BG_SATURATION;
    float HSM_BG_BRIGHTNESS;
    float HSM_BG_GAMMA;
    float HSM_BG_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_BG_BLEND_MODE;
    float HSM_BG_SOURCE_MATTE_TYPE;
    float HSM_BG_MASK_MODE;
    float HSM_BG_CUTOUT_MODE;
    float HSM_BG_DUALSCREEN_VIS_MODE;
    float HSM_BG_FOLLOW_LAYER;
    float HSM_BG_FOLLOW_MODE;
    float HSM_BG_FOLLOW_FULL_USES_ZOOM;
    float HSM_BG_FILL_MODE;
    float HSM_BG_SPLIT_PRESERVE_CENTER;
    float HSM_BG_SPLIT_REPEAT_WIDTH;
    float HSM_BG_SCALE;
    float HSM_BG_SCALE_X;
    float HSM_BG_POS_X;
    float HSM_BG_POS_Y;
    float HSM_BG_WRAP_MODE;
    float HSM_BG_MIPMAPPING_BLEND_BIAS;
    float HSM_VIEWPORT_VIGNETTE_OPACITY;
    float HSM_VIEWPORT_VIGNETTE_MASK_MODE;
    float HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
    float HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
    float HSM_VIEWPORT_VIGNETTE_SCALE;
    float HSM_VIEWPORT_VIGNETTE_SCALE_X;
    float HSM_VIEWPORT_VIGNETTE_POS_X;
    float HSM_VIEWPORT_VIGNETTE_POS_Y;
    float HSM_LED_OPACITY;
    float HSM_LED_HUE;
    float HSM_LED_COLORIZE_ON;
    float HSM_LED_SATURATION;
    float HSM_LED_BRIGHTNESS;
    float HSM_LED_GAMMA;
    float HSM_LED_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_LED_BLEND_MODE;
    float HSM_LED_SOURCE_MATTE_TYPE;
    float HSM_LED_MASK_MODE;
    float HSM_LED_CUTOUT_MODE;
    float HSM_LED_DUALSCREEN_VIS_MODE;
    float HSM_LED_FOLLOW_LAYER;
    float HSM_LED_FOLLOW_MODE;
    float HSM_LED_FOLLOW_FULL_USES_ZOOM;
    float HSM_LED_FILL_MODE;
    float HSM_LED_SPLIT_PRESERVE_CENTER;
    float HSM_LED_SPLIT_REPEAT_WIDTH;
    float HSM_LED_SCALE;
    float HSM_LED_SCALE_X;
    float HSM_LED_POS_X;
    float HSM_LED_POS_Y;
    float HSM_LED_MIPMAPPING_BLEND_BIAS;
    float HSM_DEVICE_OPACITY;
    float HSM_DEVICE_HUE;
    float HSM_DEVICE_COLORIZE_ON;
    float HSM_DEVICE_SATURATION;
    float HSM_DEVICE_BRIGHTNESS;
    float HSM_DEVICE_GAMMA;
    float HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DEVICE_BLEND_MODE;
    float HSM_DEVICE_SOURCE_MATTE_TYPE;
    float HSM_DEVICE_MASK_MODE;
    float HSM_DEVICE_CUTOUT_MODE;
    float HSM_DEVICE_DUALSCREEN_VIS_MODE;
    float HSM_DEVICE_FOLLOW_LAYER;
    float HSM_DEVICE_FOLLOW_MODE;
    float HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
    float HSM_DEVICE_FILL_MODE;
    float HSM_DEVICE_SPLIT_PRESERVE_CENTER;
    float HSM_DEVICE_SPLIT_REPEAT_WIDTH;
    float HSM_DEVICE_SCALE;
    float HSM_DEVICE_SCALE_X;
    float HSM_DEVICE_POS_X;
    float HSM_DEVICE_POS_Y;
    float HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
    float HSM_DEVICELED_OPACITY;
    float HSM_DEVICELED_HUE;
    float HSM_DEVICELED_COLORIZE_ON;
    float HSM_DEVICELED_SATURATION;
    float HSM_DEVICELED_BRIGHTNESS;
    float HSM_DEVICELED_GAMMA;
    float HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DEVICELED_BLEND_MODE;
    float HSM_DEVICELED_SOURCE_MATTE_TYPE;
    float HSM_DEVICELED_MASK_MODE;
    float HSM_DEVICELED_CUTOUT_MODE;
    float HSM_DEVICELED_DUALSCREEN_VIS_MODE;
    float HSM_DEVICELED_FOLLOW_LAYER;
    float HSM_DEVICELED_FOLLOW_MODE;
    float HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
    float HSM_DEVICELED_FILL_MODE;
    float HSM_DEVICELED_SPLIT_PRESERVE_CENTER;
    float HSM_DEVICELED_SPLIT_REPEAT_WIDTH;
    float HSM_DEVICELED_SCALE;
    float HSM_DEVICELED_SCALE_X;
    float HSM_DEVICELED_POS_X;
    float HSM_DEVICELED_POS_Y;
    float HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
    float HSM_FRM_OPACITY;
    float HSM_FRM_BLEND_MODE;
    float HSM_FRM_TEXTURE_OPACITY;
    float HSM_FRM_TEXTURE_BLEND_MODE;
    float HSM_DECAL_OPACITY;
    float HSM_DECAL_HUE;
    float HSM_DECAL_COLORIZE_ON;
    float HSM_DECAL_SATURATION;
    float HSM_DECAL_BRIGHTNESS;
    float HSM_DECAL_GAMMA;
    float HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DECAL_BLEND_MODE;
    float HSM_DECAL_SOURCE_MATTE_TYPE;
    float HSM_DECAL_MASK_MODE;
    float HSM_DECAL_CUTOUT_MODE;
    float HSM_DECAL_DUALSCREEN_VIS_MODE;
    float HSM_DECAL_FOLLOW_LAYER;
    float HSM_DECAL_FOLLOW_MODE;
    float HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
    float HSM_DECAL_FILL_MODE;
    float HSM_DECAL_SPLIT_PRESERVE_CENTER;
    float HSM_DECAL_SPLIT_REPEAT_WIDTH;
    float HSM_DECAL_SCALE;
    float HSM_DECAL_SCALE_X;
    float HSM_DECAL_POS_X;
    float HSM_DECAL_POS_Y;
    float HSM_DECAL_MIPMAPPING_BLEND_BIAS;
    float HSM_CAB_GLASS_OPACITY;
    float HSM_CAB_GLASS_HUE;
    float HSM_CAB_GLASS_COLORIZE_ON;
    float HSM_CAB_GLASS_SATURATION;
    float HSM_CAB_GLASS_BRIGHTNESS;
    float HSM_CAB_GLASS_GAMMA;
    float HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_CAB_GLASS_BLEND_MODE;
    float HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
    float HSM_CAB_GLASS_MASK_MODE;
    float HSM_CAB_GLASS_CUTOUT_MODE;
    float HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
    float HSM_CAB_GLASS_FOLLOW_LAYER;
    float HSM_CAB_GLASS_FOLLOW_MODE;
    float HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
    float HSM_CAB_GLASS_FILL_MODE;
    float HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER;
    float HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH;
    float HSM_CAB_GLASS_SCALE;
    float HSM_CAB_GLASS_SCALE_X;
    float HSM_CAB_GLASS_POS_X;
    float HSM_CAB_GLASS_POS_Y;
    float HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
    float HSM_TOP_OPACITY;
    float HSM_TOP_HUE;
    float HSM_TOP_COLORIZE_ON;
    float HSM_TOP_SATURATION;
    float HSM_TOP_BRIGHTNESS;
    float HSM_TOP_GAMMA;
    float HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_TOP_BLEND_MODE;
    float HSM_TOP_SOURCE_MATTE_TYPE;
    float HSM_TOP_MASK_MODE;
    float HSM_TOP_CUTOUT_MODE;
    float HSM_TOP_DUALSCREEN_VIS_MODE;
    float HSM_TOP_FOLLOW_LAYER;
    float HSM_TOP_FOLLOW_MODE;
    float HSM_TOP_FOLLOW_FULL_USES_ZOOM;
    float HSM_TOP_FILL_MODE;
    float HSM_TOP_SPLIT_PRESERVE_CENTER;
    float HSM_TOP_SPLIT_REPEAT_WIDTH;
    float HSM_TOP_SCALE;
    float HSM_TOP_SCALE_X;
    float HSM_TOP_POS_X;
    float HSM_TOP_POS_Y;
    float HSM_TOP_MIRROR_WRAP;
    float HSM_TOP_MIPMAPPING_BLEND_BIAS;
    float HSM_RENDER_SIMPLE_MODE;
    float HSM_RENDER_SIMPLE_MASK_TYPE;
    float HSM_LAYERING_DEBUG_MASK_MODE;
    float HSM_INTRO_LOGO_BLEND_MODE;
    float HSM_INTRO_LOGO_FLIP_VERTICAL;
    float HSM_INTRO_NOISE_BLEND_MODE;
    float HSM_INTRO_NOISE_HOLD;
    float HSM_INTRO_NOISE_FADE_OUT;
    float HSM_INTRO_SOLID_BLACK_HOLD;
    float HSM_INTRO_SOLID_BLACK_FADE_OUT;
    float HSM_INTRO_SOLID_COLOR_BLEND_MODE;
    float HSM_INTRO_LOGO_OVER_SOLID_COLOR;
    float HSM_INTRO_LOGO_PLACEMENT;
    float HSM_INTRO_LOGO_HEIGHT;
    float HSM_INTRO_LOGO_POS_X;
    float HSM_INTRO_LOGO_POS_Y;
    float HSM_INTRO_WHEN_TO_SHOW;
    float HSM_INTRO_SPEED;
    float HSM_INTRO_LOGO_WAIT;
    float HSM_INTRO_LOGO_FADE_IN;
    float HSM_INTRO_LOGO_HOLD;
    float HSM_INTRO_LOGO_FADE_OUT;
    float HSM_INTRO_SOLID_COLOR_HUE;
    float HSM_INTRO_SOLID_COLOR_SAT;
    float HSM_INTRO_SOLID_COLOR_VALUE;
    float HSM_INTRO_SOLID_COLOR_HOLD;
    float HSM_INTRO_SOLID_COLOR_FADE_OUT;
    float GAMMA_INPUT;
    float gamma_out;
    float post_br;
    float post_br_affect_black_level;
    float m_glow;
    float m_glow_low;
    float m_glow_high;
    float m_glow_dist;
    float m_glow_mask;
    float smask_mit;
    float glow;
    float bloom;
    float mask_bloom;
    float bloom_dist;
    float halation;
    float TATE;
    float IOS;
    float GDV_RASTER_BLOOM_ON;
    float OS;
    float BLOOM;
    float GDV_OVERSCAN;
    float GDV_OVERSCAN_X;
    float GDV_OVERSCAN_Y;
    float overscanX;
    float overscanY;
    float intres;
    float prescalex;
    float c_shape;
    float sborder;
    float csize;
    float bsize1;
    float warpX;
    float warpY;
    float gamma_c;
    float brightboost;
    float brightboost1;
    float blendMode;
    float gsl;
    float scanline1;
    float scanline2;
    float beam_min;
    float beam_max;
    float beam_size;
    float vertmask;
    float scans;
    float scan_falloff;
    float spike;
    float ring;
    float no_scanlines;
    float scangamma;
    float rolling_scan;
    float h_sharp;
    float s_sharp;
    float smart_ei;
    float ei_limit;
    float sth;
    float barspeed;
    float barintensity;
    float bardir;
    float shadowMask;
    float maskstr;
    float mcut;
    float maskboost;
    float masksize;
    float masksizeautothreshold;
    float maskDark;
    float maskLight;
    float mask_gamma;
    float slotmask;
    float slotmask1;
    float slotwidth;
    float double_slot;
    float slotms;
    float mclip;
    float smoothmask;
    float mshift;
    float mask_layout;
    float GDV_DECONVERGENCE_ON;
    float decons;
    float deconrr;
    float deconrg;
    float deconrb;
    float deconrry;
    float deconrgy;
    float deconrby;
    float deconsmooth;
    float dctypex;
    float dctypey;
    float dcscalemode;
    float GDV_NOISE_ON;
    float addnoised;
    float noisetype;
    float noiseresd;
    float noiseresd4kmult;
    float g_grade_on;
    float wp_temperature;
    float g_satr;
    float g_satg;
    float g_satb;
    float AS;
    float asat;
    float hcrt_h_size;
    float hcrt_v_size;
    float hcrt_h_cent;
    float hcrt_v_cent;
    float hcrt_pin_phase;
    float hcrt_pin_amp;
} global;

layout(binding = 5) uniform sampler2D TubeShadowImage;
layout(binding = 13) uniform sampler2D PostCRTPassFeedback;
layout(binding = 2) uniform sampler2D InfoCachePass;
layout(binding = 1) uniform sampler2D Source;
layout(binding = 12) uniform sampler2D IntroPass;
layout(binding = 4) uniform sampler2D TubeDiffuseImage;
layout(binding = 6) uniform sampler2D TubeColoredGelImage;
layout(binding = 7) uniform sampler2D TubeStaticReflectionImage;
layout(binding = 8) uniform sampler2D BackgroundImage;
layout(binding = 9) uniform sampler2D BackgroundVertImage;
layout(binding = 10) uniform sampler2D NightLightingImage;
layout(binding = 11) uniform sampler2D NightLighting2Image;

layout(location = 0) in vec2 vTexCoord;
layout(location = 0) out vec4 FragColor;
layout(location = 7) in vec2 UNFLIPPED_VIEWPORT_COORD;
float FOLLOW_MODE_SCALE_AND_POS;
float FOLLOW_MODE_EXACT;
float NEGATIVE_CROP_EXPAND_MULTIPLIER;
float MAX_NEGATIVE_CROP;
float DEFAULT_SCREEN_ASPECT;
float DEFAULT_BEZEL_ASPECT;
vec2 DEFAULT_SCREEN_SCALE;
vec2 DEFAULT_BEZEL_SCALE;
int INFOCACHE_MAX_INDEX;
bool CACHE_INFO_CHANGED;
float CURRENT_FRAME_FROM_CACHE_INFO;
float TUBE_DIFFUSE_MASK;
float TUBE_MASK;
float BEZEL_MASK;
float INSIDE_BEZEL_MASK;
float OUTSIDE_TUBE_MASK_FOR_IMAGE;
float FRAME_MASK;
float FRAME_MASK_FOR_IMAGE;
float OUTSIDE_BEZEL_MASK;
float OUTSIDE_FRAME_MASK_FOR_IMAGE;
float OUTSIDE_FRAME_MASK;
float CUTOUT_MASK;
float SCREEN_INDEX;
float SCREEN_ASPECT;
vec2 SCREEN_SCALE;
vec2 SCREEN_SCALE_WITH_ZOOM;
vec2 SCREEN_POS_OFFSET;
vec2 SCREEN_SCALE_2ND_SCREEN;
vec2 SCREEN_POS_OFFSET_1ST_SCREEN;
vec2 SCREEN_POS_OFFSET_2ND_SCREEN;
vec2 VIEWPORT_SCALE;
vec2 VIEWPORT_POS;
vec2 TUBE_SCALE;
vec2 TUBE_DIFFUSE_SCALE;
float TUBE_DIFFUSE_ASPECT;
vec2 TUBE_DIFFUSE_SCALE_1ST_SCREEN;
vec2 TUBE_DIFFUSE_SCALE_2ND_SCREEN;
vec2 FRAME_SCALE;
vec2 BEZEL_OUTSIDE_SCALE;
vec2 BACKGROUND_SCALE;
vec2 LED_SCALE;
vec2 DEVICE_SCALE;
vec2 DEVICELED_SCALE;
vec2 DECAL_SCALE;
vec2 CAB_GLASS_SCALE;
vec2 TOP_IMAGE_SCALE;
float AVERAGE_LUMA;
float USE_VERTICAL_SCANLINES;
float SAMPLING_SCANLINE_DIR_MULT;
float SAMPLING_OPPOSITE_DIR_MULT;
vec2 CORE_SIZE;
vec2 ROTATED_CORE_ORIGINAL_SIZE;
vec2 ROTATED_CORE_PREPPED_SIZE;
vec2 ROTATED_DEREZED_SIZE;
vec2 CROPPED_ROTATED_SIZE_WITH_RES_MULT;
vec2 CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK;
vec2 CROPPED_ROTATED_SIZE;
vec2 SAMPLE_AREA_START_PIXEL_COORD;
vec2 SCREEN_SIZE;
vec2 VIEWPORT_UNSCALED_COORD;
vec2 SCREEN_COORD;
vec2 TUBE_COORD;
vec2 TUBE_DIFFUSE_COORD;
vec2 TUBE_DIFFUSE_COORD_MIXED_POS;
vec2 BEZEL_OUTSIDE_COORD;
vec2 BACKGROUND_COORD;
vec2 DEVICE_COORD;
vec2 DEVICELED_COORD;
vec2 LED_COORD;
vec2 DECAL_COORD;
vec2 CAB_GLASS_COORD;
vec2 TOP_IMAGE_COORD;
vec2 SCREEN_CURVED_COORD;
vec2 TUBE_CURVED_COORD;
vec2 TUBE_DIFFUSE_CURVED_COORD;
vec2 BEZEL_OUTSIDE_CURVED_COORD;
vec2 FRAME_OUTSIDE_CURVED_COORD;
vec2 BACKGROUND_CURVED_COORD;
vec2 LED_CURVED_COORD;
vec2 DEVICE_CURVED_COORD;
vec2 DEVICELED_CURVED_COORD;
vec2 DECAL_CURVED_COORD;
vec2 CAB_GLASS_CURVED_COORD;
vec2 TOP_IMAGE_CURVED_COORD;
float HSM_RESOLUTION_DEBUG_ON;
float HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
float HSM_STATIC_LAYERS_GAMMA;
float HSM_AMBIENT_LIGHTING_OPACITY;
float HSM_AMBIENT1_OPACITY;
float HSM_AMBIENT2_OPACITY;
float HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
float HSM_SINDEN_BORDER_ON;
float HSM_SINDEN_BORDER_BRIGHTNESS;
float HSM_SINDEN_BORDER_THICKNESS;
float HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
float HSM_VIEWPORT_ZOOM;
float HSM_VIEWPORT_ZOOM_MASK;
float HSM_VIEWPORT_POSITION_X;
float HSM_VIEWPORT_POSITION_Y;
float HSM_FLIP_VIEWPORT_VERTICAL;
float HSM_FLIP_VIEWPORT_HORIZONTAL;
float HSM_FLIP_CORE_VERTICAL;
float HSM_FLIP_CORE_HORIZONTAL;
float HSM_ROTATE_CORE_IMAGE;
float HSM_ASPECT_RATIO_ORIENTATION;
float HSM_ASPECT_RATIO_MODE;
float HSM_ASPECT_RATIO_EXPLICIT;
float HSM_VERTICAL_PRESET;
float HSM_INT_SCALE_MAX_HEIGHT;
float HSM_NON_INTEGER_SCALE;
float HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
float HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
float HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
float HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
float HSM_USE_IMAGE_FOR_PLACEMENT;
float HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
float HSM_PLACEMENT_IMAGE_MODE;
float HSM_NON_INTEGER_SCALE_OFFSET;
float HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
float HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE;
float HSM_SCREEN_POSITION_X;
float HSM_SCREEN_POSITION_Y;
float HSM_CROP_MODE;
float HSM_CROP_PERCENT_ZOOM;
float HSM_CROP_PERCENT_TOP;
float HSM_CROP_PERCENT_BOTTOM;
float HSM_CROP_PERCENT_LEFT;
float HSM_CROP_PERCENT_RIGHT;
float HSM_CROP_BLACK_THRESHOLD;
float HSM_SCANLINE_DIRECTION;
float HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;
float HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR;
float HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;
float HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR;
float HSM_USE_GEOM;
float HSM_CURVATURE_MODE;
float HSM_CURVATURE_3D_RADIUS;
float HSM_CURVATURE_3D_VIEW_DIST;
float HSM_CURVATURE_3D_TILT_ANGLE_X;
float HSM_CURVATURE_3D_TILT_ANGLE_Y;
float HSM_CRT_CURVATURE_SCALE;
float HSM_CACHE_GRAPHICS_ON;
float HSM_CACHE_UPDATE_INDICATOR_MODE;
float HSM_AB_COMPARE_SHOW_MODE;
float HSM_AB_COMPARE_AREA;
float HSM_AB_COMPARE_SPLIT_POSITION;
float HSM_AB_COMPARE_FREEZE_CRT_TUBE;
float HSM_AB_COMPARE_FREEZE_GRAPHICS;
float HSM_SHOW_PASS_INDEX;
float HSM_SHOW_PASS_APPLY_SCREEN_COORD;
float HSM_SHOW_PASS_ALPHA;
float HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
float HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
float HSM_TUBE_DIFFUSE_MODE;
float HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
float HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
float HSM_TUBE_DIFFUSE_IMAGE_HUE;
float HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
float HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
float HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
float HSM_TUBE_DIFFUSE_IMAGE_SCALE;
float HSM_TUBE_DIFFUSE_IMAGE_SCALE_X;
float HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
float HSM_TUBE_SHADOW_IMAGE_ON;
float HSM_TUBE_SHADOW_IMAGE_OPACITY;
float HSM_TUBE_SHADOW_IMAGE_POS_X;
float HSM_TUBE_SHADOW_IMAGE_POS_Y;
float HSM_TUBE_SHADOW_IMAGE_SCALE_X;
float HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
float HSM_TUBE_SHADOW_CURVATURE_SCALE;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY;
float HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY;
float HSM_TUBE_STATIC_BLACK_LEVEL;
float HSM_TUBE_STATIC_AMBIENT_LIGHTING;
float HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
float HSM_TUBE_STATIC_SCALE;
float HSM_TUBE_STATIC_SCALE_X;
float HSM_TUBE_STATIC_POS_X;
float HSM_TUBE_STATIC_POS_Y;
float HSM_TUBE_STATIC_SHADOW_OPACITY;
float HSM_TUBE_STATIC_DITHER_SAMPLES;
float HSM_TUBE_STATIC_DITHER_DISTANCE;
float HSM_TUBE_STATIC_DITHER_AMOUNT;
float HSM_TUBE_OPACITY;
float HSM_TUBE_COLORED_GEL_IMAGE_ON;
float HSM_TUBE_COLORED_GEL_IMAGE_SCALE;
float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL;
float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL;
float HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
float HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
float HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL;
float HSM_DUALSCREEN_MODE;
float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
float HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET;
float HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION;
float HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
float HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS;
float HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
float HSM_2ND_SCREEN_INDEPENDENT_SCALE;
float HSM_2ND_SCREEN_SCALE_OFFSET;
float HSM_2ND_SCREEN_POS_X;
float HSM_2ND_SCREEN_POS_Y;
float HSM_2ND_SCREEN_CROP_PERCENT_ZOOM;
float HSM_2ND_SCREEN_CROP_PERCENT_TOP;
float HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM;
float HSM_2ND_SCREEN_CROP_PERCENT_LEFT;
float HSM_2ND_SCREEN_CROP_PERCENT_RIGHT;
float HSM_SCREEN_REFLECTION_SCALE;
float HSM_SCREEN_REFLECTION_POS_X;
float HSM_SCREEN_REFLECTION_POS_Y;
float HSM_AMBIENT1_HUE;
float HSM_AMBIENT1_SATURATION;
float HSM_AMBIENT1_VALUE;
float HSM_AMBIENT1_CONTRAST;
float HSM_AMBIENT1_SCALE_KEEP_ASPECT;
float HSM_AMBIENT1_SCALE_INHERIT_MODE;
float HSM_AMBIENT1_SCALE;
float HSM_AMBIENT1_SCALE_X;
float HSM_AMBIENT1_ROTATE;
float HSM_AMBIENT1_MIRROR_HORZ;
float HSM_AMBIENT1_POS_INHERIT_MODE;
float HSM_AMBIENT1_POSITION_X;
float HSM_AMBIENT1_POSITION_Y;
float HSM_AMBIENT1_DITHERING_SAMPLES;
float HSM_AMBIENT2_HUE;
float HSM_AMBIENT2_SATURATION;
float HSM_AMBIENT2_VALUE;
float HSM_AMBIENT2_CONTRAST;
float HSM_AMBIENT2_SCALE_KEEP_ASPECT;
float HSM_AMBIENT2_SCALE_INHERIT_MODE;
float HSM_AMBIENT2_SCALE;
float HSM_AMBIENT2_SCALE_X;
float HSM_AMBIENT2_ROTATE;
float HSM_AMBIENT2_MIRROR_HORZ;
float HSM_AMBIENT2_POS_INHERIT_MODE;
float HSM_AMBIENT2_POSITION_X;
float HSM_AMBIENT2_POSITION_Y;
float HSM_BZL_OPACITY;
float HSM_BZL_BLEND_MODE;
float HSM_BZL_WIDTH;
float HSM_BZL_HEIGHT;
float HSM_BZL_INNER_CORNER_RADIUS_SCALE;
float HSM_BZL_INNER_EDGE_THICKNESS;
float HSM_BZL_INNER_EDGE_SHARPNESS;
float HSM_BZL_OUTER_POSITION_Y;
float HSM_BZL_OUTER_CURVATURE_SCALE;
float HSM_BZL_OUTER_CORNER_RADIUS_SCALE;
float HSM_BZL_NOISE;
float HSM_BZL_INNER_EDGE_SHADOW;
float HSM_BZL_BRIGHTNESS;
float HSM_BZL_BRIGHTNESS_MULT_TOP;
float HSM_BZL_BRIGHTNESS_MULT_BOTTOM;
float HSM_BZL_BRIGHTNESS_MULT_SIDES;
float HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT;
float HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT;
float HSM_BZL_HIGHLIGHT;
float HSM_BZL_COLOR_HUE;
float HSM_BZL_COLOR_SATURATION;
float HSM_BZL_COLOR_VALUE;
float HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_FRM_USE_INDEPENDENT_COLOR;
float HSM_FRM_COLOR_HUE;
float HSM_FRM_COLOR_SATURATION;
float HSM_FRM_COLOR_VALUE;
float HSM_FRM_OPACITY;
float HSM_FRM_BLEND_MODE;
float HSM_FRM_TEXTURE_OPACITY;
float HSM_FRM_TEXTURE_BLEND_MODE;
float HSM_FRM_NOISE;
float HSM_FRM_INNER_EDGE_THICKNESS;
float HSM_FRM_THICKNESS;
float HSM_FRM_THICKNESS_SCALE_X;
float HSM_FRM_OUTER_POS_Y;
float HSM_FRM_OUTER_CURVATURE_SCALE;
float HSM_FRM_OUTER_CORNER_RADIUS;
float HSM_FRM_OUTER_EDGE_THICKNESS;
float HSM_FRM_OUTER_EDGE_SHADING;
float HSM_FRM_SHADOW_OPACITY;
float HSM_FRM_SHADOW_WIDTH;
float HSM_REFLECT_CORNER_FADE;
float HSM_REFLECT_CORNER_FADE_DISTANCE;
float HSM_REFLECT_CORNER_INNER_SPREAD;
float HSM_REFLECT_CORNER_OUTER_SPREAD;
float HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
float HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
float HSM_REFLECT_CORNER_SPREAD_FALLOFF;
float HSM_BG_LAYER_ORDER;
float HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
float HSM_LED_LAYER_ORDER;
float HSM_DEVICE_LAYER_ORDER;
float HSM_DEVICELED_LAYER_ORDER;
float HSM_CRT_LAYER_ORDER;
float HSM_DECAL_LAYER_ORDER;
float HSM_CAB_GLASS_LAYER_ORDER;
float HSM_TOP_LAYER_ORDER;
float HSM_CUTOUT_ASPECT_MODE;
float HSM_CUTOUT_EXPLICIT_ASPECT;
float HSM_CUTOUT_FOLLOW_LAYER;
float HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
float HSM_CUTOUT_SCALE;
float HSM_CUTOUT_SCALE_X;
float HSM_CUTOUT_POS_X;
float HSM_CUTOUT_POS_Y;
float HSM_CUTOUT_CORNER_RADIUS;
float HSM_LAYERING_DEBUG_MASK_MODE;
float HSM_BG_OPACITY;
float HSM_BG_COLORIZE_ON;
float HSM_BG_HUE;
float HSM_BG_SATURATION;
float HSM_BG_BRIGHTNESS;
float HSM_BG_GAMMA;
float HSM_BG_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_BG_BLEND_MODE;
float HSM_BG_SOURCE_MATTE_TYPE;
float HSM_BG_MIPMAPPING_BLEND_BIAS;
float HSM_BG_MASK_MODE;
float HSM_BG_CUTOUT_MODE;
float HSM_BG_DUALSCREEN_VIS_MODE;
float HSM_BG_FOLLOW_LAYER;
float HSM_BG_FOLLOW_MODE;
float HSM_BG_FOLLOW_FULL_USES_ZOOM;
float HSM_BG_FILL_MODE;
float HSM_BG_SPLIT_PRESERVE_CENTER;
float HSM_BG_SPLIT_REPEAT_WIDTH;
float HSM_BG_SCALE;
float HSM_BG_SCALE_X;
float HSM_BG_POS_X;
float HSM_BG_POS_Y;
float HSM_BG_WRAP_MODE;
float HSM_VIEWPORT_VIGNETTE_OPACITY;
float HSM_VIEWPORT_VIGNETTE_MASK_MODE;
float HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
float HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
float HSM_VIEWPORT_VIGNETTE_SCALE;
float HSM_VIEWPORT_VIGNETTE_SCALE_X;
float HSM_VIEWPORT_VIGNETTE_POS_X;
float HSM_VIEWPORT_VIGNETTE_POS_Y;
float HSM_LED_OPACITY;
float HSM_LED_COLORIZE_ON;
float HSM_LED_HUE;
float HSM_LED_SATURATION;
float HSM_LED_BRIGHTNESS;
float HSM_LED_GAMMA;
float HSM_LED_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_LED_BLEND_MODE;
float HSM_LED_SOURCE_MATTE_TYPE;
float HSM_LED_MASK_MODE;
float HSM_LED_MIPMAPPING_BLEND_BIAS;
float HSM_LED_CUTOUT_MODE;
float HSM_LED_DUALSCREEN_VIS_MODE;
float HSM_LED_FOLLOW_LAYER;
float HSM_LED_FOLLOW_MODE;
float HSM_LED_FOLLOW_FULL_USES_ZOOM;
float HSM_LED_FILL_MODE;
float HSM_LED_SPLIT_PRESERVE_CENTER;
float HSM_LED_SPLIT_REPEAT_WIDTH;
float HSM_LED_SCALE;
float HSM_LED_SCALE_X;
float HSM_LED_POS_X;
float HSM_LED_POS_Y;
float HSM_DEVICE_OPACITY;
float HSM_DEVICE_COLORIZE_ON;
float HSM_DEVICE_HUE;
float HSM_DEVICE_SATURATION;
float HSM_DEVICE_BRIGHTNESS;
float HSM_DEVICE_GAMMA;
float HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DEVICE_BLEND_MODE;
float HSM_DEVICE_SOURCE_MATTE_TYPE;
float HSM_DEVICE_MASK_MODE;
float HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
float HSM_DEVICE_CUTOUT_MODE;
float HSM_DEVICE_DUALSCREEN_VIS_MODE;
float HSM_DEVICE_FOLLOW_LAYER;
float HSM_DEVICE_FOLLOW_MODE;
float HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
float HSM_DEVICE_FILL_MODE;
float HSM_DEVICE_SPLIT_PRESERVE_CENTER;
float HSM_DEVICE_SPLIT_REPEAT_WIDTH;
float HSM_DEVICE_SCALE;
float HSM_DEVICE_SCALE_X;
float HSM_DEVICE_POS_X;
float HSM_DEVICE_POS_Y;
float HSM_DEVICELED_OPACITY;
float HSM_DEVICELED_COLORIZE_ON;
float HSM_DEVICELED_HUE;
float HSM_DEVICELED_SATURATION;
float HSM_DEVICELED_BRIGHTNESS;
float HSM_DEVICELED_GAMMA;
float HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DEVICELED_BLEND_MODE;
float HSM_DEVICELED_SOURCE_MATTE_TYPE;
float HSM_DEVICELED_MASK_MODE;
float HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
float HSM_DEVICELED_CUTOUT_MODE;
float HSM_DEVICELED_DUALSCREEN_VIS_MODE;
float HSM_DEVICELED_FOLLOW_LAYER;
float HSM_DEVICELED_FOLLOW_MODE;
float HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
float HSM_DEVICELED_FILL_MODE;
float HSM_DEVICELED_SPLIT_PRESERVE_CENTER;
float HSM_DEVICELED_SPLIT_REPEAT_WIDTH;
float HSM_DEVICELED_SCALE;
float HSM_DEVICELED_SCALE_X;
float HSM_DEVICELED_POS_X;
float HSM_DEVICELED_POS_Y;
float HSM_DECAL_OPACITY;
float HSM_DECAL_COLORIZE_ON;
float HSM_DECAL_HUE;
float HSM_DECAL_SATURATION;
float HSM_DECAL_BRIGHTNESS;
float HSM_DECAL_GAMMA;
float HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DECAL_BLEND_MODE;
float HSM_DECAL_SOURCE_MATTE_TYPE;
float HSM_DECAL_MIPMAPPING_BLEND_BIAS;
float HSM_DECAL_MASK_MODE;
float HSM_DECAL_CUTOUT_MODE;
float HSM_DECAL_DUALSCREEN_VIS_MODE;
float HSM_DECAL_FOLLOW_LAYER;
float HSM_DECAL_FOLLOW_MODE;
float HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
float HSM_DECAL_FILL_MODE;
float HSM_DECAL_SPLIT_PRESERVE_CENTER;
float HSM_DECAL_SPLIT_REPEAT_WIDTH;
float HSM_DECAL_SCALE;
float HSM_DECAL_SCALE_X;
float HSM_DECAL_POS_X;
float HSM_DECAL_POS_Y;
float HSM_CAB_GLASS_OPACITY;
float HSM_CAB_GLASS_COLORIZE_ON;
float HSM_CAB_GLASS_HUE;
float HSM_CAB_GLASS_SATURATION;
float HSM_CAB_GLASS_BRIGHTNESS;
float HSM_CAB_GLASS_GAMMA;
float HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_CAB_GLASS_BLEND_MODE;
float HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
float HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
float HSM_CAB_GLASS_MASK_MODE;
float HSM_CAB_GLASS_CUTOUT_MODE;
float HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
float HSM_CAB_GLASS_FOLLOW_LAYER;
float HSM_CAB_GLASS_FOLLOW_MODE;
float HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
float HSM_CAB_GLASS_FILL_MODE;
float HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER;
float HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH;
float HSM_CAB_GLASS_SCALE;
float HSM_CAB_GLASS_SCALE_X;
float HSM_CAB_GLASS_POS_X;
float HSM_CAB_GLASS_POS_Y;
float HSM_TOP_OPACITY;
float HSM_TOP_COLORIZE_ON;
float HSM_TOP_HUE;
float HSM_TOP_SATURATION;
float HSM_TOP_BRIGHTNESS;
float HSM_TOP_GAMMA;
float HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_TOP_BLEND_MODE;
float HSM_TOP_SOURCE_MATTE_TYPE;
float HSM_TOP_MIPMAPPING_BLEND_BIAS;
float HSM_TOP_MASK_MODE;
float HSM_TOP_CUTOUT_MODE;
float HSM_TOP_DUALSCREEN_VIS_MODE;
float HSM_TOP_FOLLOW_LAYER;
float HSM_TOP_FOLLOW_MODE;
float HSM_TOP_FOLLOW_FULL_USES_ZOOM;
float HSM_TOP_FILL_MODE;
float HSM_TOP_SPLIT_PRESERVE_CENTER;
float HSM_TOP_SPLIT_REPEAT_WIDTH;
float HSM_TOP_SCALE;
float HSM_TOP_SCALE_X;
float HSM_TOP_POS_X;
float HSM_TOP_POS_Y;
float HSM_TOP_MIRROR_WRAP;
float HSM_RENDER_SIMPLE_MODE;
float HSM_RENDER_SIMPLE_MASK_TYPE;
float SOURCE_MATTE_PREMULTIPLIED;
float SOURCE_MATTE_WHITE;
float SOURCE_MATTE_NONE;
float BLEND_MODE_OFF;
float BLEND_MODE_NORMAL;
float BLEND_MODE_ADD;
float BLEND_MODE_MULTIPLY;
float CURVATURE_MODE_OFF;
float CURVATURE_MODE_2D;
float CURVATURE_MODE_2D_CYLINDER;
float CURVATURE_MODE_3D_1;
float CURVATURE_MODE_3D_2;
float CURVATURE_MODE_3D_CYLINDER;
float MAX_LAYER_ORDER;

bool HSM_GetIsInABCompareArea(vec2 viewport_coord)
{
    float _6499;
    if (HSM_AB_COMPARE_AREA > 1.5)
    {
        _6499 = viewport_coord.y;
    }
    else
    {
        _6499 = viewport_coord.x;
    }
    float test_value = _6499;
    float _6512;
    if (mod(HSM_AB_COMPARE_AREA, 2.0) == 1.0)
    {
        _6512 = 1.0 - HSM_AB_COMPARE_SPLIT_POSITION;
    }
    else
    {
        _6512 = HSM_AB_COMPARE_SPLIT_POSITION;
    }
    float position = _6512;
    bool _6526 = (mod(HSM_AB_COMPARE_AREA, 2.0) == 0.0) && (test_value < position);
    bool _6537;
    if (!_6526)
    {
        _6537 = (mod(HSM_AB_COMPARE_AREA, 2.0) == 1.0) && (test_value > position);
    }
    else
    {
        _6537 = _6526;
    }
    return _6537;
}

vec2 HSM_GetViewportCoordWithFlip(vec2 viewport_coord)
{
    vec2 out_coord = viewport_coord;
    if (HSM_FLIP_VIEWPORT_VERTICAL == (-1.0))
    {
        out_coord.y = 1.0 - out_coord.y;
    }
    if (HSM_FLIP_VIEWPORT_HORIZONTAL == (-1.0))
    {
        out_coord.x = 1.0 - out_coord.x;
    }
    return out_coord;
}

vec2 HSM_GetViewportCoordWithZoomAndPan(vec2 viewport_coord)
{
    vec2 param = viewport_coord;
    vec2 out_coord = HSM_GetViewportCoordWithFlip(param);
    out_coord = ((out_coord - vec2(0.5)) / vec2(HSM_VIEWPORT_ZOOM)) + vec2(0.5);
    out_coord.x += HSM_VIEWPORT_POSITION_X;
    out_coord.y -= HSM_VIEWPORT_POSITION_Y;
    return out_coord;
}

float HSM_GetScreenIndex(vec2 viewport_coord)
{
    float out_index = 1.0;
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    if (HSM_DUALSCREEN_MODE == 0.0)
    {
        out_index = 1.0;
    }
    if (HSM_DUALSCREEN_MODE == 1.0)
    {
        out_index = float((viewport_coord.y < (0.5 + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    if (HSM_DUALSCREEN_MODE == 2.0)
    {
        out_index = float((viewport_coord.x < (0.5 + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    return out_index;
}

vec4 HSM_GetCacheSampleRange(float column_index, float row_index)
{
    float num_rows = 8.0;
    float num_columns = 8.0;
    float range_width = 1.0 / num_columns;
    float range_height = 1.0 / num_rows;
    float zero_based_row_index = row_index - 1.0;
    float zero_based_column_index = column_index - 1.0;
    vec4 out_sample_range = vec4(0.0);
    out_sample_range.x = zero_based_column_index * range_width;
    out_sample_range.y = zero_based_row_index * range_height;
    out_sample_range.z = out_sample_range.x + range_width;
    out_sample_range.w = out_sample_range.y + range_height;
    return out_sample_range;
}

vec2 HSM_GetCacheSampleCoord(float column_index, float row_index)
{
    float num_rows = 8.0;
    float num_columns = 8.0;
    float range_width = 1.0 / num_columns;
    float range_height = 1.0 / num_rows;
    float param = column_index;
    float param_1 = row_index;
    vec4 sample_range = HSM_GetCacheSampleRange(param, param_1);
    return vec2(sample_range.x + (range_width / 2.0), sample_range.y + (range_height / 2.0));
}

vec2 HSM_GetCoordWithPositionOffset(vec2 in_coord, vec2 position_offset)
{
    return in_coord - position_offset;
}

vec2 HSM_GetInverseScaledCoord(vec2 in_coord, vec2 in_scale)
{
    vec2 middle = vec2(0.499989986419677734375);
    vec2 diff = in_coord - middle;
    vec2 screen_inverse_scale = vec2(1.0) / in_scale;
    vec2 scaled_coord = middle + (diff * screen_inverse_scale);
    return scaled_coord;
}

vec2 HSM_GetVTexCoordWithArgs(vec2 in_coord, vec2 in_scale, vec2 position_offset)
{
    vec2 param = in_coord;
    vec2 param_1 = position_offset;
    vec2 param_2 = HSM_GetCoordWithPositionOffset(param, param_1);
    vec2 param_3 = in_scale;
    return HSM_GetInverseScaledCoord(param_2, param_3);
}

vec4 HSM_UpdateGlobalScreenValuesFromCache(sampler2D in_cache_pass, vec2 vTexCoord_1)
{
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    vec2 param = vTexCoord_1;
    vec2 flipped_viewport_coord = HSM_GetViewportCoordWithZoomAndPan(param);
    vec2 param_1 = flipped_viewport_coord;
    SCREEN_INDEX = HSM_GetScreenIndex(param_1);
    vec2 sample_coord = vec2(0.0);
    vec4 texture_sample = vec4(0.0);
    float param_2 = 1.0;
    float param_3 = 1.0;
    sample_coord = HSM_GetCacheSampleCoord(param_2, param_3);
    texture_sample = texture(in_cache_pass, sample_coord);
    AVERAGE_LUMA = texture_sample.w;
    SAMPLING_SCANLINE_DIR_MULT = texture_sample.x;
    SAMPLING_OPPOSITE_DIR_MULT = texture_sample.y;
    float res_mult_size_sum = 0.0;
    float res_mult_size2_sum = 0.0;
    if (SCREEN_INDEX == 1.0)
    {
        float param_4 = 2.0;
        float param_5 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_4, param_5);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.zw;
        float param_6 = 3.0;
        float param_7 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_6, param_7);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_8 = 3.0;
        float param_9 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_8, param_9);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.xy;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_10 = 4.0;
        float param_11 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_10, param_11);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        ROTATED_CORE_PREPPED_SIZE = texture_sample.zw;
        float param_12 = 1.0;
        float param_13 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_12, param_13);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_14 = 4.0;
        float param_15 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_14, param_15);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_SIZE = texture_sample.xy;
    }
    if (SCREEN_INDEX == 2.0)
    {
        float param_16 = 2.0;
        float param_17 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_16, param_17);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.yz;
        float param_18 = 3.0;
        float param_19 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_18, param_19);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_20 = 3.0;
        float param_21 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_20, param_21);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.zw;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_22 = 4.0;
        float param_23 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_22, param_23);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size2_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        float param_24 = 1.0;
        float param_25 = 3.0;
        sample_coord = HSM_GetCacheSampleCoord(param_24, param_25);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_26 = 4.0;
        float param_27 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_26, param_27);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_SIZE = texture_sample.zw;
    }
    float param_28 = 3.0;
    float param_29 = 1.0;
    sample_coord = HSM_GetCacheSampleCoord(param_28, param_29);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_POS_OFFSET_1ST_SCREEN = texture_sample.zw;
    float param_30 = 3.0;
    float param_31 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_30, param_31);
    texture_sample = texture(in_cache_pass, sample_coord);
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = texture_sample.xy;
    float param_32 = 3.0;
    float param_33 = 2.0;
    sample_coord = HSM_GetCacheSampleCoord(param_32, param_33);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_34 = 3.0;
    float param_35 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_34, param_35);
    texture_sample = texture(in_cache_pass, sample_coord);
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = texture_sample.zw;
    float param_36 = 2.0;
    float param_37 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_36, param_37);
    texture_sample = texture(in_cache_pass, sample_coord);
    CORE_SIZE = texture_sample.xy;
    ROTATED_CORE_ORIGINAL_SIZE = texture_sample.zw;
    float param_38 = 3.0;
    float param_39 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_38, param_39);
    texture_sample = texture(in_cache_pass, sample_coord);
    VIEWPORT_SCALE = texture_sample.xy;
    VIEWPORT_POS = texture_sample.zw;
    float param_40 = 4.0;
    float param_41 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_40, param_41);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_SCALE_2ND_SCREEN = texture_sample.xy;
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_42 = 1.0;
    float param_43 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_42, param_43);
    texture_sample = texture(in_cache_pass, sample_coord);
    CURRENT_FRAME_FROM_CACHE_INFO = texture_sample.y;
    ROTATED_DEREZED_SIZE = texture_sample.zw;
    float param_44 = 2.0;
    float param_45 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_44, param_45);
    texture_sample = texture(in_cache_pass, sample_coord);
    NEGATIVE_CROP_EXPAND_MULTIPLIER = texture_sample.x;
    MAX_NEGATIVE_CROP = texture_sample.y;
    USE_VERTICAL_SCANLINES = texture_sample.z;
    float param_46 = 8.0;
    float param_47 = 8.0;
    sample_coord = HSM_GetCacheSampleCoord(param_46, param_47);
    texture_sample = texture(in_cache_pass, sample_coord);
    CACHE_INFO_CHANGED = (texture_sample.x > 0.5) ? true : false;
    SCREEN_SCALE_WITH_ZOOM = SCREEN_SCALE * HSM_VIEWPORT_ZOOM;
    vec2 param_48 = flipped_viewport_coord;
    vec2 param_49 = SCREEN_SCALE;
    vec2 param_50 = SCREEN_POS_OFFSET;
    SCREEN_COORD = HSM_GetVTexCoordWithArgs(param_48, param_49, param_50);
    vec2 param_51 = flipped_viewport_coord;
    vec2 param_52 = TUBE_DIFFUSE_SCALE;
    vec2 param_53 = SCREEN_POS_OFFSET;
    TUBE_DIFFUSE_COORD = HSM_GetVTexCoordWithArgs(param_51, param_52, param_53);
    vec2 param_54 = flipped_viewport_coord;
    vec2 param_55 = TUBE_DIFFUSE_SCALE_1ST_SCREEN;
    vec2 param_56 = (SCREEN_POS_OFFSET_1ST_SCREEN + SCREEN_POS_OFFSET_2ND_SCREEN) / vec2(2.0);
    TUBE_DIFFUSE_COORD_MIXED_POS = HSM_GetVTexCoordWithArgs(param_54, param_55, param_56);
    return vec4(0.0);
}

vec2 HSM_GetOuterBezelScale(vec2 tube_diffuse_scale, float screen_aspect)
{
    vec2 bezel_outer_scale_offset = vec2((HSM_BZL_WIDTH / screen_aspect) + 1.0, HSM_BZL_HEIGHT + 1.0);
    return bezel_outer_scale_offset;
}

float HSM_GetSimpleBezelCoords(vec2 tube_diffuse_coord, vec2 tube_diffuse_scale, vec2 tube_scale, float screen_aspect, inout vec2 bezel_outside_coord, out vec2 frame_outside_coord)
{
    float output_aspect = global.OutputSize.x / global.OutputSize.y;
    vec2 bezel_outer_pos_offset = vec2(0.0, HSM_BZL_OUTER_POSITION_Y);
    vec2 param = tube_diffuse_scale;
    float param_1 = screen_aspect;
    vec2 bezel_outer_scale_offset = HSM_GetOuterBezelScale(param, param_1);
    bezel_outside_coord = tube_diffuse_coord + bezel_outer_pos_offset;
    vec2 black_edge_scale_offset = tube_scale / tube_diffuse_scale;
    vec2 param_2 = bezel_outside_coord;
    vec2 param_3 = black_edge_scale_offset * bezel_outer_scale_offset;
    bezel_outside_coord = HSM_GetInverseScaledCoord(param_2, param_3) + vec2(0.0, HSM_BZL_OUTER_POSITION_Y);
    frame_outside_coord = (((bezel_outside_coord + vec2(0.0, HSM_FRM_OUTER_POS_Y)) - vec2(0.5)) / vec2(((HSM_FRM_THICKNESS * HSM_FRM_THICKNESS_SCALE_X) / ((tube_diffuse_scale.x / tube_diffuse_scale.y) * output_aspect)) + 1.0, HSM_FRM_THICKNESS + 1.0)) + vec2(0.5);
    return 0.0;
}

bool HHLP_IsOutsideCoordSpace(vec2 in_coord)
{
    bool _3042 = abs(in_coord.x - 0.5) > 0.500999987125396728515625;
    bool _3051;
    if (!_3042)
    {
        _3051 = abs(in_coord.y - 0.5) > 0.500999987125396728515625;
    }
    else
    {
        _3051 = _3042;
    }
    return _3051;
}

float intersect(vec2 in_coord, vec2 sinangle, vec2 cosangle, float in_radius, float in_distance)
{
    float A = dot(in_coord, in_coord) + (in_distance * in_distance);
    float B = 2.0 * ((in_radius * (dot(in_coord, sinangle) - ((in_distance * cosangle.x) * cosangle.y))) - (in_distance * in_distance));
    float C = (in_distance * in_distance) + ((((2.0 * in_radius) * in_distance) * cosangle.x) * cosangle.y);
    return ((-B) - sqrt((B * B) - ((4.0 * A) * C))) / (2.0 * A);
}

vec2 bkwtrans(vec2 in_coord, vec2 sinangle, vec2 cosangle, float in_radius, float in_distance)
{
    vec2 param = in_coord;
    vec2 param_1 = sinangle;
    vec2 param_2 = cosangle;
    float param_3 = in_radius;
    float param_4 = in_distance;
    float c = intersect(param, param_1, param_2, param_3, param_4);
    vec2 pt = vec2(c) * in_coord;
    pt -= (vec2(-in_radius) * sinangle);
    pt /= vec2(in_radius);
    vec2 tang = sinangle / cosangle;
    vec2 poc = pt / cosangle;
    float A = dot(tang, tang) + 1.0;
    float B = (-2.0) * dot(poc, tang);
    float C = dot(poc, poc) - 1.0;
    float a = ((-B) + sqrt((B * B) - ((4.0 * A) * C))) / (2.0 * A);
    vec2 uv = (pt - (sinangle * a)) / cosangle;
    float r = max(abs(in_radius * acos(a)), 9.9999997473787516355514526367188e-06);
    return (uv * r) / vec2(sin(r / in_radius));
}

vec2 fwtrans(inout vec2 uv, vec2 sinangle, vec2 cosangle, float in_radius, float in_distance)
{
    float r = max(abs(sqrt(dot(uv, uv))), 9.9999997473787516355514526367188e-06);
    uv *= (sin(r / in_radius) / r);
    float x = 1.0 - cos(r / in_radius);
    float D = ((in_distance / in_radius) + ((x * cosangle.x) * cosangle.y)) + dot(uv, sinangle);
    return (((uv * cosangle) - (sinangle * x)) * in_distance) / vec2(D);
}

vec3 maxscale(vec2 sinangle, vec2 cosangle, float in_radius, float in_distance, float in_aspect)
{
    vec2 aspect_vec2 = vec2(1.0, 1.0 / in_aspect);
    vec2 param = (sinangle * (-in_radius)) / vec2(1.0 + (((in_radius / in_distance) * cosangle.x) * cosangle.y));
    vec2 param_1 = sinangle;
    vec2 param_2 = cosangle;
    float param_3 = in_radius;
    float param_4 = in_distance;
    vec2 c = bkwtrans(param, param_1, param_2, param_3, param_4);
    vec2 a = vec2(0.5) * aspect_vec2;
    vec2 param_5 = vec2(-a.x, c.y);
    vec2 param_6 = sinangle;
    vec2 param_7 = cosangle;
    float param_8 = in_radius;
    float param_9 = in_distance;
    vec2 _5501 = fwtrans(param_5, param_6, param_7, param_8, param_9);
    vec2 param_10 = vec2(c.x, -a.y);
    vec2 param_11 = sinangle;
    vec2 param_12 = cosangle;
    float param_13 = in_radius;
    float param_14 = in_distance;
    vec2 _5518 = fwtrans(param_10, param_11, param_12, param_13, param_14);
    vec2 lo = vec2(_5501.x, _5518.y) / aspect_vec2;
    vec2 param_15 = vec2(a.x, c.y);
    vec2 param_16 = sinangle;
    vec2 param_17 = cosangle;
    float param_18 = in_radius;
    float param_19 = in_distance;
    vec2 _5538 = fwtrans(param_15, param_16, param_17, param_18, param_19);
    vec2 param_20 = vec2(c.x, a.y);
    vec2 param_21 = sinangle;
    vec2 param_22 = cosangle;
    float param_23 = in_radius;
    float param_24 = in_distance;
    vec2 _5554 = fwtrans(param_20, param_21, param_22, param_23, param_24);
    vec2 hi = vec2(_5538.x, _5554.y) / aspect_vec2;
    return vec3(((hi + lo) * aspect_vec2) * 0.5, max(hi.x - lo.x, hi.y - lo.y));
}

vec2 transform(inout vec2 coord, vec3 stretch, vec2 sinangle, vec2 cosangle, float in_radius, float in_distance, vec2 aspect)
{
    coord = (((coord - vec2(0.5)) * aspect) * stretch.z) + stretch.xy;
    vec2 param = coord;
    vec2 param_1 = sinangle;
    vec2 param_2 = cosangle;
    float param_3 = in_radius;
    float param_4 = in_distance;
    return (bkwtrans(param, param_1, param_2, param_3, param_4) / aspect) + vec2(0.5);
}

vec2 HSM_GetGeomCurvedCoord(vec2 in_coord, float tilt_x, float tilt_y, float in_radius, inout float in_distance, float in_aspect)
{
    in_distance *= 1.39999997615814208984375;
    vec2 ang = vec2(tilt_x, tilt_y);
    vec2 v_sinangle = sin(ang);
    vec2 v_cosangle = cos(ang);
    vec2 param = v_sinangle;
    vec2 param_1 = v_cosangle;
    float param_2 = in_radius;
    float param_3 = in_distance;
    float param_4 = in_aspect;
    vec3 v_stretch = maxscale(param, param_1, param_2, param_3, param_4);
    vec2 aspect_vec2 = vec2(1.0, 1.0 / in_aspect);
    vec2 param_5 = in_coord;
    vec3 param_6 = v_stretch;
    vec2 param_7 = v_sinangle;
    vec2 param_8 = v_cosangle;
    float param_9 = in_radius;
    float param_10 = in_distance;
    vec2 param_11 = aspect_vec2;
    vec2 _5651 = transform(param_5, param_6, param_7, param_8, param_9, param_10, param_11);
    vec2 curved_coord = _5651;
    return curved_coord;
}

vec2 HSM_GetGeomCurvedCoordRetainWidth(vec2 in_coord, float tilt_x, float tilt_y, float in_radius, float in_distance, float in_aspect)
{
    vec2 param = in_coord;
    float param_1 = tilt_x;
    float param_2 = tilt_y;
    float param_3 = in_radius;
    float param_4 = in_distance;
    float param_5 = in_aspect;
    vec2 _5668 = HSM_GetGeomCurvedCoord(param, param_1, param_2, param_3, param_4, param_5);
    vec2 ctr_curved_coord = _5668 - vec2(0.5);
    vec2 param_6 = vec2(1.0, 0.5);
    float param_7 = tilt_x;
    float param_8 = tilt_y;
    float param_9 = in_radius;
    float param_10 = in_distance;
    float param_11 = in_aspect;
    vec2 _5683 = HSM_GetGeomCurvedCoord(param_6, param_7, param_8, param_9, param_10, param_11);
    vec2 right_edge_curved_ctr_coord = _5683 - vec2(0.5);
    ctr_curved_coord.x = (ctr_curved_coord.x * 0.5) / right_edge_curved_ctr_coord.x;
    return ctr_curved_coord + vec2(0.5);
}

vec2 hrg_get_aspect_vector(float geom_aspect_ratio)
{
    float geom_max_aspect_ratio = 1.0;
    float geom_clamped_aspect_ratio = min(geom_aspect_ratio, geom_max_aspect_ratio);
    vec2 output_aspect = normalize(vec2(geom_clamped_aspect_ratio, 1.0));
    return output_aspect;
}

vec3 hrg_sphere_uv_to_xyz(vec2 video_uv, vec2 output_aspect, float in_geom_radius)
{
    vec2 square_uv = video_uv * output_aspect;
    vec2 square_uv_unit = normalize(square_uv);
    float arc_len = square_uv.y / square_uv_unit.y;
    float angle_from_image_center = arc_len / in_geom_radius;
    float xy_dist_from_sphere_center = sin(angle_from_image_center) * in_geom_radius;
    vec2 xy_pos = square_uv_unit * xy_dist_from_sphere_center;
    float z_pos = cos(angle_from_image_center) * in_geom_radius;
    vec3 intersection_pos_local = vec3(xy_pos.x, -xy_pos.y, z_pos);
    return intersection_pos_local;
}

vec3 hrg_sphere_alt_uv_to_xyz(vec2 video_uv, vec2 output_aspect, float in_geom_radius)
{
    vec2 square_uv = video_uv * output_aspect;
    vec2 arc_len = square_uv;
    vec2 angle_from_image_center = arc_len / vec2(in_geom_radius);
    vec2 xy_pos = sin(angle_from_image_center) * in_geom_radius;
    float z_pos = sqrt((in_geom_radius * in_geom_radius) - dot(xy_pos, xy_pos));
    return vec3(xy_pos.x, -xy_pos.y, z_pos);
}

vec3 hrg_cylinder_uv_to_xyz(vec2 video_uv, vec2 output_aspect, float in_geom_radius)
{
    vec2 square_uv = video_uv * output_aspect;
    float arc_len = square_uv.x;
    float angle_from_image_center = arc_len / in_geom_radius;
    float x_pos = sin(angle_from_image_center) * in_geom_radius;
    float z_pos = cos(angle_from_image_center) * in_geom_radius;
    vec3 intersection_pos_local = vec3(x_pos, -square_uv.y, z_pos);
    return intersection_pos_local;
}

vec3 hrg_uv_to_xyz(vec2 uv, vec2 output_aspect, float in_geom_mode, float in_geom_radius)
{
    vec3 _3881;
    if (in_geom_mode < 1.5)
    {
        vec2 param = uv;
        vec2 param_1 = output_aspect;
        float param_2 = in_geom_radius;
        _3881 = hrg_sphere_uv_to_xyz(param, param_1, param_2);
    }
    else
    {
        vec3 _3894;
        if (in_geom_mode < 2.5)
        {
            vec2 param_3 = uv;
            vec2 param_4 = output_aspect;
            float param_5 = in_geom_radius;
            _3894 = hrg_sphere_alt_uv_to_xyz(param_3, param_4, param_5);
        }
        else
        {
            vec2 param_6 = uv;
            vec2 param_7 = output_aspect;
            float param_8 = in_geom_radius;
            _3894 = hrg_cylinder_uv_to_xyz(param_6, param_7, param_8);
        }
        _3881 = _3894;
    }
    return _3881;
}

vec3 hrg_get_ideal_global_eye_pos_for_points(inout vec3 eye_pos, vec2 output_aspect, vec3 global_coords[9], int num_points, float in_geom_radius, float in_geom_view_dist)
{
    int max_centering_iters = 1;
    vec3 eyespace_coords[9];
    float _4126;
    float _4139;
    float _4152;
    float _4165;
    for (int iter = 0; iter < max_centering_iters; iter++)
    {
        for (int i = 0; i < num_points; i++)
        {
            eyespace_coords[i] = global_coords[i] - eye_pos;
        }
        float abs_radius = abs(in_geom_radius);
        vec2 offset_dr_min = vec2(10.0 * abs_radius, 10.0 * abs_radius);
        vec2 offset_ul_max = vec2((-10.0) * abs_radius, (-10.0) * abs_radius);
        for (int i_1 = 0; i_1 < num_points; i_1++)
        {
            vec2 flipy = vec2(1.0, -1.0);
            vec3 eyespace_xyz = eyespace_coords[i_1];
            vec2 offset_dr = eyespace_xyz.xy - ((vec2(-0.5) * (output_aspect * (-eyespace_xyz.z))) / (flipy * in_geom_view_dist));
            vec2 offset_ul = eyespace_xyz.xy - ((vec2(0.5) * (output_aspect * (-eyespace_xyz.z))) / (flipy * in_geom_view_dist));
            offset_dr_min = min(offset_dr_min, offset_dr);
            offset_ul_max = max(offset_ul_max, offset_ul);
        }
        vec2 center_offset = (offset_ul_max + offset_dr_min) * 0.5;
        vec3 _4060 = eye_pos;
        vec2 _4062 = _4060.xy + center_offset;
        eye_pos.x = _4062.x;
        eye_pos.y = _4062.y;
        for (int i_2 = 0; i_2 < num_points; i_2++)
        {
            eyespace_coords[i_2] = global_coords[i_2] - eye_pos;
        }
        float offset_z_max = ((-10.0) * in_geom_radius) * in_geom_view_dist;
        for (int i_3 = 0; i_3 < num_points; i_3++)
        {
            vec3 eyespace_xyz_flipy = eyespace_coords[i_3] * vec3(1.0, -1.0, 1.0);
            vec4 offset_zzzz = eyespace_xyz_flipy.zzzz + ((eyespace_xyz_flipy.xyxy * in_geom_view_dist) / (vec4(-0.5, -0.5, 0.5, 0.5) * vec4(output_aspect, output_aspect)));
            if (eyespace_xyz_flipy.x < 0.0)
            {
                _4126 = max(offset_z_max, offset_zzzz.x);
            }
            else
            {
                _4126 = offset_z_max;
            }
            offset_z_max = _4126;
            if (eyespace_xyz_flipy.y < 0.0)
            {
                _4139 = max(offset_z_max, offset_zzzz.y);
            }
            else
            {
                _4139 = offset_z_max;
            }
            offset_z_max = _4139;
            if (eyespace_xyz_flipy.x > 0.0)
            {
                _4152 = max(offset_z_max, offset_zzzz.z);
            }
            else
            {
                _4152 = offset_z_max;
            }
            offset_z_max = _4152;
            if (eyespace_xyz_flipy.y > 0.0)
            {
                _4165 = max(offset_z_max, offset_zzzz.w);
            }
            else
            {
                _4165 = offset_z_max;
            }
            offset_z_max = _4165;
            offset_z_max = max(offset_z_max, eyespace_xyz_flipy.z);
        }
        eye_pos.z += offset_z_max;
    }
    return eye_pos;
}

vec3 hrg_get_ideal_global_eye_pos(mat3 local_to_global, vec2 output_aspect, float in_geom_mode, float in_geom_radius, float in_geom_view_dist)
{
    vec3 high_view = vec3(0.0, output_aspect.y, -in_geom_view_dist);
    vec3 low_view = high_view * vec3(1.0, -1.0, 1.0);
    float len_sq = dot(high_view, high_view);
    float fov = abs(acos(dot(high_view, low_view) / len_sq));
    float eye_z_spherical = in_geom_radius / sin(fov * 0.5);
    vec3 _4221;
    if (in_geom_mode < 2.5)
    {
        _4221 = vec3(0.0, 0.0, eye_z_spherical);
    }
    else
    {
        _4221 = vec3(0.0, 0.0, max(in_geom_view_dist, eye_z_spherical));
    }
    vec3 eye_pos = _4221;
    int num_points = 9;
    vec2 param = vec2(0.0);
    vec2 param_1 = output_aspect;
    float param_2 = in_geom_mode;
    float param_3 = in_geom_radius;
    vec3 global_coords[9];
    global_coords[0] = hrg_uv_to_xyz(param, param_1, param_2, param_3) * local_to_global;
    vec2 param_4 = vec2(0.0, -0.5);
    vec2 param_5 = output_aspect;
    float param_6 = in_geom_mode;
    float param_7 = in_geom_radius;
    global_coords[1] = hrg_uv_to_xyz(param_4, param_5, param_6, param_7) * local_to_global;
    vec2 param_8 = vec2(0.0, 0.5);
    vec2 param_9 = output_aspect;
    float param_10 = in_geom_mode;
    float param_11 = in_geom_radius;
    global_coords[2] = hrg_uv_to_xyz(param_8, param_9, param_10, param_11) * local_to_global;
    vec2 param_12 = vec2(-0.5, 0.0);
    vec2 param_13 = output_aspect;
    float param_14 = in_geom_mode;
    float param_15 = in_geom_radius;
    global_coords[3] = hrg_uv_to_xyz(param_12, param_13, param_14, param_15) * local_to_global;
    vec2 param_16 = vec2(0.5, 0.0);
    vec2 param_17 = output_aspect;
    float param_18 = in_geom_mode;
    float param_19 = in_geom_radius;
    global_coords[4] = hrg_uv_to_xyz(param_16, param_17, param_18, param_19) * local_to_global;
    vec2 param_20 = vec2(-0.5);
    vec2 param_21 = output_aspect;
    float param_22 = in_geom_mode;
    float param_23 = in_geom_radius;
    global_coords[5] = hrg_uv_to_xyz(param_20, param_21, param_22, param_23) * local_to_global;
    vec2 param_24 = vec2(0.5, -0.5);
    vec2 param_25 = output_aspect;
    float param_26 = in_geom_mode;
    float param_27 = in_geom_radius;
    global_coords[6] = hrg_uv_to_xyz(param_24, param_25, param_26, param_27) * local_to_global;
    vec2 param_28 = vec2(-0.5, 0.5);
    vec2 param_29 = output_aspect;
    float param_30 = in_geom_mode;
    float param_31 = in_geom_radius;
    global_coords[7] = hrg_uv_to_xyz(param_28, param_29, param_30, param_31) * local_to_global;
    vec2 param_32 = vec2(0.5);
    vec2 param_33 = output_aspect;
    float param_34 = in_geom_mode;
    float param_35 = in_geom_radius;
    global_coords[8] = hrg_uv_to_xyz(param_32, param_33, param_34, param_35) * local_to_global;
    float num_negative_z_coords = 0.0;
    for (int i = 0; i < num_points; i++)
    {
        num_negative_z_coords += float(global_coords[0].z < 0.0);
    }
    vec3 _4364;
    if (num_negative_z_coords > 0.5)
    {
        _4364 = eye_pos;
    }
    else
    {
        vec3 param_36 = eye_pos;
        vec2 param_37 = output_aspect;
        vec3 param_38[9] = global_coords;
        int param_39 = num_points;
        float param_40 = in_geom_radius;
        float param_41 = in_geom_view_dist;
        vec3 _4381 = hrg_get_ideal_global_eye_pos_for_points(param_36, param_37, param_38, param_39, param_40, param_41);
        _4364 = _4381;
    }
    return _4364;
}

vec2 hrg_quadratic_solve(float a, float b_over_2, float c)
{
    float discriminant = (b_over_2 * b_over_2) - (a * c);
    float solution0 = c / ((-b_over_2) + sqrt(discriminant));
    return vec2(solution0, discriminant);
}

vec2 hrg_intersect_sphere(vec3 view_vec, vec3 eye_pos_vec, float in_geom_radius)
{
    float a = dot(view_vec, view_vec);
    float b_over_2 = dot(view_vec, eye_pos_vec);
    float c = dot(eye_pos_vec, eye_pos_vec) - (in_geom_radius * in_geom_radius);
    float param = a;
    float param_1 = b_over_2;
    float param_2 = c;
    return hrg_quadratic_solve(param, param_1, param_2);
}

vec2 hrg_intersect_cylinder(vec3 view_vec, vec3 eye_pos_vec, float in_geom_radius)
{
    vec3 cylinder_top_vec = vec3(0.0, in_geom_radius, 0.0);
    vec3 cylinder_axis_vec = vec3(0.0, 1.0, 0.0);
    vec3 top_to_eye_vec = eye_pos_vec - cylinder_top_vec;
    vec3 axis_x_view = cross(cylinder_axis_vec, view_vec);
    vec3 axis_x_top_to_eye = cross(cylinder_axis_vec, top_to_eye_vec);
    float a = dot(axis_x_view, axis_x_view);
    float b_over_2 = dot(axis_x_top_to_eye, axis_x_view);
    float c = dot(axis_x_top_to_eye, axis_x_top_to_eye) - (in_geom_radius * in_geom_radius);
    float param = a;
    float param_1 = b_over_2;
    float param_2 = c;
    return hrg_quadratic_solve(param, param_1, param_2);
}

vec2 hrg_intersect(vec3 view_vec_local, vec3 eye_pos_local, float in_geom_mode, float in_geom_radius)
{
    vec2 _3820;
    if (in_geom_mode < 2.5)
    {
        vec3 param = view_vec_local;
        vec3 param_1 = eye_pos_local;
        float param_2 = in_geom_radius;
        _3820 = hrg_intersect_sphere(param, param_1, param_2);
    }
    else
    {
        vec3 param_3 = view_vec_local;
        vec3 param_4 = eye_pos_local;
        float param_5 = in_geom_radius;
        _3820 = hrg_intersect_cylinder(param_3, param_4, param_5);
    }
    return _3820;
}

vec2 hrg_sphere_xyz_to_uv(vec3 intersection_pos_local, vec2 output_aspect, float in_geom_radius)
{
    vec3 image_center_pos_local = vec3(0.0, 0.0, in_geom_radius);
    float cp_len = length(cross(intersection_pos_local, image_center_pos_local));
    float dp = dot(intersection_pos_local, image_center_pos_local);
    float angle_from_image_center = atan(cp_len, dp);
    float arc_len = angle_from_image_center * in_geom_radius;
    vec2 square_uv_unit = normalize(vec2(intersection_pos_local.x, -intersection_pos_local.y));
    vec2 square_uv = square_uv_unit * arc_len;
    vec2 video_uv = square_uv / output_aspect;
    return video_uv;
}

vec2 hrg_sphere_alt_xyz_to_uv(vec3 intersection_pos_local, vec2 output_aspect, float in_geom_radius)
{
    vec2 angle_from_image_center = atan(vec2(intersection_pos_local.x, -intersection_pos_local.y), intersection_pos_local.zz);
    vec2 signed_arc_len = angle_from_image_center * in_geom_radius;
    vec2 video_uv = signed_arc_len / output_aspect;
    return video_uv;
}

vec2 hrg_cylinder_xyz_to_uv(vec3 intersection_pos_local, vec2 output_aspect, float in_geom_radius)
{
    float angle_from_image_center = atan(intersection_pos_local.x, intersection_pos_local.z);
    float signed_arc_len = angle_from_image_center * in_geom_radius;
    vec2 square_uv = vec2(signed_arc_len, -intersection_pos_local.y);
    vec2 video_uv = square_uv / output_aspect;
    return video_uv;
}

vec2 hrg_xyz_to_uv(vec3 intersection_pos_local, vec2 output_aspect, float in_geom_mode, float in_geom_radius)
{
    vec2 _3844;
    if (in_geom_mode < 1.5)
    {
        vec3 param = intersection_pos_local;
        vec2 param_1 = output_aspect;
        float param_2 = in_geom_radius;
        _3844 = hrg_sphere_xyz_to_uv(param, param_1, param_2);
    }
    else
    {
        vec2 _3857;
        if (in_geom_mode < 2.5)
        {
            vec3 param_3 = intersection_pos_local;
            vec2 param_4 = output_aspect;
            float param_5 = in_geom_radius;
            _3857 = hrg_sphere_alt_xyz_to_uv(param_3, param_4, param_5);
        }
        else
        {
            vec3 param_6 = intersection_pos_local;
            vec2 param_7 = output_aspect;
            float param_8 = in_geom_radius;
            _3857 = hrg_cylinder_xyz_to_uv(param_6, param_7, param_8);
        }
        _3844 = _3857;
    }
    return _3844;
}

vec2 hrg_view_vec_to_uv(vec3 view_vec_local, vec3 eye_pos_local, vec2 output_aspect, float in_geom_mode, float in_geom_radius, out vec3 intersection_pos)
{
    vec3 param = view_vec_local;
    vec3 param_1 = eye_pos_local;
    float param_2 = in_geom_mode;
    float param_3 = in_geom_radius;
    vec2 intersect_dist_and_discriminant = hrg_intersect(param, param_1, param_2, param_3);
    vec3 intersection_pos_local = eye_pos_local + (view_vec_local * intersect_dist_and_discriminant.x);
    intersection_pos = intersection_pos_local;
    vec2 _3938;
    if (intersect_dist_and_discriminant.y > 0.004999999888241291046142578125)
    {
        vec3 param_4 = intersection_pos_local;
        vec2 param_5 = output_aspect;
        float param_6 = in_geom_mode;
        float param_7 = in_geom_radius;
        _3938 = hrg_xyz_to_uv(param_4, param_5, param_6, param_7);
    }
    else
    {
        _3938 = vec2(1.0);
    }
    return _3938;
}

mat3 hrg_get_pixel_to_object_matrix(mat3 global_to_local, vec3 eye_pos_local, vec3 view_vec_global, vec3 intersection_pos_local, vec3 normal, vec2 output_pixel_size)
{
    vec3 pos = intersection_pos_local;
    vec3 eye_pos = eye_pos_local;
    vec3 view_vec_right_global = view_vec_global + vec3(output_pixel_size.x, 0.0, 0.0);
    vec3 view_vec_down_global = view_vec_global + vec3(0.0, -output_pixel_size.y, 0.0);
    vec3 view_vec_right_local = view_vec_right_global * global_to_local;
    vec3 view_vec_down_local = view_vec_down_global * global_to_local;
    vec3 intersection_vec_dot_normal = vec3(dot(pos - eye_pos, normal));
    vec3 right_pos = eye_pos + ((intersection_vec_dot_normal / vec3(dot(view_vec_right_local, normal))) * view_vec_right_local);
    vec3 down_pos = eye_pos + ((intersection_vec_dot_normal / vec3(dot(view_vec_down_local, normal))) * view_vec_down_local);
    vec3 object_right_vec = right_pos - pos;
    vec3 object_down_vec = down_pos - pos;
    mat3 pixel_to_object = mat3(vec3(object_right_vec.x, object_down_vec.x, 0.0), vec3(object_right_vec.y, object_down_vec.y, 0.0), vec3(object_right_vec.z, object_down_vec.z, 0.0));
    return pixel_to_object;
}

mat3 hrg_get_object_to_tangent_matrix(vec3 intersection_pos_local, vec3 normal, vec2 output_aspect, float in_geom_mode)
{
    vec3 pos = intersection_pos_local;
    vec3 x_vec = vec3(1.0, 0.0, 0.0);
    vec3 y_vec = vec3(0.0, 1.0, 0.0);
    vec3 cotangent_unscaled;
    vec3 cobitangent_unscaled;
    if (in_geom_mode < 1.5)
    {
        cotangent_unscaled = normalize(cross(y_vec, pos)) * output_aspect.y;
        cobitangent_unscaled = normalize(cross(x_vec, pos)) * output_aspect.x;
    }
    else
    {
        if (in_geom_mode < 2.5)
        {
            vec3 tangent = normalize(cross(y_vec, vec3(pos.x, 0.0, pos.z))) * output_aspect.x;
            vec3 bitangent = normalize(cross(x_vec, vec3(0.0, pos.yz))) * output_aspect.y;
            cotangent_unscaled = cross(normal, bitangent);
            cobitangent_unscaled = cross(tangent, normal);
        }
        else
        {
            cotangent_unscaled = cross(y_vec, normal) * output_aspect.y;
            cobitangent_unscaled = vec3(0.0, -output_aspect.x, 0.0);
        }
    }
    vec3 computed_normal = cross(cobitangent_unscaled, cotangent_unscaled);
    float inv_determinant = inversesqrt(dot(computed_normal, computed_normal));
    vec3 cotangent = cotangent_unscaled * inv_determinant;
    vec3 cobitangent = cobitangent_unscaled * inv_determinant;
    mat3 object_to_tangent = mat3(vec3(cotangent), vec3(cobitangent), vec3(normal));
    return object_to_tangent;
}

vec2 hrg_get_curved_video_uv_coords_and_tangent_matrix(vec2 flat_video_uv, vec3 eye_pos_local, vec2 output_pixel_size, vec2 output_aspect, float in_geom_mode, float in_geom_radius, float in_geom_view_dist, mat3 global_to_local, out mat2 pixel_to_tangent_video_uv)
{
    vec2 view_uv = (flat_video_uv - vec2(0.5)) * output_aspect;
    vec3 view_vec_global = vec3(view_uv.x, -view_uv.y, -in_geom_view_dist);
    vec3 view_vec_local = view_vec_global * global_to_local;
    vec3 param = view_vec_local;
    vec3 param_1 = eye_pos_local;
    vec2 param_2 = output_aspect;
    float param_3 = in_geom_mode;
    float param_4 = in_geom_radius;
    vec3 param_5;
    vec2 _4606 = hrg_view_vec_to_uv(param, param_1, param_2, param_3, param_4, param_5);
    vec3 pos = param_5;
    vec2 centered_uv = _4606;
    vec2 video_uv = centered_uv + vec2(0.5);
    bool geom_force_correct_tangent_matrix = true;
    if (geom_force_correct_tangent_matrix)
    {
        vec3 _4618;
        if (in_geom_mode < 2.5)
        {
            _4618 = pos;
        }
        else
        {
            _4618 = vec3(pos.x, 0.0, pos.z);
        }
        vec3 normal_base = _4618;
        vec3 normal = normalize(normal_base);
        mat3 param_6 = global_to_local;
        vec3 param_7 = eye_pos_local;
        vec3 param_8 = view_vec_global;
        vec3 param_9 = pos;
        vec3 param_10 = normal;
        vec2 param_11 = output_pixel_size;
        mat3 pixel_to_object = hrg_get_pixel_to_object_matrix(param_6, param_7, param_8, param_9, param_10, param_11);
        vec3 param_12 = pos;
        vec3 param_13 = normal;
        vec2 param_14 = output_aspect;
        float param_15 = in_geom_mode;
        mat3 object_to_tangent = hrg_get_object_to_tangent_matrix(param_12, param_13, param_14, param_15);
        mat3 pixel_to_tangent3x3 = pixel_to_object * object_to_tangent;
        pixel_to_tangent_video_uv = mat2(vec2(pixel_to_tangent3x3[0].x, pixel_to_tangent3x3[0].y), vec2(pixel_to_tangent3x3[1].x, pixel_to_tangent3x3[1].y));
    }
    else
    {
        pixel_to_tangent_video_uv = mat2(vec2(output_pixel_size.x, 0.0), vec2(0.0, output_pixel_size.y));
    }
    return video_uv;
}

vec2 HRG_GetGeomCurvedCoord(vec2 in_coord, float in_geom_mode, float in_geom_radius, float in_geom_view_dist, float in_geom_tilt_angle_x, float in_geom_tilt_angle_y, float in_screen_aspect, float pin_inner_edge, vec2 in_source_size, vec2 in_output_size, out mat2 pixel_to_video_uv)
{
    vec2 output_pixel_size = vec2(1.0) / in_output_size;
    float geom_radius_scaled = in_geom_radius;
    float param = in_screen_aspect;
    vec2 output_aspect = hrg_get_aspect_vector(param);
    vec2 geom_tilt_angle = vec2(in_geom_tilt_angle_x, in_geom_tilt_angle_y);
    vec2 sin_tilt = sin(geom_tilt_angle);
    vec2 cos_tilt = cos(geom_tilt_angle);
    mat3 rot_x_matrix = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos_tilt.y, -sin_tilt.y), vec3(0.0, sin_tilt.y, cos_tilt.y));
    mat3 rot_y_matrix = mat3(vec3(cos_tilt.x, 0.0, sin_tilt.x), vec3(0.0, 1.0, 0.0), vec3(-sin_tilt.x, 0.0, cos_tilt.x));
    mat3 local_to_global = rot_x_matrix * rot_y_matrix;
    mat3 global_to_local = transpose(local_to_global);
    mat3 param_1 = local_to_global;
    vec2 param_2 = output_aspect;
    float param_3 = in_geom_mode;
    float param_4 = geom_radius_scaled;
    float param_5 = in_geom_view_dist;
    vec3 eye_pos_global = hrg_get_ideal_global_eye_pos(param_1, param_2, param_3, param_4, param_5);
    vec3 eye_pos_local = eye_pos_global * global_to_local;
    vec2 curved_coord;
    if (in_geom_mode > 0.5)
    {
        vec2 param_6 = in_coord;
        vec3 param_7 = eye_pos_local;
        vec2 param_8 = output_pixel_size;
        vec2 param_9 = output_aspect;
        float param_10 = in_geom_mode;
        float param_11 = geom_radius_scaled;
        float param_12 = in_geom_view_dist;
        mat3 param_13 = global_to_local;
        mat2 param_14;
        vec2 _4786 = hrg_get_curved_video_uv_coords_and_tangent_matrix(param_6, param_7, param_8, param_9, param_10, param_11, param_12, param_13, param_14);
        pixel_to_video_uv = param_14;
        vec2 ctr_curved_coord = _4786 - vec2(0.5);
        if ((in_geom_tilt_angle_x == 0.0) && (in_geom_tilt_angle_y == 0.0))
        {
            vec2 param_15 = vec2(1.0, 0.5);
            vec3 param_16 = eye_pos_local;
            vec2 param_17 = output_pixel_size;
            vec2 param_18 = output_aspect;
            float param_19 = in_geom_mode;
            float param_20 = geom_radius_scaled;
            float param_21 = in_geom_view_dist;
            mat3 param_22 = global_to_local;
            mat2 param_23;
            vec2 _4815 = hrg_get_curved_video_uv_coords_and_tangent_matrix(param_15, param_16, param_17, param_18, param_19, param_20, param_21, param_22, param_23);
            pixel_to_video_uv = param_23;
            vec2 right_edge_curved_ctr_coord = _4815 - vec2(0.5);
            vec2 param_24 = vec2(0.5, 1.0);
            vec3 param_25 = eye_pos_local;
            vec2 param_26 = output_pixel_size;
            vec2 param_27 = output_aspect;
            float param_28 = in_geom_mode;
            float param_29 = geom_radius_scaled;
            float param_30 = in_geom_view_dist;
            mat3 param_31 = global_to_local;
            mat2 param_32;
            vec2 _4837 = hrg_get_curved_video_uv_coords_and_tangent_matrix(param_24, param_25, param_26, param_27, param_28, param_29, param_30, param_31, param_32);
            pixel_to_video_uv = param_32;
            vec2 bottom_edge_curved_ctr_coord = _4837 - vec2(0.5);
            ctr_curved_coord.x = (ctr_curved_coord.x * 0.5) / right_edge_curved_ctr_coord.x;
            ctr_curved_coord.y = (ctr_curved_coord.y * 0.5) / bottom_edge_curved_ctr_coord.y;
        }
        if (pin_inner_edge == 1.0)
        {
            if (in_geom_tilt_angle_y != 0.0)
            {
                vec2 param_33 = vec2(0.5, 0.0);
                vec3 param_34 = eye_pos_local;
                vec2 param_35 = output_pixel_size;
                vec2 param_36 = output_aspect;
                float param_37 = in_geom_mode;
                float param_38 = geom_radius_scaled;
                float param_39 = in_geom_view_dist;
                mat3 param_40 = global_to_local;
                mat2 param_41;
                vec2 _4880 = hrg_get_curved_video_uv_coords_and_tangent_matrix(param_33, param_34, param_35, param_36, param_37, param_38, param_39, param_40, param_41);
                pixel_to_video_uv = param_41;
                vec2 top_edge_curved_ctr_coord = _4880;
                ctr_curved_coord.y -= top_edge_curved_ctr_coord.y;
            }
            if (in_geom_tilt_angle_x != 0.0)
            {
                vec2 param_42 = vec2(0.0, 0.5);
                vec3 param_43 = eye_pos_local;
                vec2 param_44 = output_pixel_size;
                vec2 param_45 = output_aspect;
                float param_46 = in_geom_mode;
                float param_47 = geom_radius_scaled;
                float param_48 = in_geom_view_dist;
                mat3 param_49 = global_to_local;
                mat2 param_50;
                vec2 _4909 = hrg_get_curved_video_uv_coords_and_tangent_matrix(param_42, param_43, param_44, param_45, param_46, param_47, param_48, param_49, param_50);
                pixel_to_video_uv = param_50;
                vec2 left_edge_curved_ctr_coord = _4909;
                ctr_curved_coord.x -= left_edge_curved_ctr_coord.x;
            }
        }
        curved_coord = ctr_curved_coord + vec2(0.5);
    }
    else
    {
        curved_coord = in_coord;
        pixel_to_video_uv = mat2(vec2(output_pixel_size.x, 0.0), vec2(0.0, output_pixel_size.y));
    }
    return curved_coord;
}

vec2 HSM_GetCurvatureValues(float screen_aspect)
{
    vec2 _5212;
    if (screen_aspect < 1.0)
    {
        _5212 = vec2((((2.0 * global.HSM_CURVATURE_2D_SCALE_SHORT_AXIS) / 100.0) * 2.0) / 100.0, ((global.HSM_CURVATURE_2D_SCALE_LONG_AXIS / 100.0) * 3.0) / 100.0);
    }
    else
    {
        _5212 = vec2(((global.HSM_CURVATURE_2D_SCALE_LONG_AXIS / 100.0) * 3.0) / 100.0, (((2.0 * global.HSM_CURVATURE_2D_SCALE_SHORT_AXIS) / 100.0) * 2.0) / 100.0);
    }
    vec2 curvature_values = _5212;
    return curvature_values;
}

vec2 HSM_GetCrtPiCurvedCoord(inout vec2 in_coord, inout vec2 in_curvature)
{
    in_curvature *= 5.0;
    vec2 barrelScale = vec2(1.0) - (in_curvature * 0.23000000417232513427734375);
    in_coord -= vec2(0.5);
    float _5716;
    if (HSM_CURVATURE_MODE == 2.0)
    {
        _5716 = 0.0;
    }
    else
    {
        _5716 = in_coord.y * in_coord.y;
    }
    float rsq = (in_coord.x * in_coord.x) + _5716;
    in_coord += (in_coord * (in_curvature * rsq));
    in_coord *= barrelScale;
    in_coord += vec2(0.5);
    return in_coord;
}

vec2 HSM_Get2DCurvedCoord(vec2 in_coord, vec2 curvature_values)
{
    vec2 ctr_curved_coord = vec2(0.0);
    vec2 param = in_coord;
    vec2 param_1 = curvature_values;
    vec2 _5747 = HSM_GetCrtPiCurvedCoord(param, param_1);
    ctr_curved_coord = _5747 - vec2(0.5);
    vec2 param_2 = vec2(1.0, 0.5);
    vec2 param_3 = curvature_values;
    vec2 _5754 = HSM_GetCrtPiCurvedCoord(param_2, param_3);
    vec2 right_edge_curved_ctr_coord = _5754 - vec2(0.5);
    ctr_curved_coord.x = (ctr_curved_coord.x * 0.5) / right_edge_curved_ctr_coord.x;
    vec2 param_4 = vec2(0.5, 1.0);
    vec2 param_5 = curvature_values;
    vec2 _5768 = HSM_GetCrtPiCurvedCoord(param_4, param_5);
    vec2 bottom_edge_curved_ctr_coord = _5768 - vec2(0.5);
    ctr_curved_coord.y = (ctr_curved_coord.y * 0.5) / bottom_edge_curved_ctr_coord.y;
    return ctr_curved_coord + vec2(0.5);
}

vec2 HSM_GetCurvedCoord(vec2 in_coord, float curvature_multiplier, float screen_aspect)
{
    if (HSM_CURVATURE_MODE == CURVATURE_MODE_OFF)
    {
        return in_coord;
    }
    float epsilon = 0.00200000009499490261077880859375;
    vec2 adjusted_coord = in_coord;
    float tilt_angle_y = HSM_CURVATURE_3D_TILT_ANGLE_Y;
    float tilt_angle_x = HSM_CURVATURE_3D_TILT_ANGLE_X;
    float pin_inner_edge = 0.0;
    vec2 curved_coord = vec2(0.0);
    if (HSM_CURVATURE_MODE > CURVATURE_MODE_2D_CYLINDER)
    {
        if (HSM_USE_GEOM > 0.5)
        {
            vec2 param = in_coord;
            float param_1 = HSM_CURVATURE_3D_TILT_ANGLE_X;
            float param_2 = HSM_CURVATURE_3D_TILT_ANGLE_Y;
            float param_3 = HSM_CURVATURE_3D_RADIUS;
            float param_4 = HSM_CURVATURE_3D_VIEW_DIST;
            float param_5 = screen_aspect;
            curved_coord = HSM_GetGeomCurvedCoordRetainWidth(param, param_1, param_2, param_3, param_4, param_5);
        }
        else
        {
            float geom_radius_with_mult = HSM_CURVATURE_3D_RADIUS;
            if (HSM_CURVATURE_MODE == CURVATURE_MODE_3D_1)
            {
                geom_radius_with_mult -= 0.4000000059604644775390625;
            }
            if (HSM_CURVATURE_MODE == CURVATURE_MODE_3D_CYLINDER)
            {
                geom_radius_with_mult -= 1.0;
            }
            geom_radius_with_mult *= (1.0 / (curvature_multiplier + epsilon));
            float geom_mode = HSM_CURVATURE_MODE - 2.0;
            vec2 param_6 = adjusted_coord;
            float param_7 = geom_mode;
            float param_8 = geom_radius_with_mult;
            float param_9 = HSM_CURVATURE_3D_VIEW_DIST;
            float param_10 = tilt_angle_x;
            float param_11 = tilt_angle_y;
            float param_12 = screen_aspect;
            float param_13 = pin_inner_edge;
            vec2 param_14 = global.SourceSize.xy;
            vec2 param_15 = global.OutputSize.xy;
            mat2 param_16;
            vec2 _5875 = HRG_GetGeomCurvedCoord(param_6, param_7, param_8, param_9, param_10, param_11, param_12, param_13, param_14, param_15, param_16);
            mat2 pixel_to_video_uv = param_16;
            curved_coord = _5875;
        }
    }
    else
    {
        float param_17 = screen_aspect;
        vec2 curvature_values = HSM_GetCurvatureValues(param_17) * curvature_multiplier;
        vec2 param_18 = adjusted_coord;
        vec2 param_19 = curvature_values;
        curved_coord = HSM_Get2DCurvedCoord(param_18, param_19);
    }
    return curved_coord;
}

vec2 HSM_GetTubeCurvedCoord(vec2 screen_coord, float curvature_scale, vec2 screen_scale, vec2 tube_scale, float screen_aspect, float apply_black_edge_offset)
{
    vec2 black_edge_scale_offset = tube_scale / screen_scale;
    vec2 tube_curved_coord = vec2(0.5);
    if (global.HSM_BZL_USE_INDEPENDENT_CURVATURE == 1.0)
    {
        vec2 _6032;
        if (screen_aspect < 1.0)
        {
            _6032 = vec2((((2.0 * global.HSM_BZL_INDEPENDENT_CURVATURE_SCALE_SHORT_AXIS) / 100.0) * 2.0) / 100.0, ((global.HSM_BZL_INDEPENDENT_CURVATURE_SCALE_LONG_AXIS / 100.0) * 3.0) / 100.0);
        }
        else
        {
            _6032 = vec2(((global.HSM_BZL_INDEPENDENT_CURVATURE_SCALE_LONG_AXIS / 100.0) * 3.0) / 100.0, (((2.0 * global.HSM_BZL_INDEPENDENT_CURVATURE_SCALE_SHORT_AXIS) / 100.0) * 2.0) / 100.0);
        }
        vec2 curvature_values = _6032;
        curvature_values *= ((curvature_scale * global.HSM_BZL_INNER_CURVATURE_SCALE) / 100.0);
        vec2 param = screen_coord;
        vec2 param_1 = curvature_values;
        tube_curved_coord = HSM_Get2DCurvedCoord(param, param_1);
    }
    else
    {
        vec2 param_2 = screen_coord;
        float param_3 = (curvature_scale * global.HSM_BZL_INNER_CURVATURE_SCALE) / 100.0;
        float param_4 = screen_aspect;
        tube_curved_coord = HSM_GetCurvedCoord(param_2, param_3, param_4);
    }
    if (apply_black_edge_offset == 1.0)
    {
        vec2 param_5 = tube_curved_coord;
        vec2 param_6 = black_edge_scale_offset;
        tube_curved_coord = HSM_GetInverseScaledCoord(param_5, param_6);
    }
    return tube_curved_coord;
}

vec2 GetDefaultScreenScale()
{
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    vec2 out_placement_scale = vec2(1.1058499813079833984375, 0.82959997653961181640625);
    out_placement_scale.x /= output_aspect;
    return out_placement_scale;
}

vec2 GetDefaultBezelScale()
{
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    vec2 out_placement_scale = vec2(1.20500004291534423828125, 0.9110000133514404296875);
    out_placement_scale.x /= output_aspect;
    return out_placement_scale;
}

float HSM_GetBezelCoords(vec2 tube_diffuse_coord, vec2 tube_diffuse_scale, vec2 tube_scale, float screen_aspect, bool curve_coords_on, out vec2 bezel_outside_scale, inout vec2 bezel_outside_coord, inout vec2 bezel_outside_curved_coord, inout vec2 frame_outside_curved_coord)
{
    float output_aspect = global.OutputSize.x / global.OutputSize.y;
    vec2 bezel_outer_pos_offset = vec2(0.0, HSM_BZL_OUTER_POSITION_Y);
    vec2 param = tube_diffuse_scale;
    float param_1 = screen_aspect;
    vec2 bezel_outer_scale_offset = HSM_GetOuterBezelScale(param, param_1);
    bezel_outside_coord = tube_diffuse_coord + bezel_outer_pos_offset;
    bezel_outside_curved_coord = bezel_outside_coord;
    if (curve_coords_on)
    {
        bool _7350 = HSM_CURVATURE_MODE > 0.0;
        bool _7358;
        if (_7350)
        {
            _7358 = (HSM_CURVATURE_3D_TILT_ANGLE_X != 0.0) || (HSM_CURVATURE_3D_TILT_ANGLE_Y != 0.0);
        }
        else
        {
            _7358 = _7350;
        }
        if (_7358)
        {
            vec2 param_2 = bezel_outside_curved_coord;
            float param_3 = 0.0;
            float param_4 = (bezel_outer_scale_offset.x * output_aspect) / bezel_outer_scale_offset.y;
            bezel_outside_curved_coord = HSM_GetCurvedCoord(param_2, param_3, param_4);
        }
    }
    vec2 black_edge_scale_offset = tube_scale / tube_diffuse_scale;
    bezel_outside_scale = (tube_diffuse_scale * black_edge_scale_offset) * bezel_outer_scale_offset;
    vec2 param_5 = bezel_outside_coord;
    vec2 param_6 = black_edge_scale_offset * bezel_outer_scale_offset;
    bezel_outside_coord = HSM_GetInverseScaledCoord(param_5, param_6) + vec2(0.0, HSM_BZL_OUTER_POSITION_Y);
    vec2 param_7 = bezel_outside_curved_coord;
    vec2 param_8 = black_edge_scale_offset * bezel_outer_scale_offset;
    bezel_outside_curved_coord = HSM_GetInverseScaledCoord(param_7, param_8) + vec2(0.0, HSM_BZL_OUTER_POSITION_Y);
    frame_outside_curved_coord = (((bezel_outside_curved_coord + vec2(0.0, HSM_FRM_OUTER_POS_Y)) - vec2(0.5)) / vec2(((HSM_FRM_THICKNESS * HSM_FRM_THICKNESS_SCALE_X) / ((tube_diffuse_scale.x / tube_diffuse_scale.y) * output_aspect)) + 1.0, HSM_FRM_THICKNESS + 1.0)) + vec2(0.5);
    if (HSM_BZL_OUTER_CURVATURE_SCALE > 0.0)
    {
        if (curve_coords_on)
        {
            vec2 param_9 = bezel_outside_curved_coord;
            float param_10 = HSM_BZL_OUTER_CURVATURE_SCALE;
            vec2 param_11 = tube_diffuse_scale;
            vec2 param_12 = tube_scale;
            float param_13 = ((bezel_outer_scale_offset.x * global.OutputSize.x) / global.OutputSize.y) / bezel_outer_scale_offset.y;
            float param_14 = 0.0;
            bezel_outside_curved_coord = HSM_GetTubeCurvedCoord(param_9, param_10, param_11, param_12, param_13, param_14);
        }
        if (curve_coords_on)
        {
            if (HSM_FRM_OUTER_CURVATURE_SCALE > 0.0)
            {
                vec2 param_15 = frame_outside_curved_coord;
                float param_16 = HSM_BZL_OUTER_CURVATURE_SCALE * HSM_FRM_OUTER_CURVATURE_SCALE;
                vec2 param_17 = tube_diffuse_scale;
                vec2 param_18 = tube_scale;
                float param_19 = ((bezel_outer_scale_offset.x * global.OutputSize.x) / global.OutputSize.y) / bezel_outer_scale_offset.y;
                float param_20 = 0.0;
                frame_outside_curved_coord = HSM_GetTubeCurvedCoord(param_15, param_16, param_17, param_18, param_19, param_20);
            }
        }
    }
    DEFAULT_SCREEN_SCALE = GetDefaultScreenScale();
    DEFAULT_BEZEL_SCALE = GetDefaultBezelScale();
    return 0.0;
}

bool HSM_GetUseOnCurrentScreenIndex(float dual_screen_vis_mode)
{
    return (dual_screen_vis_mode == 0.0) || (dual_screen_vis_mode == SCREEN_INDEX);
}

vec3 HSM_RGBtoHSV(vec3 c)
{
    vec4 K = vec4(0.0, -0.3333333432674407958984375, 0.666666686534881591796875, -1.0);
    vec4 _2662;
    if (c.y < c.z)
    {
        _2662 = vec4(c.zy, K.wz);
    }
    else
    {
        _2662 = vec4(c.yz, K.xy);
    }
    vec4 p = _2662;
    vec4 _2692;
    if (c.x < p.x)
    {
        _2692 = vec4(p.xyw, c.x);
    }
    else
    {
        _2692 = vec4(c.x, p.yzx);
    }
    vec4 q = _2692;
    float d = q.x - min(q.w, q.y);
    float e = 1.0000000133514319600180897396058e-10;
    return vec3(abs(q.z + ((q.w - q.y) / ((6.0 * d) + e))), d / (q.x + e), q.x);
}

vec3 HSM_HSVtoRGB(vec3 c)
{
    vec4 K = vec4(1.0, 0.666666686534881591796875, 0.3333333432674407958984375, 3.0);
    vec3 p = abs((fract(c.xxx + K.xyz) * 6.0) - K.www);
    return mix(K.xxx, clamp(p - K.xxx, vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;
}

vec4 HSM_ApplyMonochrome(vec4 in_color)
{
    vec4 out_color = in_color;
    vec4 _6837 = out_color;
    vec3 _6843 = pow(_6837.xyz, vec3(global.HSM_MONOCHROME_GAMMA));
    out_color.x = _6843.x;
    out_color.y = _6843.y;
    out_color.z = _6843.z;
    float luma = dot(out_color.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
    luma *= (global.HSM_MONOCHROME_BRIGHTNESS / 100.0);
    vec3 mcolor = vec3(1.0);
    if (global.HSM_MONOCHROME_MODE > 1.5)
    {
        mcolor = (global.HSM_MONOCHROME_MODE > 2.5) ? vec3(0.2549000084400177001953125, 1.0, 0.0) : vec3(1.0, 0.749000012874603271484375, 0.0);
    }
    bool _6883 = (global.HSM_MONOCHROME_HUE_OFFSET / 360.0) != 0.0;
    bool _6892;
    if (!_6883)
    {
        _6892 = (global.HSM_MONOCHROME_SATURATION / 100.0) != 0.0;
    }
    else
    {
        _6892 = _6883;
    }
    if (_6892)
    {
        vec3 param = mcolor;
        vec3 mcolor_hsv = HSM_RGBtoHSV(param);
        mcolor_hsv.x += (global.HSM_MONOCHROME_HUE_OFFSET / 360.0);
        mcolor_hsv.y *= (global.HSM_MONOCHROME_SATURATION / 100.0);
        vec3 param_1 = mcolor_hsv;
        mcolor = HSM_HSVtoRGB(param_1);
    }
    vec3 _6922 = mcolor * pow(luma, 1.0 / global.HSM_MONOCHROME_GAMMA);
    out_color.x = _6922.x;
    out_color.y = _6922.y;
    out_color.z = _6922.z;
    return out_color;
}

vec2 HSM_GetMirrorWrappedCoord(inout vec2 in_coord)
{
    vec2 ctr_coord = in_coord - vec2(0.5);
    bool _5899 = abs(ctr_coord.x) > 0.5;
    bool _5907;
    if (!_5899)
    {
        _5907 = abs(ctr_coord.y) > 0.5;
    }
    else
    {
        _5907 = _5899;
    }
    if (_5907)
    {
        in_coord = ((ctr_coord / vec2(HSM_SCREEN_REFLECTION_SCALE)) + vec2(0.5)) + vec2(HSM_SCREEN_REFLECTION_POS_X, HSM_SCREEN_REFLECTION_POS_Y);
    }
    in_coord = mod(in_coord, vec2(2.0));
    vec2 ctr_mirror_coord = in_coord - vec2(0.5);
    float mirror_x = clamp(clamp(abs(ctr_mirror_coord.x) - 0.5, 0.0, 1.0) * 100000.0, 0.0, 1.0);
    float mirror_y = clamp(clamp(abs(ctr_mirror_coord.y) - 0.5, 0.0, 1.0) * 100000.0, 0.0, 1.0);
    ctr_mirror_coord.x -= (((mirror_x * 2.0) * sign(ctr_mirror_coord.x)) * (abs(ctr_mirror_coord.x) - 0.5));
    ctr_mirror_coord.y -= (((mirror_y * 2.0) * sign(ctr_mirror_coord.y)) * (abs(ctr_mirror_coord.y) - 0.5));
    return ctr_mirror_coord + vec2(0.5);
}

float HSM_GetCornerMask(vec2 in_coord, float screen_aspect, float corner_radius, float edge_sharpness)
{
    vec2 new_coord = min(in_coord, vec2(1.0) - in_coord) * vec2(screen_aspect, 1.0);
    vec2 corner_distance = vec2(max(corner_radius / 1000.0, (1.0 - edge_sharpness) * 0.00999999977648258209228515625));
    new_coord = corner_distance - min(new_coord, corner_distance);
    float _distance = sqrt(dot(new_coord, new_coord));
    return clamp((corner_distance.x - _distance) * ((edge_sharpness * 500.0) + 100.0), 0.0, 1.0);
}

float HSM_GetScreenVignetteFactor(vec2 in_coord)
{
    vec2 param = in_coord;
    vec2 _6578 = HSM_GetMirrorWrappedCoord(param);
    vec2 vpos = _6578;
    vpos = ((vpos - vec2(0.5)) / vec2(1.0099999904632568359375)) + vec2(0.5);
    vpos *= (vec2(1.0) - vpos);
    float vig = ((vpos.x * vpos.y) * (1.0 - (global.HSM_SCREEN_VIGNETTE_STRENGTH / 100.0))) * 50.0;
    vig = min(pow(vig, global.HSM_SCREEN_VIGNETTE_POWER / 100.0), 1.0);
    return vig;
}

bool HSM_GetUseScreenVignette()
{
    bool _6627 = global.HSM_SCREEN_VIGNETTE_ON > 0.5;
    bool _6633;
    if (_6627)
    {
        float param = HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
        _6633 = HSM_GetUseOnCurrentScreenIndex(param);
    }
    else
    {
        _6633 = _6627;
    }
    return _6633;
}

vec2 HSM_GetRotatedNegativeCropAddedSize()
{
    return (global.NegativeCropAddedPassSize.yx * abs(HSM_ROTATE_CORE_IMAGE)) + (global.NegativeCropAddedPassSize.xy * (1.0 - abs(HSM_ROTATE_CORE_IMAGE)));
}

vec2 HSM_RotateCoordinate(vec2 in_coord, float rotation)
{
    if (rotation == 0.0)
    {
        return in_coord;
    }
    float abs_rotation = abs(rotation);
    vec2 ctr_coord = in_coord - vec2(0.5);
    ctr_coord = ((ctr_coord * (1.0 - abs_rotation)) + (vec2(-ctr_coord.y, ctr_coord.x) * (clamp(abs_rotation, 0.0, 1.0) * abs_rotation))) + (vec2(ctr_coord.y, -ctr_coord.x) * (abs(clamp(abs_rotation, -1.0, 0.0)) * abs_rotation));
    if (rotation < 0.0)
    {
        ctr_coord *= (-1.0);
    }
    return ctr_coord + vec2(0.5);
}

vec4 HSM_GetTexSampleFromSampleStartAndSize(sampler2D in_sampler, inout vec2 in_screen_coord, vec2 sample_start_pixel_coord, vec2 window_size)
{
    vec2 core_prepped_size = HSM_GetRotatedNegativeCropAddedSize();
    if (HSM_DUALSCREEN_MODE > 0.0)
    {
        if (HSM_FLIP_CORE_VERTICAL == (-1.0))
        {
            in_screen_coord.y = 1.0 - in_screen_coord.y;
        }
    }
    vec2 px_coord = SAMPLE_AREA_START_PIXEL_COORD + (in_screen_coord * window_size);
    vec2 sample_coord = px_coord / core_prepped_size;
    vec2 param = sample_coord;
    float param_1 = HSM_ROTATE_CORE_IMAGE;
    sample_coord = HSM_RotateCoordinate(param, param_1);
    vec4 out_color = texture(in_sampler, sample_coord);
    return out_color;
}

vec4 HSM_GetCroppedTexSample(sampler2D in_sampler, vec2 in_screen_coord)
{
    vec2 param = in_screen_coord;
    vec2 param_1 = SAMPLE_AREA_START_PIXEL_COORD;
    vec2 param_2 = CROPPED_ROTATED_SIZE;
    vec4 _6572 = HSM_GetTexSampleFromSampleStartAndSize(in_sampler, param, param_1, param_2);
    return _6572;
}

vec4 HSM_ApplyGamma(vec4 in_color, float in_gamma)
{
    vec3 out_color = pow(in_color.xyz, vec3(1.0 / in_gamma));
    return vec4(out_color, in_color.w);
}

vec4 HSM_Linearize(vec4 in_color, float encoded_gamma)
{
    vec4 param = in_color;
    float param_1 = 1.0 / encoded_gamma;
    return HSM_ApplyGamma(param, param_1);
}

vec2 HSM_AddPosScaleToCoord(vec2 in_base_coord, vec2 in_pos, vec2 in_scale)
{
    vec2 positioned_coord = in_base_coord + in_pos;
    vec2 param = positioned_coord;
    vec2 param_1 = in_scale;
    vec2 out_coord = HSM_GetInverseScaledCoord(param, param_1);
    return out_coord;
}

vec2 GetSimpleImageScaledCoord(inout vec2 in_viewport_coord, vec2 in_viewport_unscaled_coord, vec2 in_tube_coord, vec2 in_tube_scale, sampler2D in_sampler, vec2 in_pos, float in_inherit_pos, vec2 in_scale, float in_scale_inherit_mode, float in_keep_aspect, float in_mirror_horz, float in_rotate)
{
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    vec2 coord_ctr = vec2(1.0);
    if (in_scale_inherit_mode == 0.0)
    {
        coord_ctr = in_viewport_unscaled_coord - vec2(0.5);
    }
    if (in_scale_inherit_mode == 1.0)
    {
        coord_ctr = in_viewport_coord - vec2(0.5);
    }
    if (in_scale_inherit_mode == 2.0)
    {
        if ((in_inherit_pos < 0.5) || (HSM_DUALSCREEN_MODE > 0.5))
        {
            coord_ctr = (((in_viewport_coord - vec2(0.5)) / in_tube_scale) * vec2(in_tube_scale.x / in_tube_scale.y, 1.0)) * 0.829699993133544921875;
        }
        else
        {
            coord_ctr = ((in_tube_coord - vec2(0.5)) * vec2(in_tube_scale.x / in_tube_scale.y, 1.0)) * 0.829699993133544921875;
        }
        if (HSM_DUALSCREEN_MODE > 0.5)
        {
            coord_ctr *= 0.5;
        }
    }
    float _5118;
    if (in_mirror_horz == 1.0)
    {
        _5118 = (-1.0) * coord_ctr.x;
    }
    else
    {
        _5118 = coord_ctr.x;
    }
    coord_ctr.x = _5118;
    vec2 param = in_viewport_coord;
    float param_1 = in_rotate;
    in_viewport_coord = HSM_RotateCoordinate(param, param_1);
    vec2 tex_size = vec2(textureSize(in_sampler, 0));
    float _5143;
    if (in_rotate == 1.0)
    {
        _5143 = tex_size.y / tex_size.x;
    }
    else
    {
        _5143 = tex_size.x / tex_size.y;
    }
    float tex_aspect = _5143;
    float _5160;
    if (in_keep_aspect == 1.0)
    {
        _5160 = output_aspect / tex_aspect;
    }
    else
    {
        _5160 = 1.0;
    }
    coord_ctr.x *= _5160;
    float _5174;
    if (in_rotate > 0.5)
    {
        _5174 = global.FinalViewportSize.x / global.FinalViewportSize.y;
    }
    else
    {
        _5174 = 1.0;
    }
    coord_ctr /= vec2(_5174);
    if (in_rotate > 0.5)
    {
        coord_ctr = vec2(-coord_ctr.y, -coord_ctr.x);
    }
    vec2 param_2 = coord_ctr + vec2(0.5);
    vec2 param_3 = in_pos;
    vec2 param_4 = in_scale;
    return HSM_AddPosScaleToCoord(param_2, param_3, param_4);
}

vec4 HSM_GetMipmappedTexSample(sampler2D in_sampler, vec2 in_coord, vec2 in_scale, float in_blend_bias)
{
    vec2 tex_size = vec2(textureSize(in_sampler, 0));
    vec2 scaled_tex_size = in_scale * global.FinalViewportSize.xy;
    float mipmap_lod = log2(tex_size.y / scaled_tex_size.y);
    return textureLod(in_sampler, in_coord, mipmap_lod + in_blend_bias);
}

vec4 HSM_GetNightLightingMultiplyColor(vec2 in_coord, float hue, float saturation, float value, float contrast, float global_ambient_opacity, sampler2D NightLightingImage_1)
{
    vec4 lighting_image = vec4(0.0);
    vec2 param = in_coord;
    vec2 param_1 = vec2(1.0);
    float param_2 = 0.0;
    lighting_image = HSM_GetMipmappedTexSample(NightLightingImage_1, param, param_1, param_2);
    vec4 param_3 = lighting_image;
    float param_4 = 2.2000000476837158203125;
    lighting_image = HSM_Linearize(param_3, param_4);
    lighting_image = ((lighting_image - vec4(0.5)) * contrast) + vec4(0.5);
    if (((hue != 0.0) || (saturation != 1.0)) || (value != 1.0))
    {
        vec3 param_5 = lighting_image.xyz;
        vec3 night_lighting_image_hsv = HSM_RGBtoHSV(param_5);
        night_lighting_image_hsv.x += hue;
        night_lighting_image_hsv.y *= saturation;
        night_lighting_image_hsv.z *= value;
        vec3 param_6 = night_lighting_image_hsv;
        lighting_image = vec4(HSM_HSVtoRGB(param_6), lighting_image.w);
    }
    vec4 _6694 = lighting_image;
    vec3 _6698 = mix(vec3(1.0), _6694.xyz, vec3(global_ambient_opacity));
    lighting_image.x = _6698.x;
    lighting_image.y = _6698.y;
    lighting_image.z = _6698.z;
    return lighting_image;
}

bool HSM_Fill_Ambient_Images(vec2 in_viewport_coord, vec2 in_viewport_unscaled_coord, vec2 in_tube_coord, vec2 in_tube_scale, float in_swap_images, sampler2D in_ambient_sampler, sampler2D in_ambient2_sampler, out vec4 ambient_lighting_image, out vec4 ambient2_lighting_image)
{
    ambient_lighting_image = vec4(1.0);
    ambient2_lighting_image = vec4(1.0);
    if (HSM_AMBIENT1_OPACITY > 0.0)
    {
        float ambient1_scale = HSM_AMBIENT1_SCALE;
        bool _6716 = HSM_AMBIENT1_SCALE_INHERIT_MODE == 1.0;
        bool _6723;
        if (_6716)
        {
            _6723 = (HSM_AMBIENT1_SCALE * HSM_VIEWPORT_ZOOM) < 1.0;
        }
        else
        {
            _6723 = _6716;
        }
        if (_6723)
        {
            ambient1_scale = 1.0 / HSM_VIEWPORT_ZOOM;
        }
        vec2 param = in_viewport_coord;
        vec2 param_1 = in_viewport_unscaled_coord;
        vec2 param_2 = in_tube_coord;
        vec2 param_3 = in_tube_scale;
        vec2 param_4 = vec2(HSM_AMBIENT1_POSITION_X, HSM_AMBIENT1_POSITION_Y);
        float param_5 = HSM_AMBIENT1_POS_INHERIT_MODE;
        vec2 param_6 = vec2(ambient1_scale * HSM_AMBIENT1_SCALE_X, ambient1_scale);
        float param_7 = HSM_AMBIENT1_SCALE_INHERIT_MODE;
        float param_8 = HSM_AMBIENT1_SCALE_KEEP_ASPECT;
        float param_9 = HSM_AMBIENT1_MIRROR_HORZ;
        float param_10 = HSM_AMBIENT1_ROTATE;
        vec2 _6757 = GetSimpleImageScaledCoord(param, param_1, param_2, param_3, in_ambient_sampler, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
        vec2 lighting_coord = _6757;
        vec2 param_11 = lighting_coord;
        float param_12 = HSM_AMBIENT1_HUE;
        float param_13 = HSM_AMBIENT1_SATURATION;
        float param_14 = HSM_AMBIENT1_VALUE;
        float param_15 = HSM_AMBIENT1_CONTRAST;
        float param_16 = HSM_AMBIENT1_OPACITY;
        ambient_lighting_image = HSM_GetNightLightingMultiplyColor(param_11, param_12, param_13, param_14, param_15, param_16, in_ambient_sampler);
    }
    if (HSM_AMBIENT2_OPACITY > 0.0)
    {
        float ambient2_scale = HSM_AMBIENT2_SCALE;
        bool _6778 = HSM_AMBIENT2_SCALE_INHERIT_MODE == 1.0;
        bool _6785;
        if (_6778)
        {
            _6785 = (HSM_AMBIENT2_SCALE * HSM_VIEWPORT_ZOOM) < 1.0;
        }
        else
        {
            _6785 = _6778;
        }
        if (_6785)
        {
            ambient2_scale = 1.0 / HSM_VIEWPORT_ZOOM;
        }
        vec2 param_17 = in_viewport_coord;
        vec2 param_18 = in_viewport_unscaled_coord;
        vec2 param_19 = in_tube_coord;
        vec2 param_20 = in_tube_scale;
        vec2 param_21 = vec2(HSM_AMBIENT2_POSITION_X, HSM_AMBIENT2_POSITION_Y);
        float param_22 = HSM_AMBIENT2_POS_INHERIT_MODE;
        vec2 param_23 = vec2(ambient2_scale * HSM_AMBIENT2_SCALE_X, ambient2_scale);
        float param_24 = HSM_AMBIENT2_SCALE_INHERIT_MODE;
        float param_25 = HSM_AMBIENT2_SCALE_KEEP_ASPECT;
        float param_26 = HSM_AMBIENT2_MIRROR_HORZ;
        float param_27 = HSM_AMBIENT2_ROTATE;
        vec2 _6819 = GetSimpleImageScaledCoord(param_17, param_18, param_19, param_20, in_ambient2_sampler, param_21, param_22, param_23, param_24, param_25, param_26, param_27);
        vec2 lighting2_coord = _6819;
        vec2 param_28 = lighting2_coord;
        float param_29 = HSM_AMBIENT2_HUE;
        float param_30 = HSM_AMBIENT2_SATURATION;
        float param_31 = HSM_AMBIENT2_VALUE;
        float param_32 = HSM_AMBIENT2_CONTRAST;
        float param_33 = HSM_AMBIENT2_OPACITY;
        ambient2_lighting_image = HSM_GetNightLightingMultiplyColor(param_28, param_29, param_30, param_31, param_32, param_33, in_ambient2_sampler);
    }
    return true;
}

bool HSM_GetUseTubeDiffuseImage()
{
    bool _7501 = HSM_TUBE_DIFFUSE_MODE == 1.0;
    bool _7507;
    if (_7501)
    {
        float param = HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
        _7507 = HSM_GetUseOnCurrentScreenIndex(param);
    }
    else
    {
        _7507 = _7501;
    }
    return _7507;
}

bool HSM_GetUseTubeColoredGelImage()
{
    bool _7511 = HSM_TUBE_COLORED_GEL_IMAGE_ON > 0.5;
    bool _7517;
    if (_7511)
    {
        float param = HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
        _7517 = HSM_GetUseOnCurrentScreenIndex(param);
    }
    else
    {
        _7517 = _7511;
    }
    return _7517;
}

bool HSM_GetUseTubeStaticReflection()
{
    bool _7491 = HSM_TUBE_STATIC_REFLECTION_IMAGE_ON > 0.5;
    bool _7497;
    if (_7491)
    {
        float param = HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
        _7497 = HSM_GetUseOnCurrentScreenIndex(param);
    }
    else
    {
        _7497 = _7491;
    }
    return _7497;
}

vec4 HSM_GetPreMultipliedColorLinear(vec4 in_color, float matte_type, float encoded_gamma)
{
    vec4 out_color = in_color;
    if (matte_type == SOURCE_MATTE_WHITE)
    {
        vec4 _2868 = out_color;
        float _2871 = out_color.w;
        vec3 _2877 = clamp(_2868.xyz - vec3(1.0 - _2871), vec3(0.0), vec3(1.0));
        out_color.x = _2877.x;
        out_color.y = _2877.y;
        out_color.z = _2877.z;
    }
    vec4 param = out_color;
    float param_1 = encoded_gamma;
    out_color = HSM_Linearize(param, param_1);
    if (matte_type == SOURCE_MATTE_NONE)
    {
        float _2895 = out_color.w;
        vec4 _2896 = out_color;
        vec3 _2898 = _2896.xyz * _2895;
        out_color.x = _2898.x;
        out_color.y = _2898.y;
        out_color.z = _2898.z;
    }
    return out_color;
}

vec3 HSM_ApplyHSVAdjustment(vec3 in_color_rgb, float in_hue, float in_saturation, float in_brightness, float in_colorize_on, float in_gamma_adjust)
{
    if (!(((((in_colorize_on == 1.0) || (in_hue != 0.0)) || (in_saturation != 1.0)) || (in_brightness != 1.0)) || (in_gamma_adjust != 1.0)))
    {
        return in_color_rgb;
    }
    vec3 param = in_color_rgb;
    vec3 color_hsv = HSM_RGBtoHSV(param);
    if (in_colorize_on > 0.5)
    {
        color_hsv.x = in_hue;
        color_hsv.y = mix(mix(0.0, color_hsv.y, clamp(in_saturation, 0.0, 1.0)), 1.0, clamp(in_saturation - 1.0, 0.0, 1.0));
    }
    else
    {
        color_hsv.x += in_hue;
        color_hsv.y *= in_saturation;
    }
    color_hsv.z *= in_brightness;
    vec3 param_1 = color_hsv;
    vec3 color_rgb = HSM_HSVtoRGB(param_1);
    if (in_gamma_adjust != 1.0)
    {
        vec4 param_2 = vec4(color_rgb.x, color_rgb.y, color_rgb.z, 1.0);
        float param_3 = in_gamma_adjust;
        color_rgb = HSM_ApplyGamma(param_2, param_3).xyz;
    }
    return color_rgb;
}

vec3 HSM_ApplyAmbientImage(vec3 base_image, vec3 ambient_image, float layer_blend_amount)
{
    if (layer_blend_amount > 0.0)
    {
        return (base_image * (1.0 - layer_blend_amount)) + ((base_image * layer_blend_amount) * ambient_image);
    }
    else
    {
        return base_image;
    }
}

float HSM_GetTubeOpacity()
{
    float tube_diffuse_opacity = (HSM_TUBE_DIFFUSE_MODE < 1.5) ? HSM_TUBE_OPACITY : 0.0;
    if (global.HSM_CRT_BLEND_MODE == 2.0)
    {
        tube_diffuse_opacity = 1.0;
    }
    return tube_diffuse_opacity;
}

vec4 HSM_PreMultAlphaBlend(vec4 color_under, vec4 color_over)
{
    vec4 out_color = vec4(color_over.xyz + (color_under.xyz * (1.0 - color_over.w)), clamp(color_under.w + color_over.w, 0.0, 1.0));
    return out_color;
}

vec4 HSM_BlendModeLayerMix(vec4 color_under, inout vec4 color_over, float blend_mode, float layer_opacity)
{
    if (blend_mode == 0.0)
    {
        return color_under;
    }
    if (blend_mode == BLEND_MODE_OFF)
    {
        return color_under;
    }
    color_over.w *= layer_opacity;
    vec4 out_color = vec4(0.0);
    if (blend_mode == BLEND_MODE_NORMAL)
    {
        float _2957 = color_over.w;
        vec4 _2958 = color_over;
        vec3 _2960 = _2958.xyz * _2957;
        color_over.x = _2960.x;
        color_over.y = _2960.y;
        color_over.z = _2960.z;
        vec4 param = color_under;
        vec4 param_1 = color_over;
        out_color = HSM_PreMultAlphaBlend(param, param_1);
    }
    else
    {
        vec4 blend_color = color_under;
        if (blend_mode == BLEND_MODE_ADD)
        {
            vec3 _2984 = color_under.xyz + color_over.xyz;
            blend_color.x = _2984.x;
            blend_color.y = _2984.y;
            blend_color.z = _2984.z;
        }
        if (blend_mode == BLEND_MODE_MULTIPLY)
        {
            vec3 _3000 = color_under.xyz * color_over.xyz;
            blend_color.x = _3000.x;
            blend_color.y = _3000.y;
            blend_color.z = _3000.z;
        }
        out_color = vec4(clamp(mix(color_under.xyz, blend_color.xyz, vec3(color_over.w)), vec3(0.0), vec3(1.0)), color_under.w);
    }
    return out_color;
}

float HHLP_EasePowerOut(inout float x, float in_exponent)
{
    x = 1.0 - max(0.0, min(x, 1.0));
    return 1.0 - pow(x, in_exponent);
}

vec4 HSM_ApplyScanlineMask(vec4 in_color, vec2 screen_scale, inout vec2 in_coord, vec2 in_screen_curved_coord, vec2 in_tube_curved_coord, float in_scanline_opacity)
{
    in_coord = mix(in_coord, in_screen_curved_coord, vec2(global.HSM_FAKE_SCANLINE_CURVATURE / 100.0));
    float scanline_roll_offset = ((mod(float(global.FrameCount), 1280.0) / 1280.0) * global.HSM_FAKE_SCANLINE_ROLL) / 100.0;
    float _6990;
    if (USE_VERTICAL_SCANLINES > 0.5)
    {
        _6990 = in_coord.x;
    }
    else
    {
        _6990 = in_coord.y;
    }
    float scan_axis_pos = _6990;
    scan_axis_pos += scanline_roll_offset;
    vec2 screen_size = global.OutputSize.xy * screen_scale;
    float _7011;
    if (USE_VERTICAL_SCANLINES > 0.5)
    {
        _7011 = screen_size.x;
    }
    else
    {
        _7011 = screen_size.y;
    }
    float scan_axis_screen_scale_res = _7011;
    float _7023;
    if (USE_VERTICAL_SCANLINES > 0.5)
    {
        _7023 = CROPPED_ROTATED_SIZE.x;
    }
    else
    {
        _7023 = CROPPED_ROTATED_SIZE.y;
    }
    float cropped_rotated_scan_res = _7023;
    float _7037;
    if (global.HSM_FAKE_SCANLINE_RES_MODE > 0.5)
    {
        _7037 = global.HSM_FAKE_SCANLINE_RES;
    }
    else
    {
        _7037 = cropped_rotated_scan_res;
    }
    float simulated_scanline_res = _7037;
    float scanline_size = scan_axis_screen_scale_res / simulated_scanline_res;
    if (global.HSM_FAKE_SCANLINE_INT_SCALE == 1.0)
    {
        scanline_size = ceil(scanline_size);
    }
    float scan = mod((scan_axis_pos * scan_axis_screen_scale_res) + (scanline_size / 2.0), scanline_size) / scanline_size;
    float param = smoothstep(0.4000000059604644775390625, 0.9900000095367431640625, ((in_color.x + in_color.y) + in_color.z) / 3.0);
    float param_1 = 2.0;
    float _7083 = HHLP_EasePowerOut(param, param_1);
    float color_brightness_modulation = _7083;
    float scanline_mask = 1.0 - (abs(scan - 0.5) * 2.0);
    scanline_mask = pow(1.0 - scanline_mask, 1.0);
    float final_scanline_mask = clamp(1.0 * scanline_mask, 0.0, 1.0);
    float param_2 = smoothstep(0.4000000059604644775390625, 4.5, ((in_color.x + in_color.y) + in_color.z) / 3.0);
    float param_3 = 2.0;
    float _7110 = HHLP_EasePowerOut(param_2, param_3);
    color_brightness_modulation = _7110;
    final_scanline_mask = clamp(mix(1.0, mix(final_scanline_mask, 1.0, color_brightness_modulation), in_scanline_opacity), 0.0, 1.0);
    vec4 masked_color = in_color;
    masked_color *= (1.0 + (0.5 * in_scanline_opacity));
    masked_color = clamp(masked_color * final_scanline_mask, vec4(0.0), vec4(1.0));
    masked_color.w = in_color.w;
    vec4 crt_darkened_color = mix(in_color, in_color * 0.89999997615814208984375, vec4(global.HSM_FAKE_SCANLINE_OPACITY / 100.0));
    vec2 param_4 = ((in_tube_curved_coord - vec2(0.5)) * 0.99500000476837158203125) + vec2(0.5);
    float param_5 = TUBE_DIFFUSE_ASPECT;
    float param_6 = HSM_BZL_INNER_CORNER_RADIUS_SCALE * global.HSM_GLOBAL_CORNER_RADIUS;
    float param_7 = 0.0500000007450580596923828125;
    float softened_tube_mask = HSM_GetCornerMask(param_4, param_5, param_6, param_7);
    vec4 out_color = mix(crt_darkened_color, masked_color, vec4(softened_tube_mask));
    return clamp(out_color, vec4(0.0), vec4(1.0));
}

float HSM_rand(inout float r)
{
    r = fract((3712.64990234375 * r) + 0.614319980144500732421875);
    return (r - 0.5) * 2.0;
}

vec4 HSM_GetStoichaicBlurredSample(sampler2D in_sampler, vec2 in_coord, float num_samples, float max_blur_size, float blur_ratio)
{
    if (num_samples < 1.0)
    {
        return texture(in_sampler, in_coord);
    }
    float p = (blur_ratio * max_blur_size) / global.SourceSize.y;
    vec4 blurred_color = vec4(0.0);
    float radius = sin(dot(in_coord, vec2(1233.2239990234375, 1743.3349609375)));
    vec2 sample_coord = vec2(0.0);
    vec2 radius_vector;
    if (num_samples < 1.5)
    {
        float param = radius;
        float _6142 = HSM_rand(param);
        radius = param;
        radius_vector.x = _6142;
        float param_1 = radius;
        float _6147 = HSM_rand(param_1);
        radius = param_1;
        radius_vector.y = _6147;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(1.0));
    }
    if (num_samples < 2.5)
    {
        float param_2 = radius;
        float _6169 = HSM_rand(param_2);
        radius = param_2;
        radius_vector.x = _6169;
        float param_3 = radius;
        float _6174 = HSM_rand(param_3);
        radius = param_3;
        radius_vector.y = _6174;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(2.0));
        float param_4 = radius;
        float _6192 = HSM_rand(param_4);
        radius = param_4;
        radius_vector.x = _6192;
        float param_5 = radius;
        float _6197 = HSM_rand(param_5);
        radius = param_5;
        radius_vector.y = _6197;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(2.0));
    }
    if (num_samples > 2.5)
    {
        float param_6 = radius;
        float _6219 = HSM_rand(param_6);
        radius = param_6;
        radius_vector.x = _6219;
        float param_7 = radius;
        float _6224 = HSM_rand(param_7);
        radius = param_7;
        radius_vector.y = _6224;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_8 = radius;
        float _6242 = HSM_rand(param_8);
        radius = param_8;
        radius_vector.x = _6242;
        float param_9 = radius;
        float _6247 = HSM_rand(param_9);
        radius = param_9;
        radius_vector.y = _6247;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_10 = radius;
        float _6265 = HSM_rand(param_10);
        radius = param_10;
        radius_vector.x = _6265;
        float param_11 = radius;
        float _6270 = HSM_rand(param_11);
        radius = param_11;
        radius_vector.y = _6270;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_12 = radius;
        float _6288 = HSM_rand(param_12);
        radius = param_12;
        radius_vector.x = _6288;
        float param_13 = radius;
        float _6293 = HSM_rand(param_13);
        radius = param_13;
        radius_vector.y = _6293;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_14 = radius;
        float _6311 = HSM_rand(param_14);
        radius = param_14;
        radius_vector.x = _6311;
        float param_15 = radius;
        float _6316 = HSM_rand(param_15);
        radius = param_15;
        radius_vector.y = _6316;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_16 = radius;
        float _6334 = HSM_rand(param_16);
        radius = param_16;
        radius_vector.x = _6334;
        float param_17 = radius;
        float _6339 = HSM_rand(param_17);
        radius = param_17;
        radius_vector.y = _6339;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_18 = radius;
        float _6357 = HSM_rand(param_18);
        radius = param_18;
        radius_vector.x = _6357;
        float param_19 = radius;
        float _6362 = HSM_rand(param_19);
        radius = param_19;
        radius_vector.y = _6362;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_20 = radius;
        float _6380 = HSM_rand(param_20);
        radius = param_20;
        radius_vector.x = _6380;
        float param_21 = radius;
        float _6385 = HSM_rand(param_21);
        radius = param_21;
        radius_vector.y = _6385;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_22 = radius;
        float _6403 = HSM_rand(param_22);
        radius = param_22;
        radius_vector.x = _6403;
        float param_23 = radius;
        float _6408 = HSM_rand(param_23);
        radius = param_23;
        radius_vector.y = _6408;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_24 = radius;
        float _6426 = HSM_rand(param_24);
        radius = param_24;
        radius_vector.x = _6426;
        float param_25 = radius;
        float _6431 = HSM_rand(param_25);
        radius = param_25;
        radius_vector.y = _6431;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_26 = radius;
        float _6449 = HSM_rand(param_26);
        radius = param_26;
        radius_vector.x = _6449;
        float param_27 = radius;
        float _6454 = HSM_rand(param_27);
        radius = param_27;
        radius_vector.y = _6454;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
        float param_28 = radius;
        float _6472 = HSM_rand(param_28);
        radius = param_28;
        radius_vector.x = _6472;
        float param_29 = radius;
        float _6477 = HSM_rand(param_29);
        radius = param_29;
        radius_vector.y = _6477;
        sample_coord = in_coord + (radius_vector * p);
        blurred_color += (texture(in_sampler, abs(sample_coord)) / vec4(12.0));
    }
    return blurred_color;
}

vec4 HSM_GetTubeHighlight(inout vec2 tube_curved_coord, bool apply_to_mirror, sampler2D TubeStaticReflectionImage_1)
{
    vec2 param = tube_curved_coord;
    tube_curved_coord = HSM_GetViewportCoordWithFlip(param);
    vec4 out_color = vec4(0.0);
    vec2 mirrored_tube_coord = tube_curved_coord;
    if (apply_to_mirror)
    {
        vec2 param_1 = tube_curved_coord;
        vec2 _7531 = HSM_GetMirrorWrappedCoord(param_1);
        mirrored_tube_coord = _7531;
    }
    float bezel_corner_radius = HSM_BZL_INNER_CORNER_RADIUS_SCALE * global.HSM_GLOBAL_CORNER_RADIUS;
    if (global.HSM_BZL_USE_INDEPENDENT_CURVATURE > 0.0)
    {
        bezel_corner_radius = HSM_BZL_INNER_CORNER_RADIUS_SCALE * 10.0;
    }
    vec2 tube_highlight_coord = ((mirrored_tube_coord - vec2(0.5)) / vec2(HSM_TUBE_STATIC_SCALE * HSM_TUBE_STATIC_SCALE_X, HSM_TUBE_STATIC_SCALE)) + vec2(0.5);
    tube_highlight_coord = ((tube_highlight_coord - vec2(0.5)) / vec2(HSM_TUBE_STATIC_SCALE_X, 1.0)) + vec2(0.5);
    tube_highlight_coord.x = (((tube_highlight_coord.x + HSM_TUBE_STATIC_POS_X) - 0.5) * HSM_FLIP_VIEWPORT_HORIZONTAL) + 0.5;
    tube_highlight_coord.y = (((tube_highlight_coord.y + HSM_TUBE_STATIC_POS_Y) - 0.5) * HSM_FLIP_VIEWPORT_VERTICAL) + 0.5;
    vec2 param_2 = (tube_curved_coord - vec2(0.5)) + vec2(0.5);
    float param_3 = TUBE_DIFFUSE_ASPECT;
    float param_4 = HSM_BZL_INNER_CORNER_RADIUS_SCALE * global.HSM_GLOBAL_CORNER_RADIUS;
    float param_5 = 0.89999997615814208984375;
    float tube_highlight_mask = HSM_GetCornerMask(param_2, param_3, param_4, param_5);
    vec4 tube_highlight_image = vec4(0.0);
    if (HSM_TUBE_STATIC_DITHER_SAMPLES > 0.0)
    {
        vec2 param_6 = tube_highlight_coord;
        float param_7 = HSM_TUBE_STATIC_DITHER_SAMPLES;
        float param_8 = HSM_TUBE_STATIC_DITHER_DISTANCE;
        float param_9 = HSM_TUBE_STATIC_DITHER_AMOUNT;
        tube_highlight_image = HSM_GetStoichaicBlurredSample(TubeStaticReflectionImage_1, param_6, param_7, param_8, param_9);
    }
    else
    {
        vec2 param_10 = tube_highlight_coord;
        vec2 param_11 = TUBE_SCALE;
        float param_12 = 0.0;
        tube_highlight_image = HSM_GetMipmappedTexSample(TubeStaticReflectionImage_1, param_10, param_11, param_12);
    }
    vec4 param_13 = tube_highlight_image;
    float param_14 = 2.2000000476837158203125;
    tube_highlight_image = HSM_Linearize(param_13, param_14) * tube_highlight_mask;
    out_color = (tube_highlight_image * HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY) * tube_highlight_image.w;
    vec4 _7632 = out_color;
    vec3 _7634 = _7632.xyz * HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
    out_color.x = _7634.x;
    out_color.y = _7634.y;
    out_color.z = _7634.z;
    return out_color;
}

vec4 HSM_Apply_Sinden_Lightgun_Border(vec4 in_rgba, vec2 in_tube_diffuse_curved_coord, float in_tube_diffuse_mask, float in_black_edge_corner_radius)
{
    vec2 param = ((in_tube_diffuse_curved_coord - vec2(0.5)) * (vec2(1.0) + vec2((1.0 / TUBE_DIFFUSE_ASPECT) * HSM_SINDEN_BORDER_THICKNESS, HSM_SINDEN_BORDER_THICKNESS))) + vec2(0.5);
    float param_1 = TUBE_DIFFUSE_ASPECT;
    float param_2 = in_black_edge_corner_radius;
    float param_3 = 0.9900000095367431640625;
    float sinden_gun_mask = in_tube_diffuse_mask - HSM_GetCornerMask(param, param_1, param_2, param_3);
    vec4 out_rgba = in_rgba;
    vec3 base_rgb = vec3(1.0);
    vec4 _7209 = out_rgba;
    vec3 _7212 = ((base_rgb * HSM_SINDEN_BORDER_BRIGHTNESS) * sinden_gun_mask) + (_7209.xyz * (1.0 - sinden_gun_mask));
    out_rgba.x = _7212.x;
    out_rgba.y = _7212.y;
    out_rgba.z = _7212.z;
    return out_rgba;
}

vec4 HSM_GetPostCrtPreppedColor(inout vec4 in_color_linear, vec2 VIEWPORT_COORD, vec2 screen_curved_coord, sampler2D source_pass, sampler2D TubeDiffuseImage_1, sampler2D TubeColoredGelImage_1, sampler2D TubeStaticReflectionImage_1, sampler2D BackgroundImage_1, sampler2D BackgroundVertImage_1, sampler2D NightLightingImage_1, sampler2D NightLighting2Image_1)
{
    bool _7646 = global.HSM_MONOCHROME_MODE > 0.5;
    bool _7652;
    if (_7646)
    {
        float param = HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
        _7652 = HSM_GetUseOnCurrentScreenIndex(param);
    }
    else
    {
        _7652 = _7646;
    }
    if (_7652)
    {
        vec4 param_1 = in_color_linear;
        in_color_linear = HSM_ApplyMonochrome(param_1);
    }
    vec4 crt_color = in_color_linear;
    crt_color *= global.post_br;
    vec2 param_2 = screen_curved_coord;
    vec2 _7668 = HSM_GetMirrorWrappedCoord(param_2);
    vec2 mirrored_screen_coord = _7668;
    vec4 out_color = vec4(0.0);
    vec2 param_3 = ((screen_curved_coord - vec2(0.5)) * 0.999000012874603271484375) + vec2(0.5);
    float param_4 = SCREEN_ASPECT;
    float param_5 = global.HSM_GLOBAL_CORNER_RADIUS * (global.HSM_SCREEN_CORNER_RADIUS_SCALE / 100.0);
    float param_6 = 0.89999997615814208984375;
    float screen_mask = HSM_GetCornerMask(param_3, param_4, param_5, param_6);
    vec2 param_7 = TUBE_DIFFUSE_COORD;
    float param_8 = 1.0;
    vec2 param_9 = TUBE_DIFFUSE_SCALE;
    vec2 param_10 = TUBE_SCALE;
    float param_11 = TUBE_DIFFUSE_ASPECT;
    float param_12 = 1.0;
    vec2 tube_curved_coord = HSM_GetTubeCurvedCoord(param_7, param_8, param_9, param_10, param_11, param_12);
    vec2 param_13 = tube_curved_coord;
    vec2 _7706 = HSM_GetMirrorWrappedCoord(param_13);
    vec2 mirrored_tube_coord = _7706;
    vec2 param_14 = mirrored_tube_coord;
    float vignette_factor = HSM_GetScreenVignetteFactor(param_14);
    if (HSM_GetUseScreenVignette())
    {
        float vignette_factor_outside_screen = ((global.HSM_SCREEN_VIGNETTE_IN_REFLECTION / 100.0) * vignette_factor) + ((1.0 - (global.HSM_SCREEN_VIGNETTE_IN_REFLECTION / 100.0)) * 1.0);
        vignette_factor = (screen_mask * vignette_factor) + ((1.0 - screen_mask) * vignette_factor_outside_screen);
        crt_color *= vignette_factor;
    }
    bool _7739 = HSM_AB_COMPARE_SHOW_MODE == 1.0;
    bool _7745;
    if (_7739)
    {
        vec2 param_15 = VIEWPORT_COORD;
        _7745 = HSM_GetIsInABCompareArea(param_15);
    }
    else
    {
        _7745 = _7739;
    }
    if (_7745)
    {
        vec2 ab_screen_coord = (screen_curved_coord * HSM_CRT_CURVATURE_SCALE) + (SCREEN_COORD * (1.0 - HSM_CRT_CURVATURE_SCALE));
        vec2 param_16 = ab_screen_coord;
        vec2 _7759 = HSM_GetMirrorWrappedCoord(param_16);
        ab_screen_coord = _7759;
        vec2 param_17 = ab_screen_coord;
        vec4 source_color = HSM_GetCroppedTexSample(source_pass, param_17);
        vec4 param_18 = source_color;
        float param_19 = global.GAMMA_INPUT;
        source_color = HSM_Linearize(param_18, param_19);
        crt_color = source_color;
    }
    float bezel_corner_radius = HSM_BZL_INNER_CORNER_RADIUS_SCALE * global.HSM_GLOBAL_CORNER_RADIUS;
    if (global.HSM_BZL_USE_INDEPENDENT_CURVATURE > 0.0)
    {
        bezel_corner_radius = HSM_BZL_INNER_CORNER_RADIUS_SCALE * 10.0;
    }
    vec2 param_20 = tube_curved_coord;
    float param_21 = TUBE_DIFFUSE_ASPECT;
    float param_22 = bezel_corner_radius;
    float param_23 = 0.9900000095367431640625;
    float tube_mask = HSM_GetCornerMask(param_20, param_21, param_22, param_23);
    float screen_to_tube_mask_invert = 1.0 - (tube_mask - screen_mask);
    float black_edge_corner_radius = (global.HSM_TUBE_BLACK_EDGE_CORNER_RADIUS_SCALE / 100.0) * global.HSM_GLOBAL_CORNER_RADIUS;
    vec2 param_24 = TUBE_DIFFUSE_COORD;
    float param_25 = global.HSM_TUBE_BLACK_EDGE_CURVATURE_SCALE / 100.0;
    vec2 param_26 = TUBE_DIFFUSE_SCALE;
    vec2 param_27 = TUBE_SCALE;
    float param_28 = TUBE_DIFFUSE_ASPECT;
    float param_29 = 0.0;
    vec2 tube_diffuse_curved_coord = HSM_GetTubeCurvedCoord(param_24, param_25, param_26, param_27, param_28, param_29);
    vec2 param_30 = tube_diffuse_curved_coord;
    float param_31 = TUBE_DIFFUSE_ASPECT;
    float param_32 = black_edge_corner_radius;
    float param_33 = 0.9900000095367431640625;
    float tube_diffuse_mask = HSM_GetCornerMask(param_30, param_31, param_32, param_33);
    float black_edge_mask_invert = 1.0 - (tube_mask - tube_diffuse_mask);
    vec4 _7837 = crt_color;
    vec3 _7839 = _7837.xyz * screen_to_tube_mask_invert;
    crt_color.x = _7839.x;
    crt_color.y = _7839.y;
    crt_color.z = _7839.z;
    vec4 ambient_lighting_image = vec4(1.0);
    vec4 ambient2_lighting_image = vec4(1.0);
    vec2 param_34 = VIEWPORT_COORD;
    vec2 param_35 = VIEWPORT_UNSCALED_COORD;
    vec2 param_36 = TUBE_DIFFUSE_COORD_MIXED_POS;
    vec2 param_37 = TUBE_DIFFUSE_SCALE_1ST_SCREEN;
    float param_38 = HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    vec4 param_39 = ambient_lighting_image;
    vec4 param_40 = ambient2_lighting_image;
    bool _7862 = HSM_Fill_Ambient_Images(param_34, param_35, param_36, param_37, param_38, NightLightingImage_1, NightLighting2Image_1, param_39, param_40);
    ambient_lighting_image = param_39;
    ambient2_lighting_image = param_40;
    vec3 tube_shadow = vec3(1.0);
    bool _7867 = HSM_TUBE_SHADOW_IMAGE_ON > 0.5;
    bool _7881;
    if (_7867)
    {
        bool _7870 = HSM_GetUseTubeDiffuseImage();
        bool _7875;
        if (!_7870)
        {
            _7875 = HSM_GetUseTubeColoredGelImage();
        }
        else
        {
            _7875 = _7870;
        }
        bool _7880;
        if (!_7875)
        {
            _7880 = HSM_GetUseTubeStaticReflection();
        }
        else
        {
            _7880 = _7875;
        }
        _7881 = _7880;
    }
    else
    {
        _7881 = _7867;
    }
    if (_7881)
    {
        vec2 shadow_coord = tube_diffuse_curved_coord;
        vec2 param_41 = shadow_coord;
        vec2 _7888 = HSM_GetMirrorWrappedCoord(param_41);
        shadow_coord = _7888;
        shadow_coord.x = (((shadow_coord.x - HSM_TUBE_SHADOW_IMAGE_POS_X) - 0.5) / HSM_TUBE_SHADOW_IMAGE_SCALE_X) + 0.5;
        shadow_coord.y = (shadow_coord.y + HSM_TUBE_SHADOW_IMAGE_POS_Y) / HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
        float param_42 = TUBE_DIFFUSE_ASPECT;
        vec2 curvature_values = HSM_GetCurvatureValues(param_42) * HSM_TUBE_SHADOW_CURVATURE_SCALE;
        vec2 param_43 = shadow_coord;
        vec2 param_44 = curvature_values;
        shadow_coord = HSM_Get2DCurvedCoord(param_43, param_44);
        shadow_coord.x = (HSM_FLIP_VIEWPORT_HORIZONTAL * (shadow_coord.x - 0.5)) + 0.5;
        shadow_coord.y = (HSM_FLIP_VIEWPORT_VERTICAL * (shadow_coord.y - 0.5)) + 0.5;
        vec2 param_45 = shadow_coord;
        vec2 param_46 = TUBE_SCALE * vec2(HSM_TUBE_SHADOW_IMAGE_SCALE_X, HSM_TUBE_SHADOW_IMAGE_SCALE_Y);
        float param_47 = 0.0;
        vec4 tube_shadow_sample = HSM_GetMipmappedTexSample(TubeShadowImage, param_45, param_46, param_47);
        vec4 param_48 = tube_shadow_sample;
        float param_49 = SOURCE_MATTE_PREMULTIPLIED;
        float param_50 = 2.2000000476837158203125;
        tube_shadow_sample = HSM_GetPreMultipliedColorLinear(param_48, param_49, param_50) * HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
        tube_shadow = vec3(1.0 - HSM_TUBE_SHADOW_IMAGE_OPACITY) + (tube_shadow_sample.xyz * HSM_TUBE_SHADOW_IMAGE_OPACITY);
    }
    float tube_diffuse_mode = (global.HSM_CRT_BLEND_MODE == 2.0) ? 1.0 : HSM_TUBE_DIFFUSE_MODE;
    vec4 tube_diffuse = vec4(0.0, 0.0, 0.0, tube_mask);
    float adjusted_tube_diffuse_amount = (HSM_TUBE_DIFFUSE_MODE == 0.0) ? 0.0 : HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
    if (tube_diffuse_mode == 2.0)
    {
    }
    if (tube_diffuse_mode == 1.0)
    {
        bool _7981 = adjusted_tube_diffuse_amount > 0.0;
        bool _7988;
        if (!_7981)
        {
            _7988 = global.HSM_CRT_BLEND_MODE == 2.0;
        }
        else
        {
            _7988 = _7981;
        }
        if (_7988)
        {
            vec2 diffuse_coord = tube_diffuse_curved_coord;
            vec2 param_51 = diffuse_coord;
            vec2 _7995 = HSM_GetMirrorWrappedCoord(param_51);
            diffuse_coord = _7995;
            diffuse_coord.x = (HSM_FLIP_VIEWPORT_HORIZONTAL * (diffuse_coord.x - 0.5)) + 0.5;
            diffuse_coord.y = (HSM_FLIP_VIEWPORT_VERTICAL * (diffuse_coord.y - 0.5)) + 0.5;
            diffuse_coord = ((diffuse_coord - vec2(0.5)) / (vec2(HSM_TUBE_DIFFUSE_IMAGE_SCALE_X, 1.0) * HSM_TUBE_DIFFUSE_IMAGE_SCALE)) + vec2(0.5);
            vec2 param_52 = diffuse_coord;
            float param_53 = HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
            vec2 param_54 = HSM_RotateCoordinate(param_52, param_53);
            vec2 param_55 = TUBE_SCALE * HSM_TUBE_DIFFUSE_IMAGE_SCALE;
            float param_56 = 0.0;
            tube_diffuse = HSM_GetMipmappedTexSample(TubeDiffuseImage_1, param_54, param_55, param_56);
            vec4 param_57 = vec4(tube_diffuse.xyz, 1.0);
            float param_58 = SOURCE_MATTE_PREMULTIPLIED;
            float param_59 = 2.2000000476837158203125;
            vec3 _8045 = HSM_GetPreMultipliedColorLinear(param_57, param_58, param_59).xyz * HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
            tube_diffuse.x = _8045.x;
            tube_diffuse.y = _8045.y;
            tube_diffuse.z = _8045.z;
            vec3 param_60 = tube_diffuse.xyz;
            float param_61 = HSM_TUBE_DIFFUSE_IMAGE_HUE;
            float param_62 = HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
            float param_63 = HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
            float param_64 = HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
            float param_65 = HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
            vec3 _8065 = HSM_ApplyHSVAdjustment(param_60, param_61, param_62, param_63, param_64, param_65);
            tube_diffuse.x = _8065.x;
            tube_diffuse.y = _8065.y;
            tube_diffuse.z = _8065.z;
            vec4 _8073 = tube_diffuse;
            vec3 _8075 = _8073.xyz * HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
            tube_diffuse.x = _8075.x;
            tube_diffuse.y = _8075.y;
            tube_diffuse.z = _8075.z;
            vec4 _8083 = tube_diffuse;
            vec3 _8085 = _8083.xyz * tube_shadow;
            tube_diffuse.x = _8085.x;
            tube_diffuse.y = _8085.y;
            tube_diffuse.z = _8085.z;
        }
        vec3 param_66 = tube_diffuse.xyz;
        vec3 param_67 = ambient_lighting_image.xyz;
        float param_68 = HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
        vec3 _8100 = HSM_ApplyAmbientImage(param_66, param_67, param_68);
        tube_diffuse.x = _8100.x;
        tube_diffuse.y = _8100.y;
        tube_diffuse.z = _8100.z;
        vec3 param_69 = tube_diffuse.xyz;
        vec3 param_70 = ambient2_lighting_image.xyz;
        float param_71 = HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
        vec3 _8115 = HSM_ApplyAmbientImage(param_69, param_70, param_71);
        tube_diffuse.x = _8115.x;
        tube_diffuse.y = _8115.y;
        tube_diffuse.z = _8115.z;
    }
    tube_diffuse *= HSM_GetTubeOpacity();
    tube_diffuse.w *= tube_mask;
    out_color = tube_diffuse;
    vec4 _8133 = out_color;
    vec3 _8135 = _8133.xyz + crt_color.xyz;
    out_color.x = _8135.x;
    out_color.y = _8135.y;
    out_color.z = _8135.z;
    if (global.HSM_CRT_BLEND_MODE == 0.0)
    {
        out_color = tube_diffuse;
    }
    if (global.HSM_CRT_BLEND_MODE == 1.0)
    {
        vec4 _8155 = out_color;
        vec3 _8157 = _8155.xyz + tube_diffuse.xyz;
        out_color.x = _8157.x;
        out_color.y = _8157.y;
        out_color.z = _8157.z;
    }
    if (global.HSM_CRT_BLEND_MODE == 2.0)
    {
        out_color = clamp(out_color, vec4(0.0), vec4(1.0));
        vec4 param_72 = tube_diffuse;
        vec4 param_73 = out_color;
        float param_74 = BLEND_MODE_MULTIPLY;
        float param_75 = global.HSM_CRT_BLEND_AMOUNT / 100.0;
        vec4 _8184 = HSM_BlendModeLayerMix(param_72, param_73, param_74, param_75);
        out_color = _8184;
    }
    if (HSM_GetUseTubeColoredGelImage())
    {
        vec2 param_76 = tube_diffuse_curved_coord;
        vec2 _8191 = HSM_GetMirrorWrappedCoord(param_76);
        vec2 gel_coord = _8191;
        gel_coord.x = (HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL * (gel_coord.x - 0.5)) + 0.5;
        gel_coord.y = (HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL * (gel_coord.y - 0.5)) + 0.5;
        gel_coord = ((gel_coord - vec2(0.5)) / vec2(HSM_TUBE_COLORED_GEL_IMAGE_SCALE)) + vec2(0.5);
        vec2 param_77 = gel_coord;
        vec2 param_78 = TUBE_SCALE;
        float param_79 = 0.0;
        vec4 gel_image = HSM_GetMipmappedTexSample(TubeColoredGelImage_1, param_77, param_78, param_79);
        vec4 param_80 = gel_image;
        float param_81 = 2.2000000476837158203125;
        gel_image = HSM_Linearize(param_80, param_81) * HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
        if (HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT > 0.0)
        {
            vec4 _8231 = out_color;
            vec4 _8233 = out_color;
            vec3 _8240 = mix(_8231.xyz, _8233.xyz * gel_image.xyz, vec3(HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT));
            out_color.x = _8240.x;
            out_color.y = _8240.y;
            out_color.z = _8240.z;
        }
        if (HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT > 0.0)
        {
            vec4 _8251 = out_color;
            vec4 _8253 = out_color;
            vec3 _8260 = mix(_8251.xyz, _8253.xyz + gel_image.xyz, vec3(HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT));
            out_color.x = _8260.x;
            out_color.y = _8260.y;
            out_color.z = _8260.z;
        }
        if (HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT > 0.0)
        {
            gel_image.w = clamp(gel_image.w - HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD, 0.0, 1.0) / (1.0 - HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD);
            vec4 _8281 = gel_image;
            vec3 _8283 = _8281.xyz * HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
            gel_image.x = _8283.x;
            gel_image.y = _8283.y;
            gel_image.z = _8283.z;
            vec4 _8291 = gel_image;
            vec3 _8293 = _8291.xyz * tube_shadow;
            gel_image.x = _8293.x;
            gel_image.y = _8293.y;
            gel_image.z = _8293.z;
            if (HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT > 0.001000000047497451305389404296875)
            {
                vec4 param_82 = gel_image;
                vec2 param_83 = SCREEN_SCALE;
                vec2 param_84 = SCREEN_COORD;
                vec2 param_85 = screen_curved_coord;
                vec2 param_86 = tube_curved_coord;
                float param_87 = HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
                vec4 _8317 = HSM_ApplyScanlineMask(param_82, param_83, param_84, param_85, param_86, param_87);
                gel_image.x = _8317.xyz.x;
                gel_image.y = _8317.xyz.y;
                gel_image.z = _8317.xyz.z;
            }
            vec3 param_88 = gel_image.xyz;
            vec3 param_89 = ambient_lighting_image.xyz;
            float param_90 = HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
            vec3 _8333 = HSM_ApplyAmbientImage(param_88, param_89, param_90);
            gel_image.x = _8333.x;
            gel_image.y = _8333.y;
            gel_image.z = _8333.z;
            vec3 param_91 = gel_image.xyz;
            vec3 param_92 = ambient2_lighting_image.xyz;
            float param_93 = HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
            vec3 _8348 = HSM_ApplyAmbientImage(param_91, param_92, param_93);
            gel_image.x = _8348.x;
            gel_image.y = _8348.y;
            gel_image.z = _8348.z;
            vec4 param_94 = gel_image;
            vec4 param_95 = vec4(vec3(vignette_factor), 1.0);
            float param_96 = BLEND_MODE_MULTIPLY;
            float param_97 = HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
            vec4 _8368 = HSM_BlendModeLayerMix(param_94, param_95, param_96, param_97);
            gel_image = _8368;
            if (HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL == 0.0)
            {
                vec4 param_98 = out_color;
                vec4 param_99 = gel_image;
                float param_100 = BLEND_MODE_NORMAL;
                float param_101 = HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
                vec4 _8381 = HSM_BlendModeLayerMix(param_98, param_99, param_100, param_101);
                out_color = _8381;
            }
            if (HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL == 1.0)
            {
                vec4 _8387 = gel_image;
                vec3 _8389 = _8387.xyz * tube_shadow;
                gel_image.x = _8389.x;
                gel_image.y = _8389.y;
                gel_image.z = _8389.z;
                vec4 param_102 = vec4(0.0, 0.0, 0.0, 1.0);
                vec4 param_103 = gel_image;
                float param_104 = BLEND_MODE_NORMAL;
                float param_105 = HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
                vec4 _8405 = HSM_BlendModeLayerMix(param_102, param_103, param_104, param_105);
                vec4 normal_blended = _8405;
                out_color = normal_blended + out_color;
            }
        }
    }
    vec4 _8410 = out_color;
    vec3 _8412 = _8410.xyz * black_edge_mask_invert;
    out_color.x = _8412.x;
    out_color.y = _8412.y;
    out_color.z = _8412.z;
    if (HSM_GetUseTubeStaticReflection())
    {
        vec2 param_106 = tube_curved_coord;
        bool param_107 = false;
        vec4 _8426 = HSM_GetTubeHighlight(param_106, param_107, TubeStaticReflectionImage_1);
        vec3 tube_highlight_image = _8426.xyz;
        vec3 param_108 = tube_highlight_image;
        vec3 param_109 = ambient_lighting_image.xyz;
        float param_110 = HSM_TUBE_STATIC_AMBIENT_LIGHTING;
        tube_highlight_image = HSM_ApplyAmbientImage(param_108, param_109, param_110);
        vec3 param_111 = tube_highlight_image;
        vec3 param_112 = ambient2_lighting_image.xyz;
        float param_113 = HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
        tube_highlight_image = HSM_ApplyAmbientImage(param_111, param_112, param_113);
        tube_highlight_image *= ((tube_shadow * HSM_TUBE_STATIC_SHADOW_OPACITY) + vec3(1.0 - HSM_TUBE_STATIC_SHADOW_OPACITY));
        tube_highlight_image = clamp(((tube_highlight_image - vec3(1.0)) * HSM_TUBE_STATIC_BLACK_LEVEL) + vec3(1.0), vec3(0.0), vec3(1.0));
        tube_highlight_image *= ((1.0 - HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY) + (HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY * adjusted_tube_diffuse_amount));
        vec4 _8474 = out_color;
        vec3 _8476 = _8474.xyz + (tube_highlight_image * HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY);
        out_color.x = _8476.x;
        out_color.y = _8476.y;
        out_color.z = _8476.z;
    }
    if (HSM_SINDEN_BORDER_ON > 0.5)
    {
        vec4 param_114 = out_color;
        vec2 param_115 = tube_diffuse_curved_coord;
        float param_116 = tube_diffuse_mask;
        float param_117 = black_edge_corner_radius;
        out_color = HSM_Apply_Sinden_Lightgun_Border(param_114, param_115, param_116, param_117);
    }
    return out_color;
}

void main()
{
    FOLLOW_MODE_SCALE_AND_POS = 0.0;
    FOLLOW_MODE_EXACT = 1.0;
    NEGATIVE_CROP_EXPAND_MULTIPLIER = 0.5;
    MAX_NEGATIVE_CROP = 0.5;
    DEFAULT_SCREEN_ASPECT = 1.3329918384552001953125;
    DEFAULT_BEZEL_ASPECT = 1.32272231578826904296875;
    DEFAULT_SCREEN_SCALE = vec2(0.0);
    DEFAULT_BEZEL_SCALE = vec2(0.0);
    INFOCACHE_MAX_INDEX = 4;
    CACHE_INFO_CHANGED = false;
    CURRENT_FRAME_FROM_CACHE_INFO = 0.0;
    TUBE_DIFFUSE_MASK = 0.0;
    TUBE_MASK = 0.0;
    BEZEL_MASK = 0.0;
    INSIDE_BEZEL_MASK = 0.0;
    OUTSIDE_TUBE_MASK_FOR_IMAGE = 0.0;
    FRAME_MASK = 0.0;
    FRAME_MASK_FOR_IMAGE = 0.0;
    OUTSIDE_BEZEL_MASK = 0.0;
    OUTSIDE_FRAME_MASK_FOR_IMAGE = 0.0;
    OUTSIDE_FRAME_MASK = 0.0;
    CUTOUT_MASK = 0.0;
    SCREEN_INDEX = 1.0;
    SCREEN_ASPECT = 1.0;
    SCREEN_SCALE = vec2(1.0);
    SCREEN_SCALE_WITH_ZOOM = vec2(1.0);
    SCREEN_POS_OFFSET = vec2(0.1500000059604644775390625);
    SCREEN_SCALE_2ND_SCREEN = vec2(1.0);
    SCREEN_POS_OFFSET_1ST_SCREEN = vec2(0.1500000059604644775390625);
    SCREEN_POS_OFFSET_2ND_SCREEN = vec2(0.1500000059604644775390625);
    VIEWPORT_SCALE = vec2(1.0);
    VIEWPORT_POS = vec2(1.0);
    TUBE_SCALE = vec2(1.0);
    TUBE_DIFFUSE_SCALE = vec2(1.0);
    TUBE_DIFFUSE_ASPECT = 1.0;
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = vec2(1.0);
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = vec2(1.0);
    FRAME_SCALE = vec2(1.0);
    BEZEL_OUTSIDE_SCALE = vec2(0.5);
    BACKGROUND_SCALE = vec2(0.5);
    LED_SCALE = vec2(0.5);
    DEVICE_SCALE = vec2(0.5);
    DEVICELED_SCALE = vec2(0.5);
    DECAL_SCALE = vec2(0.5);
    CAB_GLASS_SCALE = vec2(0.5);
    TOP_IMAGE_SCALE = vec2(0.5);
    AVERAGE_LUMA = 0.0;
    USE_VERTICAL_SCANLINES = 0.0;
    SAMPLING_SCANLINE_DIR_MULT = 0.0;
    SAMPLING_OPPOSITE_DIR_MULT = 0.0;
    CORE_SIZE = vec2(1.0);
    ROTATED_CORE_ORIGINAL_SIZE = vec2(1.0);
    ROTATED_CORE_PREPPED_SIZE = vec2(1.0);
    ROTATED_DEREZED_SIZE = vec2(1.0);
    CROPPED_ROTATED_SIZE_WITH_RES_MULT = vec2(1.0);
    CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK = vec2(1.0);
    CROPPED_ROTATED_SIZE = vec2(1.0);
    SAMPLE_AREA_START_PIXEL_COORD = vec2(1.0);
    SCREEN_SIZE = vec2(1.0);
    VIEWPORT_UNSCALED_COORD = vec2(0.5);
    SCREEN_COORD = vec2(0.5);
    TUBE_COORD = vec2(0.5);
    TUBE_DIFFUSE_COORD = vec2(0.5);
    TUBE_DIFFUSE_COORD_MIXED_POS = vec2(0.5);
    BEZEL_OUTSIDE_COORD = vec2(0.5);
    BACKGROUND_COORD = vec2(0.5);
    DEVICE_COORD = vec2(0.5);
    DEVICELED_COORD = vec2(0.5);
    LED_COORD = vec2(0.5);
    DECAL_COORD = vec2(0.5);
    CAB_GLASS_COORD = vec2(0.5);
    TOP_IMAGE_COORD = vec2(0.5);
    SCREEN_CURVED_COORD = vec2(0.5);
    TUBE_CURVED_COORD = vec2(0.5);
    TUBE_DIFFUSE_CURVED_COORD = vec2(0.5);
    BEZEL_OUTSIDE_CURVED_COORD = vec2(0.5);
    FRAME_OUTSIDE_CURVED_COORD = vec2(0.5);
    BACKGROUND_CURVED_COORD = vec2(0.5);
    LED_CURVED_COORD = vec2(0.5);
    DEVICE_CURVED_COORD = vec2(0.5);
    DEVICELED_CURVED_COORD = vec2(0.5);
    DECAL_CURVED_COORD = vec2(0.5);
    CAB_GLASS_CURVED_COORD = vec2(0.5);
    TOP_IMAGE_CURVED_COORD = vec2(0.5);
    HSM_RESOLUTION_DEBUG_ON = global.HSM_RESOLUTION_DEBUG_ON;
    HSM_GLOBAL_GRAPHICS_BRIGHTNESS = global.HSM_GLOBAL_GRAPHICS_BRIGHTNESS / 100.0;
    HSM_STATIC_LAYERS_GAMMA = global.HSM_STATIC_LAYERS_GAMMA;
    HSM_AMBIENT_LIGHTING_OPACITY = global.HSM_AMBIENT_LIGHTING_OPACITY / 100.0;
    HSM_AMBIENT1_OPACITY = ((global.HSM_AMBIENT1_OPACITY / 100.0) * global.HSM_AMBIENT_LIGHTING_OPACITY) / 100.0;
    HSM_AMBIENT2_OPACITY = ((global.HSM_AMBIENT2_OPACITY / 100.0) * global.HSM_AMBIENT_LIGHTING_OPACITY) / 100.0;
    HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE = global.HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    HSM_SINDEN_BORDER_ON = global.HSM_SINDEN_BORDER_ON;
    HSM_SINDEN_BORDER_BRIGHTNESS = global.HSM_SINDEN_BORDER_BRIGHTNESS / 100.0;
    HSM_SINDEN_BORDER_THICKNESS = global.HSM_SINDEN_BORDER_THICKNESS / 100.0;
    HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION = global.HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
    HSM_VIEWPORT_ZOOM = global.HSM_VIEWPORT_ZOOM / 100.0;
    HSM_VIEWPORT_ZOOM_MASK = global.HSM_VIEWPORT_ZOOM_MASK;
    HSM_VIEWPORT_POSITION_X = ((-1.0) * global.HSM_VIEWPORT_POSITION_X) / 1000.0;
    HSM_VIEWPORT_POSITION_Y = ((-1.0) * global.HSM_VIEWPORT_POSITION_Y) / 1000.0;
    HSM_FLIP_VIEWPORT_VERTICAL = -((global.HSM_FLIP_VIEWPORT_VERTICAL * 2.0) - 1.0);
    HSM_FLIP_VIEWPORT_HORIZONTAL = -((global.HSM_FLIP_VIEWPORT_HORIZONTAL * 2.0) - 1.0);
    HSM_FLIP_CORE_VERTICAL = -((global.HSM_FLIP_CORE_VERTICAL * 2.0) - 1.0);
    HSM_FLIP_CORE_HORIZONTAL = -((global.HSM_FLIP_CORE_HORIZONTAL * 2.0) - 1.0);
    HSM_ROTATE_CORE_IMAGE = global.HSM_ROTATE_CORE_IMAGE;
    HSM_ASPECT_RATIO_ORIENTATION = global.HSM_ASPECT_RATIO_ORIENTATION;
    HSM_ASPECT_RATIO_MODE = global.HSM_ASPECT_RATIO_MODE;
    HSM_ASPECT_RATIO_EXPLICIT = global.HSM_ASPECT_RATIO_EXPLICIT;
    HSM_VERTICAL_PRESET = global.HSM_VERTICAL_PRESET;
    HSM_INT_SCALE_MAX_HEIGHT = global.HSM_INT_SCALE_MAX_HEIGHT / 100.0;
    HSM_NON_INTEGER_SCALE = global.HSM_NON_INTEGER_SCALE / 100.0;
    HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER = global.HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
    HSM_PHYSICAL_MONITOR_ASPECT_RATIO = global.HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
    HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE = global.HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
    HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE = global.HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
    HSM_USE_IMAGE_FOR_PLACEMENT = global.HSM_USE_IMAGE_FOR_PLACEMENT;
    HSM_PLACEMENT_IMAGE_USE_HORIZONTAL = global.HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
    HSM_PLACEMENT_IMAGE_MODE = global.HSM_PLACEMENT_IMAGE_MODE;
    HSM_NON_INTEGER_SCALE_OFFSET = global.HSM_NON_INTEGER_SCALE_OFFSET / 100.0;
    HSM_USE_SNAP_TO_CLOSEST_INT_SCALE = global.HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
    float _821;
    if (HSM_USE_SNAP_TO_CLOSEST_INT_SCALE > 0.5)
    {
        _821 = global.HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE / 100.0;
    }
    else
    {
        _821 = 0.0;
    }
    HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE = _821;
    HSM_SCREEN_POSITION_X = global.HSM_SCREEN_POSITION_X / 1000.0;
    HSM_SCREEN_POSITION_Y = ((-1.0) * global.HSM_SCREEN_POSITION_Y) / 1000.0;
    HSM_CROP_MODE = global.HSM_CROP_MODE;
    HSM_CROP_PERCENT_ZOOM = global.HSM_CROP_PERCENT_ZOOM / 100.0;
    HSM_CROP_PERCENT_TOP = global.HSM_CROP_PERCENT_TOP / 100.0;
    HSM_CROP_PERCENT_BOTTOM = global.HSM_CROP_PERCENT_BOTTOM / 100.0;
    HSM_CROP_PERCENT_LEFT = global.HSM_CROP_PERCENT_LEFT / 100.0;
    HSM_CROP_PERCENT_RIGHT = global.HSM_CROP_PERCENT_RIGHT / 100.0;
    HSM_CROP_BLACK_THRESHOLD = global.HSM_CROP_BLACK_THRESHOLD / 100.0;
    HSM_SCANLINE_DIRECTION = global.HSM_SCANLINE_DIRECTION;
    HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR = global.HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR / 100.0;
    HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR = global.HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR / 100.0;
    HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR = global.HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR / 100.0;
    HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR = global.HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR / 100.0;
    HSM_USE_GEOM = 0.0;
    HSM_CURVATURE_MODE = global.HSM_CURVATURE_MODE;
    HSM_CURVATURE_3D_RADIUS = global.HSM_CURVATURE_3D_RADIUS / 100.0;
    HSM_CURVATURE_3D_VIEW_DIST = global.HSM_CURVATURE_3D_VIEW_DIST / 100.0;
    HSM_CURVATURE_3D_TILT_ANGLE_X = global.HSM_CURVATURE_3D_TILT_ANGLE_X / 100.0;
    HSM_CURVATURE_3D_TILT_ANGLE_Y = global.HSM_CURVATURE_3D_TILT_ANGLE_Y / 100.0;
    HSM_CRT_CURVATURE_SCALE = global.HSM_CRT_CURVATURE_SCALE / 100.0;
    HSM_CACHE_GRAPHICS_ON = global.HSM_CACHE_GRAPHICS_ON;
    HSM_CACHE_UPDATE_INDICATOR_MODE = global.HSM_CACHE_UPDATE_INDICATOR_MODE;
    HSM_AB_COMPARE_SHOW_MODE = global.HSM_AB_COMPARE_SHOW_MODE;
    HSM_AB_COMPARE_AREA = global.HSM_AB_COMPARE_AREA;
    HSM_AB_COMPARE_SPLIT_POSITION = global.HSM_AB_COMPARE_SPLIT_POSITION / 100.0;
    HSM_AB_COMPARE_FREEZE_CRT_TUBE = global.HSM_AB_COMPARE_FREEZE_CRT_TUBE;
    HSM_AB_COMPARE_FREEZE_GRAPHICS = global.HSM_AB_COMPARE_FREEZE_GRAPHICS;
    HSM_SHOW_PASS_INDEX = global.HSM_SHOW_PASS_INDEX;
    HSM_SHOW_PASS_APPLY_SCREEN_COORD = global.HSM_SHOW_PASS_APPLY_SCREEN_COORD;
    HSM_SHOW_PASS_ALPHA = global.HSM_SHOW_PASS_ALPHA;
    HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE = global.HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
    HSM_MONOCHROME_DUALSCREEN_VIS_MODE = global.HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_MODE = global.HSM_TUBE_DIFFUSE_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_AMOUNT = global.HSM_TUBE_DIFFUSE_IMAGE_AMOUNT / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON = global.HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
    HSM_TUBE_DIFFUSE_IMAGE_HUE = global.HSM_TUBE_DIFFUSE_IMAGE_HUE / 360.0;
    HSM_TUBE_DIFFUSE_IMAGE_SATURATION = global.HSM_TUBE_DIFFUSE_IMAGE_SATURATION / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS = global.HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_GAMMA = global.HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING = global.HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING = global.HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE = global.HSM_TUBE_DIFFUSE_IMAGE_SCALE / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE_X = global.HSM_TUBE_DIFFUSE_IMAGE_SCALE_X / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_ROTATION = global.HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
    HSM_TUBE_SHADOW_IMAGE_ON = global.HSM_TUBE_SHADOW_IMAGE_ON;
    HSM_TUBE_SHADOW_IMAGE_OPACITY = global.HSM_TUBE_SHADOW_IMAGE_OPACITY / 100.0;
    HSM_TUBE_SHADOW_IMAGE_POS_X = global.HSM_TUBE_SHADOW_IMAGE_POS_X / 100.0;
    HSM_TUBE_SHADOW_IMAGE_POS_Y = global.HSM_TUBE_SHADOW_IMAGE_POS_Y / 100.0;
    HSM_TUBE_SHADOW_IMAGE_SCALE_X = global.HSM_TUBE_SHADOW_IMAGE_SCALE_X / 100.0;
    HSM_TUBE_SHADOW_IMAGE_SCALE_Y = global.HSM_TUBE_SHADOW_IMAGE_SCALE_Y / 100.0;
    HSM_TUBE_SHADOW_CURVATURE_SCALE = global.HSM_TUBE_SHADOW_CURVATURE_SCALE / 100.0;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_ON = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY / 100.0;
    HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY = global.HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY / 100.0;
    HSM_TUBE_STATIC_BLACK_LEVEL = (global.HSM_TUBE_STATIC_BLACK_LEVEL / 1000.0) + 1.0;
    HSM_TUBE_STATIC_AMBIENT_LIGHTING = global.HSM_TUBE_STATIC_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_STATIC_AMBIENT2_LIGHTING = global.HSM_TUBE_STATIC_AMBIENT2_LIGHTING / 100.0;
    HSM_TUBE_STATIC_SCALE = global.HSM_TUBE_STATIC_SCALE / 100.0;
    HSM_TUBE_STATIC_SCALE_X = global.HSM_TUBE_STATIC_SCALE_X / 100.0;
    HSM_TUBE_STATIC_POS_X = global.HSM_TUBE_STATIC_POS_X / (-1000.0);
    HSM_TUBE_STATIC_POS_Y = global.HSM_TUBE_STATIC_POS_Y / 1000.0;
    HSM_TUBE_STATIC_SHADOW_OPACITY = global.HSM_TUBE_STATIC_SHADOW_OPACITY / 100.0;
    HSM_TUBE_STATIC_DITHER_SAMPLES = global.HSM_TUBE_STATIC_DITHER_SAMPLES;
    HSM_TUBE_STATIC_DITHER_DISTANCE = global.HSM_TUBE_STATIC_DITHER_DISTANCE;
    HSM_TUBE_STATIC_DITHER_AMOUNT = global.HSM_TUBE_STATIC_DITHER_AMOUNT;
    HSM_TUBE_OPACITY = global.HSM_TUBE_OPACITY / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_ON = global.HSM_TUBE_COLORED_GEL_IMAGE_ON;
    HSM_TUBE_COLORED_GEL_IMAGE_SCALE = global.HSM_TUBE_COLORED_GEL_IMAGE_SCALE / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL = -((global.HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL * 2.0) - 1.0);
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL = -((global.HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL * 2.0) - 1.0);
    HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD = global.HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING = global.HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING = global.HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING / 100.0;
    HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL = 0.0;
    HSM_DUALSCREEN_MODE = global.HSM_DUALSCREEN_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE = global.HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS = global.HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET = global.HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET / 1000.0;
    HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION = global.HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / 1000.0;
    HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE = global.HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
    HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS = global.HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS / 1000.0;
    HSM_2ND_SCREEN_ASPECT_RATIO_MODE = global.HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
    HSM_2ND_SCREEN_INDEPENDENT_SCALE = global.HSM_2ND_SCREEN_INDEPENDENT_SCALE;
    HSM_2ND_SCREEN_SCALE_OFFSET = global.HSM_2ND_SCREEN_SCALE_OFFSET / 100.0;
    HSM_2ND_SCREEN_POS_X = global.HSM_2ND_SCREEN_POS_X / 1000.0;
    HSM_2ND_SCREEN_POS_Y = global.HSM_2ND_SCREEN_POS_Y / 1000.0;
    HSM_2ND_SCREEN_CROP_PERCENT_ZOOM = global.HSM_2ND_SCREEN_CROP_PERCENT_ZOOM / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_TOP = global.HSM_2ND_SCREEN_CROP_PERCENT_TOP / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM = global.HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_LEFT = global.HSM_2ND_SCREEN_CROP_PERCENT_LEFT / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_RIGHT = global.HSM_2ND_SCREEN_CROP_PERCENT_RIGHT / 100.0;
    HSM_SCREEN_REFLECTION_SCALE = global.HSM_SCREEN_REFLECTION_SCALE / 100.0;
    HSM_SCREEN_REFLECTION_POS_X = global.HSM_SCREEN_REFLECTION_POS_X / 600.0;
    HSM_SCREEN_REFLECTION_POS_Y = global.HSM_SCREEN_REFLECTION_POS_Y / 600.0;
    HSM_AMBIENT1_HUE = global.HSM_AMBIENT1_HUE / 360.0;
    HSM_AMBIENT1_SATURATION = global.HSM_AMBIENT1_SATURATION / 100.0;
    HSM_AMBIENT1_VALUE = global.HSM_AMBIENT1_VALUE / 100.0;
    HSM_AMBIENT1_CONTRAST = global.HSM_AMBIENT1_CONTRAST / 100.0;
    HSM_AMBIENT1_SCALE_KEEP_ASPECT = global.HSM_AMBIENT1_SCALE_KEEP_ASPECT;
    HSM_AMBIENT1_SCALE_INHERIT_MODE = global.HSM_AMBIENT1_SCALE_INHERIT_MODE;
    HSM_AMBIENT1_SCALE = global.HSM_AMBIENT1_SCALE / 100.0;
    HSM_AMBIENT1_SCALE_X = global.HSM_AMBIENT1_SCALE_X / 100.0;
    HSM_AMBIENT1_ROTATE = global.HSM_AMBIENT1_ROTATE;
    HSM_AMBIENT1_MIRROR_HORZ = global.HSM_AMBIENT1_MIRROR_HORZ;
    HSM_AMBIENT1_POS_INHERIT_MODE = global.HSM_AMBIENT1_POS_INHERIT_MODE;
    HSM_AMBIENT1_POSITION_X = global.HSM_AMBIENT1_POSITION_X / (-1000.0);
    HSM_AMBIENT1_POSITION_Y = ((-1.0) * global.HSM_AMBIENT1_POSITION_Y) / (-1000.0);
    HSM_AMBIENT1_DITHERING_SAMPLES = 0.0;
    HSM_AMBIENT2_HUE = global.HSM_AMBIENT2_HUE / 360.0;
    HSM_AMBIENT2_SATURATION = global.HSM_AMBIENT2_SATURATION / 100.0;
    HSM_AMBIENT2_VALUE = global.HSM_AMBIENT2_VALUE / 100.0;
    HSM_AMBIENT2_CONTRAST = global.HSM_AMBIENT2_CONTRAST / 100.0;
    HSM_AMBIENT2_SCALE_KEEP_ASPECT = global.HSM_AMBIENT2_SCALE_KEEP_ASPECT;
    HSM_AMBIENT2_SCALE_INHERIT_MODE = global.HSM_AMBIENT2_SCALE_INHERIT_MODE;
    HSM_AMBIENT2_SCALE = global.HSM_AMBIENT2_SCALE / 100.0;
    HSM_AMBIENT2_SCALE_X = global.HSM_AMBIENT2_SCALE_X / 100.0;
    HSM_AMBIENT2_ROTATE = global.HSM_AMBIENT2_ROTATE;
    HSM_AMBIENT2_MIRROR_HORZ = global.HSM_AMBIENT2_MIRROR_HORZ;
    HSM_AMBIENT2_POS_INHERIT_MODE = global.HSM_AMBIENT2_POS_INHERIT_MODE;
    HSM_AMBIENT2_POSITION_X = global.HSM_AMBIENT2_POSITION_X / (-1000.0);
    HSM_AMBIENT2_POSITION_Y = ((-1.0) * global.HSM_AMBIENT2_POSITION_Y) / (-1000.0);
    HSM_BZL_OPACITY = global.HSM_BZL_OPACITY / 100.0;
    HSM_BZL_BLEND_MODE = global.HSM_BZL_BLEND_MODE;
    HSM_BZL_WIDTH = global.HSM_BZL_WIDTH * 0.0008623999892733991146087646484375;
    HSM_BZL_HEIGHT = global.HSM_BZL_HEIGHT * 0.000873200013302266597747802734375;
    HSM_BZL_INNER_CORNER_RADIUS_SCALE = global.HSM_BZL_INNER_CORNER_RADIUS_SCALE / 100.0;
    HSM_BZL_INNER_EDGE_THICKNESS = global.HSM_BZL_INNER_EDGE_THICKNESS * 7.0000001869630068540573120117188e-05;
    HSM_BZL_INNER_EDGE_SHARPNESS = global.HSM_BZL_INNER_EDGE_SHARPNESS / 100.0;
    HSM_BZL_OUTER_POSITION_Y = global.HSM_BZL_OUTER_POSITION_Y / 2000.0;
    HSM_BZL_OUTER_CURVATURE_SCALE = global.HSM_BZL_OUTER_CURVATURE_SCALE / 100.0;
    HSM_BZL_OUTER_CORNER_RADIUS_SCALE = (0.89999997615814208984375 * global.HSM_BZL_OUTER_CORNER_RADIUS_SCALE) / 100.0;
    HSM_BZL_NOISE = global.HSM_BZL_NOISE / 100.0;
    HSM_BZL_INNER_EDGE_SHADOW = global.HSM_BZL_INNER_EDGE_SHADOW / 100.0;
    HSM_BZL_BRIGHTNESS = global.HSM_BZL_BRIGHTNESS / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_TOP = global.HSM_BZL_BRIGHTNESS_MULT_TOP / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_BOTTOM = global.HSM_BZL_BRIGHTNESS_MULT_BOTTOM / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDES = global.HSM_BZL_BRIGHTNESS_MULT_SIDES / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT = global.HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT = global.HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT / 100.0;
    HSM_BZL_HIGHLIGHT = global.HSM_BZL_HIGHLIGHT / 100.0;
    HSM_BZL_COLOR_HUE = global.HSM_BZL_COLOR_HUE / 360.0;
    HSM_BZL_COLOR_SATURATION = global.HSM_BZL_COLOR_SATURATION / 100.0;
    HSM_BZL_COLOR_VALUE = global.HSM_BZL_COLOR_VALUE / 100.0;
    HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_FRM_USE_INDEPENDENT_COLOR = global.HSM_FRM_USE_INDEPENDENT_COLOR;
    HSM_FRM_COLOR_HUE = global.HSM_FRM_COLOR_HUE / 360.0;
    HSM_FRM_COLOR_SATURATION = global.HSM_FRM_COLOR_SATURATION / 100.0;
    HSM_FRM_COLOR_VALUE = global.HSM_FRM_COLOR_VALUE / 100.0;
    HSM_FRM_OPACITY = global.HSM_FRM_OPACITY / 100.0;
    HSM_FRM_BLEND_MODE = 1.0;
    HSM_FRM_TEXTURE_OPACITY = global.HSM_FRM_TEXTURE_OPACITY / 100.0;
    HSM_FRM_TEXTURE_BLEND_MODE = global.HSM_FRM_TEXTURE_BLEND_MODE;
    HSM_FRM_NOISE = global.HSM_FRM_NOISE / 100.0;
    HSM_FRM_INNER_EDGE_THICKNESS = global.HSM_FRM_INNER_EDGE_THICKNESS * 2.9999999242136254906654357910156e-05;
    HSM_FRM_THICKNESS = global.HSM_FRM_THICKNESS * 0.00069999997504055500030517578125;
    HSM_FRM_THICKNESS_SCALE_X = global.HSM_FRM_THICKNESS_SCALE_X / 100.0;
    HSM_FRM_OUTER_POS_Y = global.HSM_FRM_OUTER_POS_Y / 100.0;
    HSM_FRM_OUTER_CURVATURE_SCALE = global.HSM_FRM_OUTER_CURVATURE_SCALE / 100.0;
    HSM_FRM_OUTER_CORNER_RADIUS = global.HSM_FRM_OUTER_CORNER_RADIUS;
    HSM_FRM_OUTER_EDGE_THICKNESS = global.HSM_FRM_OUTER_EDGE_THICKNESS * 5.9999998484272509813308715820312e-05;
    HSM_FRM_OUTER_EDGE_SHADING = global.HSM_FRM_OUTER_EDGE_SHADING / 100.0;
    HSM_FRM_SHADOW_OPACITY = global.HSM_FRM_SHADOW_OPACITY / 100.0;
    HSM_FRM_SHADOW_WIDTH = global.HSM_FRM_SHADOW_WIDTH / 1000.0;
    HSM_REFLECT_CORNER_FADE = global.HSM_REFLECT_CORNER_FADE / 100.0;
    HSM_REFLECT_CORNER_FADE_DISTANCE = global.HSM_REFLECT_CORNER_FADE_DISTANCE / 100.0;
    HSM_REFLECT_CORNER_INNER_SPREAD = global.HSM_REFLECT_CORNER_INNER_SPREAD / 100.0;
    HSM_REFLECT_CORNER_OUTER_SPREAD = global.HSM_REFLECT_CORNER_OUTER_SPREAD / 100.0;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP = global.HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM = global.HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
    HSM_REFLECT_CORNER_SPREAD_FALLOFF = global.HSM_REFLECT_CORNER_SPREAD_FALLOFF;
    HSM_BG_LAYER_ORDER = global.HSM_BG_LAYER_ORDER;
    HSM_VIEWPORT_VIGNETTE_LAYER_ORDER = global.HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
    HSM_LED_LAYER_ORDER = global.HSM_LED_LAYER_ORDER;
    HSM_DEVICE_LAYER_ORDER = global.HSM_DEVICE_LAYER_ORDER;
    HSM_DEVICELED_LAYER_ORDER = global.HSM_DEVICELED_LAYER_ORDER;
    HSM_CRT_LAYER_ORDER = global.HSM_CRT_LAYER_ORDER;
    HSM_DECAL_LAYER_ORDER = global.HSM_DECAL_LAYER_ORDER;
    HSM_CAB_GLASS_LAYER_ORDER = global.HSM_CAB_GLASS_LAYER_ORDER;
    HSM_TOP_LAYER_ORDER = global.HSM_TOP_LAYER_ORDER;
    HSM_CUTOUT_ASPECT_MODE = global.HSM_CUTOUT_ASPECT_MODE;
    HSM_CUTOUT_EXPLICIT_ASPECT = global.HSM_CUTOUT_EXPLICIT_ASPECT;
    HSM_CUTOUT_FOLLOW_LAYER = global.HSM_CUTOUT_FOLLOW_LAYER;
    HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM = global.HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
    HSM_CUTOUT_SCALE = global.HSM_CUTOUT_SCALE / 100.0;
    HSM_CUTOUT_SCALE_X = global.HSM_CUTOUT_SCALE_X / 100.0;
    HSM_CUTOUT_POS_X = global.HSM_CUTOUT_POS_X / (-100.0);
    HSM_CUTOUT_POS_Y = global.HSM_CUTOUT_POS_Y / 100.0;
    HSM_CUTOUT_CORNER_RADIUS = global.HSM_CUTOUT_CORNER_RADIUS;
    HSM_LAYERING_DEBUG_MASK_MODE = global.HSM_LAYERING_DEBUG_MASK_MODE;
    HSM_BG_OPACITY = global.HSM_BG_OPACITY / 100.0;
    HSM_BG_COLORIZE_ON = global.HSM_BG_COLORIZE_ON;
    HSM_BG_HUE = global.HSM_BG_HUE / 360.0;
    HSM_BG_SATURATION = global.HSM_BG_SATURATION / 100.0;
    HSM_BG_BRIGHTNESS = global.HSM_BG_BRIGHTNESS / 100.0;
    HSM_BG_GAMMA = global.HSM_BG_GAMMA;
    HSM_BG_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_BG_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_BG_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_BG_BLEND_MODE = global.HSM_BG_BLEND_MODE;
    HSM_BG_SOURCE_MATTE_TYPE = global.HSM_BG_SOURCE_MATTE_TYPE;
    HSM_BG_MIPMAPPING_BLEND_BIAS = global.HSM_BG_MIPMAPPING_BLEND_BIAS;
    HSM_BG_MASK_MODE = global.HSM_BG_MASK_MODE;
    HSM_BG_CUTOUT_MODE = global.HSM_BG_CUTOUT_MODE;
    HSM_BG_DUALSCREEN_VIS_MODE = global.HSM_BG_DUALSCREEN_VIS_MODE;
    HSM_BG_FOLLOW_LAYER = global.HSM_BG_FOLLOW_LAYER;
    HSM_BG_FOLLOW_MODE = global.HSM_BG_FOLLOW_MODE;
    HSM_BG_FOLLOW_FULL_USES_ZOOM = global.HSM_BG_FOLLOW_FULL_USES_ZOOM;
    HSM_BG_FILL_MODE = global.HSM_BG_FILL_MODE;
    HSM_BG_SPLIT_PRESERVE_CENTER = global.HSM_BG_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_BG_SPLIT_REPEAT_WIDTH = global.HSM_BG_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_BG_SCALE = global.HSM_BG_SCALE / 100.0;
    HSM_BG_SCALE_X = global.HSM_BG_SCALE_X / 100.0;
    HSM_BG_POS_X = global.HSM_BG_POS_X / (-100.0);
    HSM_BG_POS_Y = global.HSM_BG_POS_Y / 100.0;
    HSM_BG_WRAP_MODE = global.HSM_BG_WRAP_MODE;
    HSM_VIEWPORT_VIGNETTE_OPACITY = global.HSM_VIEWPORT_VIGNETTE_OPACITY / 100.0;
    HSM_VIEWPORT_VIGNETTE_MASK_MODE = global.HSM_VIEWPORT_VIGNETTE_MASK_MODE;
    HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE = global.HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
    HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER = global.HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
    HSM_VIEWPORT_VIGNETTE_SCALE = global.HSM_VIEWPORT_VIGNETTE_SCALE / 100.0;
    HSM_VIEWPORT_VIGNETTE_SCALE_X = global.HSM_VIEWPORT_VIGNETTE_SCALE_X / 100.0;
    HSM_VIEWPORT_VIGNETTE_POS_X = global.HSM_VIEWPORT_VIGNETTE_POS_X / (-100.0);
    HSM_VIEWPORT_VIGNETTE_POS_Y = global.HSM_VIEWPORT_VIGNETTE_POS_Y / 100.0;
    HSM_LED_OPACITY = global.HSM_LED_OPACITY / 100.0;
    HSM_LED_COLORIZE_ON = global.HSM_LED_COLORIZE_ON;
    HSM_LED_HUE = global.HSM_LED_HUE / 360.0;
    HSM_LED_SATURATION = global.HSM_LED_SATURATION / 100.0;
    HSM_LED_BRIGHTNESS = global.HSM_LED_BRIGHTNESS / 100.0;
    HSM_LED_GAMMA = global.HSM_LED_GAMMA;
    HSM_LED_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_LED_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_LED_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_LED_BLEND_MODE = global.HSM_LED_BLEND_MODE;
    HSM_LED_SOURCE_MATTE_TYPE = global.HSM_LED_SOURCE_MATTE_TYPE;
    HSM_LED_MASK_MODE = global.HSM_LED_MASK_MODE;
    HSM_LED_MIPMAPPING_BLEND_BIAS = global.HSM_LED_MIPMAPPING_BLEND_BIAS;
    HSM_LED_CUTOUT_MODE = global.HSM_LED_CUTOUT_MODE;
    HSM_LED_DUALSCREEN_VIS_MODE = global.HSM_LED_DUALSCREEN_VIS_MODE;
    HSM_LED_FOLLOW_LAYER = global.HSM_LED_FOLLOW_LAYER;
    HSM_LED_FOLLOW_MODE = global.HSM_LED_FOLLOW_MODE;
    HSM_LED_FOLLOW_FULL_USES_ZOOM = global.HSM_LED_FOLLOW_FULL_USES_ZOOM;
    HSM_LED_FILL_MODE = global.HSM_LED_FILL_MODE;
    HSM_LED_SPLIT_PRESERVE_CENTER = global.HSM_LED_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_LED_SPLIT_REPEAT_WIDTH = global.HSM_LED_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_LED_SCALE = global.HSM_LED_SCALE / 100.0;
    HSM_LED_SCALE_X = global.HSM_LED_SCALE_X / 100.0;
    HSM_LED_POS_X = global.HSM_LED_POS_X / (-100.0);
    HSM_LED_POS_Y = global.HSM_LED_POS_Y / 100.0;
    HSM_DEVICE_OPACITY = global.HSM_DEVICE_OPACITY / 100.0;
    HSM_DEVICE_COLORIZE_ON = global.HSM_DEVICE_COLORIZE_ON;
    HSM_DEVICE_HUE = global.HSM_DEVICE_HUE / 360.0;
    HSM_DEVICE_SATURATION = global.HSM_DEVICE_SATURATION / 100.0;
    HSM_DEVICE_BRIGHTNESS = global.HSM_DEVICE_BRIGHTNESS / 100.0;
    HSM_DEVICE_GAMMA = global.HSM_DEVICE_GAMMA;
    HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICE_BLEND_MODE = global.HSM_DEVICE_BLEND_MODE;
    HSM_DEVICE_SOURCE_MATTE_TYPE = global.HSM_DEVICE_SOURCE_MATTE_TYPE;
    HSM_DEVICE_MASK_MODE = global.HSM_DEVICE_MASK_MODE;
    HSM_DEVICE_MIPMAPPING_BLEND_BIAS = global.HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICE_CUTOUT_MODE = global.HSM_DEVICE_CUTOUT_MODE;
    HSM_DEVICE_DUALSCREEN_VIS_MODE = global.HSM_DEVICE_DUALSCREEN_VIS_MODE;
    HSM_DEVICE_FOLLOW_LAYER = global.HSM_DEVICE_FOLLOW_LAYER;
    HSM_DEVICE_FOLLOW_MODE = global.HSM_DEVICE_FOLLOW_MODE;
    HSM_DEVICE_FOLLOW_FULL_USES_ZOOM = global.HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICE_FILL_MODE = global.HSM_DEVICE_FILL_MODE;
    HSM_DEVICE_SPLIT_PRESERVE_CENTER = global.HSM_DEVICE_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DEVICE_SPLIT_REPEAT_WIDTH = global.HSM_DEVICE_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DEVICE_SCALE = global.HSM_DEVICE_SCALE / 100.0;
    HSM_DEVICE_SCALE_X = global.HSM_DEVICE_SCALE_X / 100.0;
    HSM_DEVICE_POS_X = global.HSM_DEVICE_POS_X / (-100.0);
    HSM_DEVICE_POS_Y = global.HSM_DEVICE_POS_Y / 100.0;
    HSM_DEVICELED_OPACITY = global.HSM_DEVICELED_OPACITY / 100.0;
    HSM_DEVICELED_COLORIZE_ON = global.HSM_DEVICELED_COLORIZE_ON;
    HSM_DEVICELED_HUE = global.HSM_DEVICELED_HUE / 360.0;
    HSM_DEVICELED_SATURATION = global.HSM_DEVICELED_SATURATION / 100.0;
    HSM_DEVICELED_BRIGHTNESS = global.HSM_DEVICELED_BRIGHTNESS / 100.0;
    HSM_DEVICELED_GAMMA = global.HSM_DEVICELED_GAMMA;
    HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICELED_BLEND_MODE = global.HSM_DEVICELED_BLEND_MODE;
    HSM_DEVICELED_SOURCE_MATTE_TYPE = global.HSM_DEVICELED_SOURCE_MATTE_TYPE;
    HSM_DEVICELED_MASK_MODE = global.HSM_DEVICELED_MASK_MODE;
    HSM_DEVICELED_MIPMAPPING_BLEND_BIAS = global.HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICELED_CUTOUT_MODE = global.HSM_DEVICELED_CUTOUT_MODE;
    HSM_DEVICELED_DUALSCREEN_VIS_MODE = global.HSM_DEVICELED_DUALSCREEN_VIS_MODE;
    HSM_DEVICELED_FOLLOW_LAYER = global.HSM_DEVICELED_FOLLOW_LAYER;
    HSM_DEVICELED_FOLLOW_MODE = global.HSM_DEVICELED_FOLLOW_MODE;
    HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM = global.HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICELED_FILL_MODE = global.HSM_DEVICELED_FILL_MODE;
    HSM_DEVICELED_SPLIT_PRESERVE_CENTER = global.HSM_DEVICELED_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DEVICELED_SPLIT_REPEAT_WIDTH = global.HSM_DEVICELED_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DEVICELED_SCALE = global.HSM_DEVICELED_SCALE / 100.0;
    HSM_DEVICELED_SCALE_X = global.HSM_DEVICELED_SCALE_X / 100.0;
    HSM_DEVICELED_POS_X = global.HSM_DEVICELED_POS_X / (-100.0);
    HSM_DEVICELED_POS_Y = global.HSM_DEVICELED_POS_Y / 100.0;
    HSM_DECAL_OPACITY = global.HSM_DECAL_OPACITY / 100.0;
    HSM_DECAL_COLORIZE_ON = global.HSM_DECAL_COLORIZE_ON;
    HSM_DECAL_HUE = global.HSM_DECAL_HUE / 360.0;
    HSM_DECAL_SATURATION = global.HSM_DECAL_SATURATION / 100.0;
    HSM_DECAL_BRIGHTNESS = global.HSM_DECAL_BRIGHTNESS / 100.0;
    HSM_DECAL_GAMMA = global.HSM_DECAL_GAMMA;
    HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DECAL_BLEND_MODE = global.HSM_DECAL_BLEND_MODE;
    HSM_DECAL_SOURCE_MATTE_TYPE = global.HSM_DECAL_SOURCE_MATTE_TYPE;
    HSM_DECAL_MIPMAPPING_BLEND_BIAS = global.HSM_DECAL_MIPMAPPING_BLEND_BIAS;
    HSM_DECAL_MASK_MODE = global.HSM_DECAL_MASK_MODE;
    HSM_DECAL_CUTOUT_MODE = global.HSM_DECAL_CUTOUT_MODE;
    HSM_DECAL_DUALSCREEN_VIS_MODE = global.HSM_DECAL_DUALSCREEN_VIS_MODE;
    HSM_DECAL_FOLLOW_LAYER = global.HSM_DECAL_FOLLOW_LAYER;
    HSM_DECAL_FOLLOW_MODE = global.HSM_DECAL_FOLLOW_MODE;
    HSM_DECAL_FOLLOW_FULL_USES_ZOOM = global.HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
    HSM_DECAL_FILL_MODE = global.HSM_DECAL_FILL_MODE;
    HSM_DECAL_SPLIT_PRESERVE_CENTER = global.HSM_DECAL_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DECAL_SPLIT_REPEAT_WIDTH = global.HSM_DECAL_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DECAL_SCALE = global.HSM_DECAL_SCALE / 100.0;
    HSM_DECAL_SCALE_X = global.HSM_DECAL_SCALE_X / 100.0;
    HSM_DECAL_POS_X = global.HSM_DECAL_POS_X / (-100.0);
    HSM_DECAL_POS_Y = global.HSM_DECAL_POS_Y / 100.0;
    HSM_CAB_GLASS_OPACITY = global.HSM_CAB_GLASS_OPACITY / 100.0;
    HSM_CAB_GLASS_COLORIZE_ON = global.HSM_CAB_GLASS_COLORIZE_ON;
    HSM_CAB_GLASS_HUE = global.HSM_CAB_GLASS_HUE / 360.0;
    HSM_CAB_GLASS_SATURATION = global.HSM_CAB_GLASS_SATURATION / 100.0;
    HSM_CAB_GLASS_BRIGHTNESS = global.HSM_CAB_GLASS_BRIGHTNESS / 100.0;
    HSM_CAB_GLASS_GAMMA = global.HSM_CAB_GLASS_GAMMA;
    HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_CAB_GLASS_BLEND_MODE = global.HSM_CAB_GLASS_BLEND_MODE;
    HSM_CAB_GLASS_SOURCE_MATTE_TYPE = global.HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
    HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS = global.HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
    HSM_CAB_GLASS_MASK_MODE = global.HSM_CAB_GLASS_MASK_MODE;
    HSM_CAB_GLASS_CUTOUT_MODE = global.HSM_CAB_GLASS_CUTOUT_MODE;
    HSM_CAB_GLASS_DUALSCREEN_VIS_MODE = global.HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
    HSM_CAB_GLASS_FOLLOW_LAYER = global.HSM_CAB_GLASS_FOLLOW_LAYER;
    HSM_CAB_GLASS_FOLLOW_MODE = global.HSM_CAB_GLASS_FOLLOW_MODE;
    HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM = global.HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
    HSM_CAB_GLASS_FILL_MODE = global.HSM_CAB_GLASS_FILL_MODE;
    HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER = global.HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH = global.HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_CAB_GLASS_SCALE = global.HSM_CAB_GLASS_SCALE / 100.0;
    HSM_CAB_GLASS_SCALE_X = global.HSM_CAB_GLASS_SCALE_X / 100.0;
    HSM_CAB_GLASS_POS_X = global.HSM_CAB_GLASS_POS_X / (-100.0);
    HSM_CAB_GLASS_POS_Y = global.HSM_CAB_GLASS_POS_Y / 100.0;
    HSM_TOP_OPACITY = global.HSM_TOP_OPACITY / 100.0;
    HSM_TOP_COLORIZE_ON = global.HSM_TOP_COLORIZE_ON;
    HSM_TOP_HUE = global.HSM_TOP_HUE / 360.0;
    HSM_TOP_SATURATION = global.HSM_TOP_SATURATION / 100.0;
    HSM_TOP_BRIGHTNESS = global.HSM_TOP_BRIGHTNESS / 100.0;
    HSM_TOP_GAMMA = global.HSM_TOP_GAMMA;
    HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_TOP_BLEND_MODE = global.HSM_TOP_BLEND_MODE;
    HSM_TOP_SOURCE_MATTE_TYPE = global.HSM_TOP_SOURCE_MATTE_TYPE;
    HSM_TOP_MIPMAPPING_BLEND_BIAS = global.HSM_TOP_MIPMAPPING_BLEND_BIAS;
    HSM_TOP_MASK_MODE = global.HSM_TOP_MASK_MODE;
    HSM_TOP_CUTOUT_MODE = global.HSM_TOP_CUTOUT_MODE;
    HSM_TOP_DUALSCREEN_VIS_MODE = global.HSM_TOP_DUALSCREEN_VIS_MODE;
    HSM_TOP_FOLLOW_LAYER = global.HSM_TOP_FOLLOW_LAYER;
    HSM_TOP_FOLLOW_MODE = global.HSM_TOP_FOLLOW_MODE;
    HSM_TOP_FOLLOW_FULL_USES_ZOOM = global.HSM_TOP_FOLLOW_FULL_USES_ZOOM;
    HSM_TOP_FILL_MODE = global.HSM_TOP_FILL_MODE;
    HSM_TOP_SPLIT_PRESERVE_CENTER = global.HSM_TOP_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_TOP_SPLIT_REPEAT_WIDTH = global.HSM_TOP_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_TOP_SCALE = global.HSM_TOP_SCALE / 100.0;
    HSM_TOP_SCALE_X = global.HSM_TOP_SCALE_X / 100.0;
    HSM_TOP_POS_X = global.HSM_TOP_POS_X / (-100.0);
    HSM_TOP_POS_Y = global.HSM_TOP_POS_Y / 100.0;
    HSM_TOP_MIRROR_WRAP = global.HSM_TOP_MIRROR_WRAP;
    HSM_RENDER_SIMPLE_MODE = global.HSM_RENDER_SIMPLE_MODE;
    HSM_RENDER_SIMPLE_MASK_TYPE = global.HSM_RENDER_SIMPLE_MASK_TYPE;
    SOURCE_MATTE_PREMULTIPLIED = 0.0;
    SOURCE_MATTE_WHITE = 1.0;
    SOURCE_MATTE_NONE = 2.0;
    BLEND_MODE_OFF = 0.0;
    BLEND_MODE_NORMAL = 1.0;
    BLEND_MODE_ADD = 2.0;
    BLEND_MODE_MULTIPLY = 3.0;
    CURVATURE_MODE_OFF = 0.0;
    CURVATURE_MODE_2D = 1.0;
    CURVATURE_MODE_2D_CYLINDER = 2.0;
    CURVATURE_MODE_3D_1 = 3.0;
    CURVATURE_MODE_3D_2 = 4.0;
    CURVATURE_MODE_3D_CYLINDER = 5.0;
    MAX_LAYER_ORDER = 12.0;
    bool _8500 = HSM_AB_COMPARE_FREEZE_CRT_TUBE == 1.0;
    bool _8508;
    if (_8500)
    {
        vec2 param = vTexCoord;
        _8508 = HSM_GetIsInABCompareArea(param);
    }
    else
    {
        _8508 = _8500;
    }
    if (_8508)
    {
        FragColor = texture(PostCRTPassFeedback, vTexCoord);
        return;
    }
    vec2 param_1 = vTexCoord;
    VIEWPORT_UNSCALED_COORD = HSM_GetViewportCoordWithFlip(param_1);
    vec2 param_2 = vTexCoord;
    vec2 viewportCoordTransformed = HSM_GetViewportCoordWithZoomAndPan(param_2);
    vec2 param_3 = vTexCoord;
    vec4 _8528 = HSM_UpdateGlobalScreenValuesFromCache(InfoCachePass, param_3);
    vec2 cache_bounds_coord = TUBE_COORD;
    vec2 param_4 = TUBE_DIFFUSE_COORD;
    vec2 param_5 = TUBE_DIFFUSE_SCALE;
    vec2 param_6 = TUBE_SCALE;
    float param_7 = SCREEN_ASPECT;
    vec2 bezel_outside_flat_coord;
    vec2 param_8 = bezel_outside_flat_coord;
    vec2 frame_outside_flat_coord;
    vec2 param_9 = frame_outside_flat_coord;
    float _8545 = HSM_GetSimpleBezelCoords(param_4, param_5, param_6, param_7, param_8, param_9);
    bezel_outside_flat_coord = param_8;
    frame_outside_flat_coord = param_9;
    cache_bounds_coord = ((bezel_outside_flat_coord - vec2(0.5)) * 0.89999997615814208984375) + vec2(0.5);
    vec2 param_10 = cache_bounds_coord;
    if (HHLP_IsOutsideCoordSpace(param_10))
    {
        FragColor = vec4(0.0);
        return;
    }
    vec2 param_11 = TUBE_DIFFUSE_COORD;
    vec2 param_12 = TUBE_DIFFUSE_SCALE;
    vec2 param_13 = TUBE_SCALE;
    float param_14 = SCREEN_ASPECT;
    bool param_15 = false;
    vec2 param_16 = BEZEL_OUTSIDE_SCALE;
    vec2 param_17 = BEZEL_OUTSIDE_COORD;
    vec2 param_18 = BEZEL_OUTSIDE_CURVED_COORD;
    vec2 param_19 = FRAME_OUTSIDE_CURVED_COORD;
    float _8577 = HSM_GetBezelCoords(param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18, param_19);
    BEZEL_OUTSIDE_SCALE = param_16;
    BEZEL_OUTSIDE_COORD = param_17;
    BEZEL_OUTSIDE_CURVED_COORD = param_18;
    FRAME_OUTSIDE_CURVED_COORD = param_19;
    vec2 param_20 = SCREEN_COORD;
    float param_21 = 1.0;
    float param_22 = SCREEN_ASPECT;
    vec2 screen_curved_coord = HSM_GetCurvedCoord(param_20, param_21, param_22);
    FragColor = texture(Source, UNFLIPPED_VIEWPORT_COORD);
    vec4 param_23 = FragColor;
    vec2 param_24 = vTexCoord;
    vec2 param_25 = screen_curved_coord;
    vec4 _8608 = HSM_GetPostCrtPreppedColor(param_23, param_24, param_25, IntroPass, TubeDiffuseImage, TubeColoredGelImage, TubeStaticReflectionImage, BackgroundImage, BackgroundVertImage, NightLightingImage, NightLighting2Image);
    FragColor = _8608;
}

