#version 430

layout(binding = 0, std140) uniform UBO
{
    mat4 MVP;
    vec4 SourceSize;
    vec4 OriginalSize;
    vec4 OriginalFeedbackSize;
    vec4 OutputSize;
    vec4 FinalViewportSize;
    vec4 DerezedPassSize;
    int FrameDirection;
    uint FrameCount;
    float HSM_RESOLUTION_DEBUG_ON;
    float HSM_SINDEN_BORDER_ON;
    float HSM_SINDEN_BORDER_OPACITY;
    float HSM_SINDEN_BORDER_BRIGHTNESS;
    float HSM_SINDEN_AMBIENT_LIGHTING;
    float HSM_SINDEN_BORDER_THICKNESS;
    float HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
    float HSM_CACHE_GRAPHICS_ON;
    float HSM_CACHE_UPDATE_INDICATOR_MODE;
    float HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
    float HSM_STATIC_LAYERS_GAMMA;
    float HSM_AMBIENT_LIGHTING_OPACITY;
    float HSM_AMBIENT1_OPACITY;
    float HSM_AMBIENT2_OPACITY;
    float HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    float HSM_AMBIENT1_HUE;
    float HSM_AMBIENT1_SATURATION;
    float HSM_AMBIENT1_VALUE;
    float HSM_AMBIENT1_CONTRAST;
    float HSM_AMBIENT1_SCALE_KEEP_ASPECT;
    float HSM_AMBIENT1_SCALE_INHERIT_MODE;
    float HSM_AMBIENT1_SCALE;
    float HSM_AMBIENT1_SCALE_X;
    float HSM_AMBIENT1_ROTATE;
    float HSM_AMBIENT1_MIRROR_HORZ;
    float HSM_AMBIENT1_POS_INHERIT_MODE;
    float HSM_AMBIENT1_POSITION_X;
    float HSM_AMBIENT1_POSITION_Y;
    float HSM_AMBIENT1_DITHERING_SAMPLES;
    float HSM_AMBIENT2_HUE;
    float HSM_AMBIENT2_SATURATION;
    float HSM_AMBIENT2_VALUE;
    float HSM_AMBIENT2_CONTRAST;
    float HSM_AMBIENT2_SCALE_KEEP_ASPECT;
    float HSM_AMBIENT2_SCALE_INHERIT_MODE;
    float HSM_AMBIENT2_SCALE;
    float HSM_AMBIENT2_SCALE_X;
    float HSM_AMBIENT2_ROTATE;
    float HSM_AMBIENT2_MIRROR_HORZ;
    float HSM_AMBIENT2_POS_INHERIT_MODE;
    float HSM_AMBIENT2_POSITION_X;
    float HSM_AMBIENT2_POSITION_Y;
    float HSM_VIEWPORT_ZOOM;
    float HSM_VIEWPORT_POSITION_X;
    float HSM_VIEWPORT_POSITION_Y;
    float HSM_VIEWPORT_ZOOM_MASK;
    float HSM_FLIP_VIEWPORT_VERTICAL;
    float HSM_FLIP_VIEWPORT_HORIZONTAL;
    float HSM_FLIP_CORE_VERTICAL;
    float HSM_FLIP_CORE_HORIZONTAL;
    float HSM_ROTATE_CORE_IMAGE;
    float HSM_ASPECT_RATIO_ORIENTATION;
    float HSM_ASPECT_RATIO_MODE;
    float HSM_ASPECT_RATIO_EXPLICIT;
    float HSM_INT_SCALE_MODE;
    float HSM_INT_SCALE_MULTIPLE_OFFSET;
    float HSM_INT_SCALE_MULTIPLE_OFFSET_LONG;
    float HSM_INT_SCALE_MAX_HEIGHT;
    float HSM_VERTICAL_PRESET;
    float HSM_NON_INTEGER_SCALE;
    float HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
    float HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
    float HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
    float HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
    float HSM_USE_IMAGE_FOR_PLACEMENT;
    float HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
    float HSM_PLACEMENT_IMAGE_MODE;
    float HSM_NON_INTEGER_SCALE_OFFSET;
    float HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
    float HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE;
    float HSM_SCREEN_POSITION_X;
    float HSM_SCREEN_POSITION_Y;
    float HSM_CROP_MODE;
    float HSM_CROP_PERCENT_ZOOM;
    float HSM_CROP_PERCENT_TOP;
    float HSM_CROP_PERCENT_BOTTOM;
    float HSM_CROP_PERCENT_LEFT;
    float HSM_CROP_PERCENT_RIGHT;
    float HSM_CROP_BLACK_THRESHOLD;
    float HSM_SCANLINE_DIRECTION;
    float HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;
    float HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR;
    float HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;
    float HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR;
    float HSM_CORE_RES_SAMPLING_SHIFT_OPPOSITE_DIR;
    float HSM_INTERLACE_TRIGGER_RES;
    float HSM_INTERLACE_MODE;
    float HSM_INTERLACE_EFFECT_SMOOTHNESS_INTERS;
    float HSM_INTERLACE_SCANLINE_EFFECT;
    float iscans;
    float HSM_FAKE_SCANLINE_MODE;
    float HSM_FAKE_SCANLINE_OPACITY;
    float HSM_FAKE_SCANLINE_RES_MODE;
    float HSM_FAKE_SCANLINE_RES;
    float HSM_FAKE_SCANLINE_INT_SCALE;
    float HSM_FAKE_SCANLINE_ROLL;
    float HSM_FAKE_SCANLINE_CURVATURE;
    float HSM_FAKE_SCANLINE_BRIGHTNESS_CUTOFF;
    float HSM_DUALSCREEN_MODE;
    float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
    float HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
    float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET;
    float HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION;
    float HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
    float HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS;
    float HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
    float HSM_2ND_SCREEN_INDEPENDENT_SCALE;
    float HSM_2ND_SCREEN_SCALE_OFFSET;
    float HSM_2ND_SCREEN_POS_X;
    float HSM_2ND_SCREEN_POS_Y;
    float HSM_2ND_SCREEN_CROP_PERCENT_ZOOM;
    float HSM_2ND_SCREEN_CROP_PERCENT_TOP;
    float HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM;
    float HSM_2ND_SCREEN_CROP_PERCENT_LEFT;
    float HSM_2ND_SCREEN_CROP_PERCENT_RIGHT;
    float HSM_CURVATURE_MODE;
    float HSM_CURVATURE_2D_SCALE_LONG_AXIS;
    float HSM_CURVATURE_2D_SCALE_SHORT_AXIS;
    float HSM_CURVATURE_3D_RADIUS;
    float HSM_CURVATURE_3D_VIEW_DIST;
    float HSM_CURVATURE_3D_TILT_ANGLE_X;
    float HSM_CURVATURE_3D_TILT_ANGLE_Y;
    float HSM_CRT_CURVATURE_SCALE;
    float HSM_SIGNAL_NOISE_ON;
    float HSM_SIGNAL_NOISE_AMOUNT;
    float HSM_SIGNAL_NOISE_BLACK_LEVEL;
    float HSM_SIGNAL_NOISE_SIZE_MODE;
    float HSM_SIGNAL_NOISE_SIZE_MULT;
    float HSM_SIGNAL_NOISE_TYPE;
    float HSM_ANTI_FLICKER_ON;
    float HSM_ANTI_FLICKER_THRESHOLD;
    float HSM_AB_COMPARE_SHOW_MODE;
    float HSM_AB_COMPARE_AREA;
    float HSM_AB_COMPARE_FREEZE_CRT_TUBE;
    float HSM_AB_COMPARE_FREEZE_GRAPHICS;
    float HSM_AB_COMPARE_SPLIT_AREA;
    float HSM_AB_COMPARE_SPLIT_POSITION;
    float HSM_SHOW_PASS_INDEX;
    float HSM_SHOW_PASS_ALPHA;
    float HSM_SHOW_PASS_APPLY_SCREEN_COORD;
    float HSM_SCREEN_VIGNETTE_ON;
    float HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
    float HSM_SCREEN_VIGNETTE_STRENGTH;
    float HSM_SCREEN_VIGNETTE_POWER;
    float HSM_SCREEN_VIGNETTE_IN_REFLECTION;
    float HSM_MONOCHROME_MODE;
    float HSM_MONOCHROME_BRIGHTNESS;
    float HSM_MONOCHROME_GAMMA;
    float HSM_MONOCHROME_HUE_OFFSET;
    float HSM_MONOCHROME_SATURATION;
    float HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
    float HSM_SCREEN_REFLECTION_SCALE;
    float HSM_SCREEN_REFLECTION_POS_X;
    float HSM_SCREEN_REFLECTION_POS_Y;
    float HSM_TUBE_DIFFUSE_MODE;
    float HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_OPACITY;
    float HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
    float HSM_TUBE_DIFFUSE_IMAGE_HUE;
    float HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
    float HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
    float HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
    float HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
    float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
    float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
    float HSM_TUBE_DIFFUSE_IMAGE_SCALE;
    float HSM_TUBE_DIFFUSE_IMAGE_SCALE_X;
    float HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
    float HSM_TUBE_EMPTY_THICKNESS;
    float HSM_TUBE_EMPTY_THICKNESS_X_SCALE;
    float HSM_TUBE_DIFFUSE_FORCE_ASPECT;
    float HSM_TUBE_EXPLICIT_ASPECT;
    float HSM_SCREEN_CORNER_RADIUS_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_ON;
    float HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
    float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
    float HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD;
    float HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT;
    float HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL;
    float HSM_TUBE_SHADOW_IMAGE_ON;
    float HSM_TUBE_SHADOW_IMAGE_OPACITY;
    float HSM_TUBE_SHADOW_IMAGE_SCALE_X;
    float HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
    float HSM_TUBE_SHADOW_IMAGE_POS_X;
    float HSM_TUBE_SHADOW_IMAGE_POS_Y;
    float HSM_TUBE_SHADOW_CURVATURE_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
    float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
    float HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
    float HSM_TUBE_COLORED_GEL_IMAGE_SCALE;
    float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL;
    float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
    float HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY;
    float HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY;
    float HSM_TUBE_STATIC_BLACK_LEVEL;
    float HSM_TUBE_STATIC_AMBIENT_LIGHTING;
    float HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
    float HSM_TUBE_STATIC_SCALE;
    float HSM_TUBE_STATIC_SCALE_X;
    float HSM_TUBE_STATIC_POS_X;
    float HSM_TUBE_STATIC_POS_Y;
    float HSM_TUBE_STATIC_SHADOW_OPACITY;
    float HSM_TUBE_STATIC_DITHER_SAMPLES;
    float HSM_TUBE_STATIC_DITHER_DISTANCE;
    float HSM_TUBE_STATIC_DITHER_AMOUNT;
    float HSM_CRT_BLEND_MODE;
    float HSM_CRT_BLEND_AMOUNT;
    float HSM_CRT_SCREEN_BLEND_MODE;
    float HSM_GLOBAL_CORNER_RADIUS;
    float HSM_TUBE_BLACK_EDGE_CORNER_RADIUS_SCALE;
    float HSM_TUBE_BLACK_EDGE_SHARPNESS;
    float HSM_TUBE_BLACK_EDGE_CURVATURE_SCALE;
    float HSM_TUBE_BLACK_EDGE_THICKNESS;
    float HSM_TUBE_BLACK_EDGE_THICKNESS_X_SCALE;
    float HSM_BZL_USE_INDEPENDENT_SCALE;
    float HSM_BZL_INDEPENDENT_SCALE;
    float HSM_BZL_USE_INDEPENDENT_CURVATURE;
    float HSM_BZL_INDEPENDENT_CURVATURE_SCALE_LONG_AXIS;
    float HSM_BZL_INDEPENDENT_CURVATURE_SCALE_SHORT_AXIS;
    float HSM_BZL_OPACITY;
    float HSM_BZL_BLEND_MODE;
    float HSM_BZL_WIDTH;
    float HSM_BZL_HEIGHT;
    float HSM_BZL_SCALE_OFFSET;
    float HSM_BZL_INNER_CURVATURE_SCALE;
    float HSM_BZL_INNER_CORNER_RADIUS_SCALE;
    float HSM_BZL_OUTER_CURVATURE_SCALE;
    float HSM_BZL_INNER_EDGE_THICKNESS;
    float HSM_BZL_INNER_EDGE_SHARPNESS;
    float HSM_BZL_OUTER_CORNER_RADIUS_SCALE;
    float HSM_BZL_INNER_EDGE_SHADOW;
    float HSM_BZL_COLOR_HUE;
    float HSM_BZL_COLOR_SATURATION;
    float HSM_BZL_COLOR_VALUE;
    float HSM_BZL_NOISE;
    float HSM_BZL_BRIGHTNESS;
    float HSM_BZL_BRIGHTNESS_MULT_TOP;
    float HSM_BZL_BRIGHTNESS_MULT_BOTTOM;
    float HSM_BZL_BRIGHTNESS_MULT_SIDES;
    float HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT;
    float HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT;
    float HSM_BZL_HIGHLIGHT;
    float HSM_BZL_INNER_EDGE_HIGHLIGHT;
    float HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_FRM_USE_INDEPENDENT_COLOR;
    float HSM_FRM_COLOR_HUE;
    float HSM_FRM_COLOR_SATURATION;
    float HSM_FRM_COLOR_VALUE;
    float HSM_FRM_NOISE;
    float HSM_FRM_OUTER_CURVATURE_SCALE;
    float HSM_FRM_THICKNESS;
    float HSM_FRM_THICKNESS_SCALE_X;
    float HSM_FRM_OUTER_POS_Y;
    float HSM_FRM_INNER_EDGE_THICKNESS;
    float HSM_FRM_INNER_EDGE_HIGHLIGHT;
    float HSM_FRM_OUTER_EDGE_THICKNESS;
    float HSM_FRM_OUTER_EDGE_SHADING;
    float HSM_FRM_OUTER_CORNER_RADIUS;
    float HSM_BZL_OUTER_POSITION_Y;
    float HSM_FRM_SHADOW_OPACITY;
    float HSM_FRM_SHADOW_WIDTH;
    float HSM_REFLECT_CORNER_FADE;
    float HSM_REFLECT_CORNER_INNER_SPREAD;
    float HSM_REFLECT_CORNER_OUTER_SPREAD;
    float HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
    float HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
    float HSM_REFLECT_CORNER_SPREAD_FALLOFF;
    float HSM_REFLECT_CORNER_FADE_DISTANCE;
    float HSM_REFLECT_GLOBAL_AMOUNT;
    float HSM_REFLECT_GLOBAL_GAMMA_ADJUST;
    float HSM_REFLECT_BEZEL_INNER_EDGE_AMOUNT;
    float HSM_REFLECT_BEZEL_INNER_EDGE_FULLSCREEN_GLOW;
    float HSM_REFLECT_FRAME_INNER_EDGE_AMOUNT;
    float HSM_REFLECT_FRAME_INNER_EDGE_SHARPNESS;
    float HSM_REFLECT_SHOW_TUBE_FX_AMOUNT;
    float HSM_REFLECT_DIRECT_AMOUNT;
    float HSM_REFLECT_DIFFUSED_AMOUNT;
    float HSM_REFLECT_FULLSCREEN_GLOW;
    float HSM_REFLECT_FULLSCREEN_GLOW_GAMMA;
    float HSM_REFLECT_FADE_AMOUNT;
    float HSM_REFLECT_RADIAL_FADE_WIDTH;
    float HSM_REFLECT_RADIAL_FADE_HEIGHT;
    float HSM_REFLECT_LATERAL_OUTER_FADE_POSITION;
    float HSM_REFLECT_LATERAL_OUTER_FADE_DISTANCE;
    float HSM_REFLECT_NOISE_AMOUNT;
    float HSM_REFLECT_NOISE_SAMPLES;
    float HSM_REFLECT_NOISE_SAMPLE_DISTANCE;
    float HSM_REFLECT_BLUR_NUM_SAMPLES;
    float HSM_REFLECT_BLUR_FALLOFF_DISTANCE;
    float HSM_REFLECT_BLUR_MIN;
    float HSM_REFLECT_BLUR_MAX;
    float HSM_REFLECT_MASK_IMAGE_AMOUNT;
    float HSM_REFLECT_MASK_FOLLOW_LAYER;
    float HSM_REFLECT_MASK_FOLLOW_MODE;
    float HSM_REFLECT_MASK_BRIGHTNESS;
    float HSM_REFLECT_MASK_BLACK_LEVEL;
    float HSM_REFLECT_MASK_MIPMAPPING_BLEND_BIAS;
    float HSM_GLASS_BORDER_ON;
    float HSM_REFLECT_VIGNETTE_AMOUNT;
    float HSM_REFLECT_VIGNETTE_SIZE;
    float HSM_POTATO_SHOW_BG_OVER_SCREEN;
    float HSM_POTATO_COLORIZE_CRT_WITH_BG;
    float HSM_POTATO_COLORIZE_BRIGHTNESS;
    float HSM_STANDARD_DECAL_SCALE_WITH_FRAME;
    float HSM_STANDARD_TOP_SCALE_WITH_FRAME;
    float HSM_BG_LAYER_ORDER;
    float HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
    float HSM_CRT_LAYER_ORDER;
    float HSM_DEVICE_LAYER_ORDER;
    float HSM_DEVICELED_LAYER_ORDER;
    float HSM_CAB_GLASS_LAYER_ORDER;
    float HSM_DECAL_LAYER_ORDER;
    float HSM_LED_LAYER_ORDER;
    float HSM_TOP_LAYER_ORDER;
    float HSM_CUTOUT_ASPECT_MODE;
    float HSM_CUTOUT_EXPLICIT_ASPECT;
    float HSM_CUTOUT_FOLLOW_LAYER;
    float HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
    float HSM_CUTOUT_SCALE;
    float HSM_CUTOUT_SCALE_X;
    float HSM_CUTOUT_CORNER_RADIUS;
    float HSM_CUTOUT_POS_X;
    float HSM_CUTOUT_POS_Y;
    float HSM_BG_OPACITY;
    float HSM_BG_HUE;
    float HSM_BG_COLORIZE_ON;
    float HSM_BG_SATURATION;
    float HSM_BG_BRIGHTNESS;
    float HSM_BG_GAMMA;
    float HSM_BG_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_BG_BLEND_MODE;
    float HSM_BG_SOURCE_MATTE_TYPE;
    float HSM_BG_MASK_MODE;
    float HSM_BG_CUTOUT_MODE;
    float HSM_BG_DUALSCREEN_VIS_MODE;
    float HSM_BG_FOLLOW_LAYER;
    float HSM_BG_FOLLOW_MODE;
    float HSM_BG_FOLLOW_FULL_USES_ZOOM;
    float HSM_BG_FILL_MODE;
    float HSM_BG_SPLIT_PRESERVE_CENTER;
    float HSM_BG_SPLIT_REPEAT_WIDTH;
    float HSM_BG_SCALE;
    float HSM_BG_SCALE_X;
    float HSM_BG_POS_X;
    float HSM_BG_POS_Y;
    float HSM_BG_WRAP_MODE;
    float HSM_BG_MIPMAPPING_BLEND_BIAS;
    float HSM_VIEWPORT_VIGNETTE_OPACITY;
    float HSM_VIEWPORT_VIGNETTE_MASK_MODE;
    float HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
    float HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
    float HSM_VIEWPORT_VIGNETTE_SCALE;
    float HSM_VIEWPORT_VIGNETTE_SCALE_X;
    float HSM_VIEWPORT_VIGNETTE_POS_X;
    float HSM_VIEWPORT_VIGNETTE_POS_Y;
    float HSM_LED_OPACITY;
    float HSM_LED_HUE;
    float HSM_LED_COLORIZE_ON;
    float HSM_LED_SATURATION;
    float HSM_LED_BRIGHTNESS;
    float HSM_LED_GAMMA;
    float HSM_LED_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_LED_BLEND_MODE;
    float HSM_LED_SOURCE_MATTE_TYPE;
    float HSM_LED_MASK_MODE;
    float HSM_LED_CUTOUT_MODE;
    float HSM_LED_DUALSCREEN_VIS_MODE;
    float HSM_LED_FOLLOW_LAYER;
    float HSM_LED_FOLLOW_MODE;
    float HSM_LED_FOLLOW_FULL_USES_ZOOM;
    float HSM_LED_FILL_MODE;
    float HSM_LED_SPLIT_PRESERVE_CENTER;
    float HSM_LED_SPLIT_REPEAT_WIDTH;
    float HSM_LED_SCALE;
    float HSM_LED_SCALE_X;
    float HSM_LED_POS_X;
    float HSM_LED_POS_Y;
    float HSM_LED_MIPMAPPING_BLEND_BIAS;
    float HSM_DEVICE_OPACITY;
    float HSM_DEVICE_HUE;
    float HSM_DEVICE_COLORIZE_ON;
    float HSM_DEVICE_SATURATION;
    float HSM_DEVICE_BRIGHTNESS;
    float HSM_DEVICE_GAMMA;
    float HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DEVICE_BLEND_MODE;
    float HSM_DEVICE_SOURCE_MATTE_TYPE;
    float HSM_DEVICE_MASK_MODE;
    float HSM_DEVICE_CUTOUT_MODE;
    float HSM_DEVICE_DUALSCREEN_VIS_MODE;
    float HSM_DEVICE_FOLLOW_LAYER;
    float HSM_DEVICE_FOLLOW_MODE;
    float HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
    float HSM_DEVICE_FILL_MODE;
    float HSM_DEVICE_SPLIT_PRESERVE_CENTER;
    float HSM_DEVICE_SPLIT_REPEAT_WIDTH;
    float HSM_DEVICE_SCALE;
    float HSM_DEVICE_SCALE_X;
    float HSM_DEVICE_POS_X;
    float HSM_DEVICE_POS_Y;
    float HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
    float HSM_DEVICELED_OPACITY;
    float HSM_DEVICELED_HUE;
    float HSM_DEVICELED_COLORIZE_ON;
    float HSM_DEVICELED_SATURATION;
    float HSM_DEVICELED_BRIGHTNESS;
    float HSM_DEVICELED_GAMMA;
    float HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DEVICELED_BLEND_MODE;
    float HSM_DEVICELED_SOURCE_MATTE_TYPE;
    float HSM_DEVICELED_MASK_MODE;
    float HSM_DEVICELED_CUTOUT_MODE;
    float HSM_DEVICELED_DUALSCREEN_VIS_MODE;
    float HSM_DEVICELED_FOLLOW_LAYER;
    float HSM_DEVICELED_FOLLOW_MODE;
    float HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
    float HSM_DEVICELED_FILL_MODE;
    float HSM_DEVICELED_SPLIT_PRESERVE_CENTER;
    float HSM_DEVICELED_SPLIT_REPEAT_WIDTH;
    float HSM_DEVICELED_SCALE;
    float HSM_DEVICELED_SCALE_X;
    float HSM_DEVICELED_POS_X;
    float HSM_DEVICELED_POS_Y;
    float HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
    float HSM_FRM_OPACITY;
    float HSM_FRM_BLEND_MODE;
    float HSM_FRM_TEXTURE_OPACITY;
    float HSM_FRM_TEXTURE_BLEND_MODE;
    float HSM_DECAL_OPACITY;
    float HSM_DECAL_HUE;
    float HSM_DECAL_COLORIZE_ON;
    float HSM_DECAL_SATURATION;
    float HSM_DECAL_BRIGHTNESS;
    float HSM_DECAL_GAMMA;
    float HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_DECAL_BLEND_MODE;
    float HSM_DECAL_SOURCE_MATTE_TYPE;
    float HSM_DECAL_MASK_MODE;
    float HSM_DECAL_CUTOUT_MODE;
    float HSM_DECAL_DUALSCREEN_VIS_MODE;
    float HSM_DECAL_FOLLOW_LAYER;
    float HSM_DECAL_FOLLOW_MODE;
    float HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
    float HSM_DECAL_FILL_MODE;
    float HSM_DECAL_SPLIT_PRESERVE_CENTER;
    float HSM_DECAL_SPLIT_REPEAT_WIDTH;
    float HSM_DECAL_SCALE;
    float HSM_DECAL_SCALE_X;
    float HSM_DECAL_POS_X;
    float HSM_DECAL_POS_Y;
    float HSM_DECAL_MIPMAPPING_BLEND_BIAS;
    float HSM_CAB_GLASS_OPACITY;
    float HSM_CAB_GLASS_HUE;
    float HSM_CAB_GLASS_COLORIZE_ON;
    float HSM_CAB_GLASS_SATURATION;
    float HSM_CAB_GLASS_BRIGHTNESS;
    float HSM_CAB_GLASS_GAMMA;
    float HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_CAB_GLASS_BLEND_MODE;
    float HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
    float HSM_CAB_GLASS_MASK_MODE;
    float HSM_CAB_GLASS_CUTOUT_MODE;
    float HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
    float HSM_CAB_GLASS_FOLLOW_LAYER;
    float HSM_CAB_GLASS_FOLLOW_MODE;
    float HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
    float HSM_CAB_GLASS_FILL_MODE;
    float HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER;
    float HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH;
    float HSM_CAB_GLASS_SCALE;
    float HSM_CAB_GLASS_SCALE_X;
    float HSM_CAB_GLASS_POS_X;
    float HSM_CAB_GLASS_POS_Y;
    float HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
    float HSM_TOP_OPACITY;
    float HSM_TOP_HUE;
    float HSM_TOP_COLORIZE_ON;
    float HSM_TOP_SATURATION;
    float HSM_TOP_BRIGHTNESS;
    float HSM_TOP_GAMMA;
    float HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER;
    float HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER;
    float HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
    float HSM_TOP_BLEND_MODE;
    float HSM_TOP_SOURCE_MATTE_TYPE;
    float HSM_TOP_MASK_MODE;
    float HSM_TOP_CUTOUT_MODE;
    float HSM_TOP_DUALSCREEN_VIS_MODE;
    float HSM_TOP_FOLLOW_LAYER;
    float HSM_TOP_FOLLOW_MODE;
    float HSM_TOP_FOLLOW_FULL_USES_ZOOM;
    float HSM_TOP_FILL_MODE;
    float HSM_TOP_SPLIT_PRESERVE_CENTER;
    float HSM_TOP_SPLIT_REPEAT_WIDTH;
    float HSM_TOP_SCALE;
    float HSM_TOP_SCALE_X;
    float HSM_TOP_POS_X;
    float HSM_TOP_POS_Y;
    float HSM_TOP_MIRROR_WRAP;
    float HSM_TOP_MIPMAPPING_BLEND_BIAS;
    float HSM_RENDER_SIMPLE_MODE;
    float HSM_RENDER_SIMPLE_MASK_TYPE;
    float HSM_LAYERING_DEBUG_MASK_MODE;
    float HSM_INTRO_LOGO_BLEND_MODE;
    float HSM_INTRO_LOGO_FLIP_VERTICAL;
    float HSM_INTRO_NOISE_BLEND_MODE;
    float HSM_INTRO_NOISE_HOLD;
    float HSM_INTRO_NOISE_FADE_OUT;
    float HSM_INTRO_SOLID_BLACK_HOLD;
    float HSM_INTRO_SOLID_BLACK_FADE_OUT;
    float HSM_INTRO_SOLID_COLOR_BLEND_MODE;
    float HSM_INTRO_LOGO_OVER_SOLID_COLOR;
    float HSM_INTRO_LOGO_PLACEMENT;
    float HSM_INTRO_LOGO_HEIGHT;
    float HSM_INTRO_LOGO_POS_X;
    float HSM_INTRO_LOGO_POS_Y;
    float HSM_INTRO_WHEN_TO_SHOW;
    float HSM_INTRO_SPEED;
    float HSM_INTRO_LOGO_WAIT;
    float HSM_INTRO_LOGO_FADE_IN;
    float HSM_INTRO_LOGO_HOLD;
    float HSM_INTRO_LOGO_FADE_OUT;
    float HSM_INTRO_SOLID_COLOR_HUE;
    float HSM_INTRO_SOLID_COLOR_SAT;
    float HSM_INTRO_SOLID_COLOR_VALUE;
    float HSM_INTRO_SOLID_COLOR_HOLD;
    float HSM_INTRO_SOLID_COLOR_FADE_OUT;
    float GAMMA_INPUT;
    float gamma_out;
    float post_br;
    float post_br_affect_black_level;
    float m_glow;
    float m_glow_low;
    float m_glow_high;
    float m_glow_dist;
    float m_glow_mask;
    float smask_mit;
    float glow;
    float bloom;
    float mask_bloom;
    float bloom_dist;
    float halation;
    float TATE;
    float IOS;
    float HSM_OVERSCAN_RASTER_BLOOM_ON;
    float HSM_OVERSCAN_RASTER_BLOOM_MODE;
    float HSM_OVERSCAN_RASTER_BLOOM_AMOUNT;
    float HSM_OVERSCAN_AMOUNT;
    float HSM_OVERSCAN_X;
    float HSM_OVERSCAN_Y;
    float intres;
    float prescalex;
    float c_shape;
    float sborder;
    float csize;
    float bsize1;
    float warpX;
    float warpY;
    float gamma_c;
    float brightboost;
    float brightboost1;
    float blendMode;
    float gsl;
    float scanline1;
    float scanline2;
    float beam_min;
    float beam_max;
    float beam_size;
    float vertmask;
    float scans;
    float scan_falloff;
    float spike;
    float ring;
    float no_scanlines;
    float scangamma;
    float rolling_scan;
    float h_sharp;
    float s_sharp;
    float smart_ei;
    float ei_limit;
    float sth;
    float barspeed;
    float barintensity;
    float bardir;
    float shadowMask;
    float maskstr;
    float mcut;
    float maskboost;
    float masksize;
    float masksizeautothreshold;
    float maskDark;
    float maskLight;
    float mask_gamma;
    float slotmask;
    float slotmask1;
    float slotwidth;
    float double_slot;
    float slotms;
    float mclip;
    float smoothmask;
    float mshift;
    float mask_layout;
    float GDV_DECONVERGENCE_ON;
    float decons;
    float deconrr;
    float deconrg;
    float deconrb;
    float deconrry;
    float deconrgy;
    float deconrby;
    float deconsmooth;
    float dctypex;
    float dctypey;
    float dcscalemode;
    float GDV_NOISE_ON;
    float addnoised;
    float noisetype;
    float noiseresd;
    float noiseresd4kmult;
    float g_grade_on;
    float wp_temperature;
    float g_satr;
    float g_satg;
    float g_satb;
    float AS;
    float asat;
    float hcrt_h_size;
    float hcrt_v_size;
    float hcrt_h_cent;
    float hcrt_v_cent;
    float hcrt_pin_phase;
    float hcrt_pin_amp;
} global;

layout(binding = 8) uniform sampler2D InfoCachePass;
layout(binding = 2) uniform sampler2D TextPassFeedback;
layout(binding = 9) uniform sampler2D InfoCachePassFeedback;

layout(location = 0) in vec2 vTexCoord;
layout(location = 0) out vec4 FragColor;
float FOLLOW_MODE_SCALE_AND_POS;
float FOLLOW_MODE_EXACT;
float NEGATIVE_CROP_EXPAND_MULTIPLIER;
float MAX_NEGATIVE_CROP;
float DEFAULT_SCREEN_ASPECT;
float DEFAULT_BEZEL_ASPECT;
vec2 DEFAULT_SCREEN_SCALE;
vec2 DEFAULT_BEZEL_SCALE;
int INFOCACHE_MAX_INDEX;
bool CACHE_INFO_CHANGED;
float CURRENT_FRAME_FROM_CACHE_INFO;
float TUBE_DIFFUSE_MASK;
float TUBE_MASK;
float BEZEL_MASK;
float INSIDE_BEZEL_MASK;
float OUTSIDE_TUBE_MASK_FOR_IMAGE;
float FRAME_MASK;
float FRAME_MASK_FOR_IMAGE;
float OUTSIDE_BEZEL_MASK;
float OUTSIDE_FRAME_MASK_FOR_IMAGE;
float OUTSIDE_FRAME_MASK;
float CUTOUT_MASK;
float SCREEN_INDEX;
float SCREEN_ASPECT;
vec2 SCREEN_SCALE;
vec2 SCREEN_SCALE_WITH_ZOOM;
vec2 SCREEN_POS_OFFSET;
vec2 SCREEN_SCALE_2ND_SCREEN;
vec2 SCREEN_POS_OFFSET_1ST_SCREEN;
vec2 SCREEN_POS_OFFSET_2ND_SCREEN;
vec2 VIEWPORT_SCALE;
vec2 VIEWPORT_POS;
vec2 TUBE_SCALE;
vec2 TUBE_DIFFUSE_SCALE;
float TUBE_DIFFUSE_ASPECT;
vec2 TUBE_DIFFUSE_SCALE_1ST_SCREEN;
vec2 TUBE_DIFFUSE_SCALE_2ND_SCREEN;
vec2 FRAME_SCALE;
vec2 BEZEL_OUTSIDE_SCALE;
vec2 BACKGROUND_SCALE;
vec2 LED_SCALE;
vec2 DEVICE_SCALE;
vec2 DEVICELED_SCALE;
vec2 DECAL_SCALE;
vec2 CAB_GLASS_SCALE;
vec2 TOP_IMAGE_SCALE;
float AVERAGE_LUMA;
float USE_VERTICAL_SCANLINES;
float SAMPLING_SCANLINE_DIR_MULT;
float SAMPLING_OPPOSITE_DIR_MULT;
vec2 CORE_SIZE;
vec2 ROTATED_CORE_ORIGINAL_SIZE;
vec2 ROTATED_CORE_PREPPED_SIZE;
vec2 ROTATED_DEREZED_SIZE;
vec2 CROPPED_ROTATED_SIZE_WITH_RES_MULT;
vec2 CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK;
vec2 CROPPED_ROTATED_SIZE;
vec2 SAMPLE_AREA_START_PIXEL_COORD;
vec2 SCREEN_SIZE;
vec2 VIEWPORT_UNSCALED_COORD;
vec2 SCREEN_COORD;
vec2 TUBE_COORD;
vec2 TUBE_DIFFUSE_COORD;
vec2 TUBE_DIFFUSE_COORD_MIXED_POS;
vec2 BEZEL_OUTSIDE_COORD;
vec2 BACKGROUND_COORD;
vec2 DEVICE_COORD;
vec2 DEVICELED_COORD;
vec2 LED_COORD;
vec2 DECAL_COORD;
vec2 CAB_GLASS_COORD;
vec2 TOP_IMAGE_COORD;
vec2 SCREEN_CURVED_COORD;
vec2 TUBE_CURVED_COORD;
vec2 TUBE_DIFFUSE_CURVED_COORD;
vec2 BEZEL_OUTSIDE_CURVED_COORD;
vec2 FRAME_OUTSIDE_CURVED_COORD;
vec2 BACKGROUND_CURVED_COORD;
vec2 LED_CURVED_COORD;
vec2 DEVICE_CURVED_COORD;
vec2 DEVICELED_CURVED_COORD;
vec2 DECAL_CURVED_COORD;
vec2 CAB_GLASS_CURVED_COORD;
vec2 TOP_IMAGE_CURVED_COORD;
float HSM_RESOLUTION_DEBUG_ON;
float HSM_GLOBAL_GRAPHICS_BRIGHTNESS;
float HSM_STATIC_LAYERS_GAMMA;
float HSM_AMBIENT_LIGHTING_OPACITY;
float HSM_AMBIENT1_OPACITY;
float HSM_AMBIENT2_OPACITY;
float HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
float HSM_SINDEN_BORDER_ON;
float HSM_SINDEN_BORDER_BRIGHTNESS;
float HSM_SINDEN_BORDER_THICKNESS;
float HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
float HSM_VIEWPORT_ZOOM;
float HSM_VIEWPORT_ZOOM_MASK;
float HSM_VIEWPORT_POSITION_X;
float HSM_VIEWPORT_POSITION_Y;
float HSM_FLIP_VIEWPORT_VERTICAL;
float HSM_FLIP_VIEWPORT_HORIZONTAL;
float HSM_FLIP_CORE_VERTICAL;
float HSM_FLIP_CORE_HORIZONTAL;
float HSM_ROTATE_CORE_IMAGE;
float HSM_ASPECT_RATIO_ORIENTATION;
float HSM_ASPECT_RATIO_MODE;
float HSM_ASPECT_RATIO_EXPLICIT;
float HSM_VERTICAL_PRESET;
float HSM_INT_SCALE_MAX_HEIGHT;
float HSM_NON_INTEGER_SCALE;
float HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
float HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
float HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
float HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
float HSM_USE_IMAGE_FOR_PLACEMENT;
float HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
float HSM_PLACEMENT_IMAGE_MODE;
float HSM_NON_INTEGER_SCALE_OFFSET;
float HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
float HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE;
float HSM_SCREEN_POSITION_X;
float HSM_SCREEN_POSITION_Y;
float HSM_CROP_MODE;
float HSM_CROP_PERCENT_ZOOM;
float HSM_CROP_PERCENT_TOP;
float HSM_CROP_PERCENT_BOTTOM;
float HSM_CROP_PERCENT_LEFT;
float HSM_CROP_PERCENT_RIGHT;
float HSM_CROP_BLACK_THRESHOLD;
float HSM_SCANLINE_DIRECTION;
float HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;
float HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR;
float HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;
float HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR;
float HSM_USE_GEOM;
float HSM_CURVATURE_MODE;
float HSM_CURVATURE_3D_RADIUS;
float HSM_CURVATURE_3D_VIEW_DIST;
float HSM_CURVATURE_3D_TILT_ANGLE_X;
float HSM_CURVATURE_3D_TILT_ANGLE_Y;
float HSM_CRT_CURVATURE_SCALE;
float HSM_CACHE_GRAPHICS_ON;
float HSM_CACHE_UPDATE_INDICATOR_MODE;
float HSM_AB_COMPARE_SHOW_MODE;
float HSM_AB_COMPARE_AREA;
float HSM_AB_COMPARE_SPLIT_POSITION;
float HSM_AB_COMPARE_FREEZE_CRT_TUBE;
float HSM_AB_COMPARE_FREEZE_GRAPHICS;
float HSM_SHOW_PASS_INDEX;
float HSM_SHOW_PASS_APPLY_SCREEN_COORD;
float HSM_SHOW_PASS_ALPHA;
float HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
float HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
float HSM_TUBE_DIFFUSE_MODE;
float HSM_TUBE_DIFFUSE_IMAGE_AMOUNT;
float HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
float HSM_TUBE_DIFFUSE_IMAGE_HUE;
float HSM_TUBE_DIFFUSE_IMAGE_SATURATION;
float HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS;
float HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING;
float HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING;
float HSM_TUBE_DIFFUSE_IMAGE_SCALE;
float HSM_TUBE_DIFFUSE_IMAGE_SCALE_X;
float HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
float HSM_TUBE_SHADOW_IMAGE_ON;
float HSM_TUBE_SHADOW_IMAGE_OPACITY;
float HSM_TUBE_SHADOW_IMAGE_POS_X;
float HSM_TUBE_SHADOW_IMAGE_POS_Y;
float HSM_TUBE_SHADOW_IMAGE_SCALE_X;
float HSM_TUBE_SHADOW_IMAGE_SCALE_Y;
float HSM_TUBE_SHADOW_CURVATURE_SCALE;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY;
float HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY;
float HSM_TUBE_STATIC_BLACK_LEVEL;
float HSM_TUBE_STATIC_AMBIENT_LIGHTING;
float HSM_TUBE_STATIC_AMBIENT2_LIGHTING;
float HSM_TUBE_STATIC_SCALE;
float HSM_TUBE_STATIC_SCALE_X;
float HSM_TUBE_STATIC_POS_X;
float HSM_TUBE_STATIC_POS_Y;
float HSM_TUBE_STATIC_SHADOW_OPACITY;
float HSM_TUBE_STATIC_DITHER_SAMPLES;
float HSM_TUBE_STATIC_DITHER_DISTANCE;
float HSM_TUBE_STATIC_DITHER_AMOUNT;
float HSM_TUBE_OPACITY;
float HSM_TUBE_COLORED_GEL_IMAGE_ON;
float HSM_TUBE_COLORED_GEL_IMAGE_SCALE;
float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL;
float HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL;
float HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
float HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS;
float HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE;
float HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT;
float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING;
float HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING;
float HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL;
float HSM_DUALSCREEN_MODE;
float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
float HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
float HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET;
float HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION;
float HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
float HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS;
float HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
float HSM_2ND_SCREEN_INDEPENDENT_SCALE;
float HSM_2ND_SCREEN_SCALE_OFFSET;
float HSM_2ND_SCREEN_POS_X;
float HSM_2ND_SCREEN_POS_Y;
float HSM_2ND_SCREEN_CROP_PERCENT_ZOOM;
float HSM_2ND_SCREEN_CROP_PERCENT_TOP;
float HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM;
float HSM_2ND_SCREEN_CROP_PERCENT_LEFT;
float HSM_2ND_SCREEN_CROP_PERCENT_RIGHT;
float HSM_SCREEN_REFLECTION_SCALE;
float HSM_SCREEN_REFLECTION_POS_X;
float HSM_SCREEN_REFLECTION_POS_Y;
float HSM_AMBIENT1_HUE;
float HSM_AMBIENT1_SATURATION;
float HSM_AMBIENT1_VALUE;
float HSM_AMBIENT1_CONTRAST;
float HSM_AMBIENT1_SCALE_KEEP_ASPECT;
float HSM_AMBIENT1_SCALE_INHERIT_MODE;
float HSM_AMBIENT1_SCALE;
float HSM_AMBIENT1_SCALE_X;
float HSM_AMBIENT1_ROTATE;
float HSM_AMBIENT1_MIRROR_HORZ;
float HSM_AMBIENT1_POS_INHERIT_MODE;
float HSM_AMBIENT1_POSITION_X;
float HSM_AMBIENT1_POSITION_Y;
float HSM_AMBIENT1_DITHERING_SAMPLES;
float HSM_AMBIENT2_HUE;
float HSM_AMBIENT2_SATURATION;
float HSM_AMBIENT2_VALUE;
float HSM_AMBIENT2_CONTRAST;
float HSM_AMBIENT2_SCALE_KEEP_ASPECT;
float HSM_AMBIENT2_SCALE_INHERIT_MODE;
float HSM_AMBIENT2_SCALE;
float HSM_AMBIENT2_SCALE_X;
float HSM_AMBIENT2_ROTATE;
float HSM_AMBIENT2_MIRROR_HORZ;
float HSM_AMBIENT2_POS_INHERIT_MODE;
float HSM_AMBIENT2_POSITION_X;
float HSM_AMBIENT2_POSITION_Y;
float HSM_BZL_OPACITY;
float HSM_BZL_BLEND_MODE;
float HSM_BZL_WIDTH;
float HSM_BZL_HEIGHT;
float HSM_BZL_INNER_CORNER_RADIUS_SCALE;
float HSM_BZL_INNER_EDGE_THICKNESS;
float HSM_BZL_INNER_EDGE_SHARPNESS;
float HSM_BZL_OUTER_POSITION_Y;
float HSM_BZL_OUTER_CURVATURE_SCALE;
float HSM_BZL_OUTER_CORNER_RADIUS_SCALE;
float HSM_BZL_NOISE;
float HSM_BZL_INNER_EDGE_SHADOW;
float HSM_BZL_BRIGHTNESS;
float HSM_BZL_BRIGHTNESS_MULT_TOP;
float HSM_BZL_BRIGHTNESS_MULT_BOTTOM;
float HSM_BZL_BRIGHTNESS_MULT_SIDES;
float HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT;
float HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT;
float HSM_BZL_HIGHLIGHT;
float HSM_BZL_INNER_EDGE_HIGHLIGHT;
float HSM_BZL_COLOR_HUE;
float HSM_BZL_COLOR_SATURATION;
float HSM_BZL_COLOR_VALUE;
float HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_FRM_USE_INDEPENDENT_COLOR;
float HSM_FRM_COLOR_HUE;
float HSM_FRM_COLOR_SATURATION;
float HSM_FRM_COLOR_VALUE;
float HSM_FRM_OPACITY;
float HSM_FRM_BLEND_MODE;
float HSM_FRM_TEXTURE_OPACITY;
float HSM_FRM_TEXTURE_BLEND_MODE;
float HSM_FRM_NOISE;
float HSM_FRM_INNER_EDGE_THICKNESS;
float HSM_FRM_INNER_EDGE_HIGHLIGHT;
float HSM_FRM_THICKNESS;
float HSM_FRM_THICKNESS_SCALE_X;
float HSM_FRM_OUTER_POS_Y;
float HSM_FRM_OUTER_CURVATURE_SCALE;
float HSM_FRM_OUTER_CORNER_RADIUS;
float HSM_FRM_OUTER_EDGE_THICKNESS;
float HSM_FRM_OUTER_EDGE_SHADING;
float HSM_FRM_SHADOW_OPACITY;
float HSM_FRM_SHADOW_WIDTH;
float HSM_REFLECT_CORNER_FADE;
float HSM_REFLECT_CORNER_FADE_DISTANCE;
float HSM_REFLECT_CORNER_INNER_SPREAD;
float HSM_REFLECT_CORNER_OUTER_SPREAD;
float HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
float HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
float HSM_REFLECT_CORNER_SPREAD_FALLOFF;
float HSM_BG_LAYER_ORDER;
float HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
float HSM_LED_LAYER_ORDER;
float HSM_DEVICE_LAYER_ORDER;
float HSM_DEVICELED_LAYER_ORDER;
float HSM_CRT_LAYER_ORDER;
float HSM_DECAL_LAYER_ORDER;
float HSM_CAB_GLASS_LAYER_ORDER;
float HSM_TOP_LAYER_ORDER;
float HSM_CUTOUT_ASPECT_MODE;
float HSM_CUTOUT_EXPLICIT_ASPECT;
float HSM_CUTOUT_FOLLOW_LAYER;
float HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
float HSM_CUTOUT_SCALE;
float HSM_CUTOUT_SCALE_X;
float HSM_CUTOUT_POS_X;
float HSM_CUTOUT_POS_Y;
float HSM_CUTOUT_CORNER_RADIUS;
float HSM_LAYERING_DEBUG_MASK_MODE;
float HSM_BG_OPACITY;
float HSM_BG_COLORIZE_ON;
float HSM_BG_HUE;
float HSM_BG_SATURATION;
float HSM_BG_BRIGHTNESS;
float HSM_BG_GAMMA;
float HSM_BG_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_BG_BLEND_MODE;
float HSM_BG_SOURCE_MATTE_TYPE;
float HSM_BG_MIPMAPPING_BLEND_BIAS;
float HSM_BG_MASK_MODE;
float HSM_BG_CUTOUT_MODE;
float HSM_BG_DUALSCREEN_VIS_MODE;
float HSM_BG_FOLLOW_LAYER;
float HSM_BG_FOLLOW_MODE;
float HSM_BG_FOLLOW_FULL_USES_ZOOM;
float HSM_BG_FILL_MODE;
float HSM_BG_SPLIT_PRESERVE_CENTER;
float HSM_BG_SPLIT_REPEAT_WIDTH;
float HSM_BG_SCALE;
float HSM_BG_SCALE_X;
float HSM_BG_POS_X;
float HSM_BG_POS_Y;
float HSM_BG_WRAP_MODE;
float HSM_VIEWPORT_VIGNETTE_OPACITY;
float HSM_VIEWPORT_VIGNETTE_MASK_MODE;
float HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
float HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
float HSM_VIEWPORT_VIGNETTE_SCALE;
float HSM_VIEWPORT_VIGNETTE_SCALE_X;
float HSM_VIEWPORT_VIGNETTE_POS_X;
float HSM_VIEWPORT_VIGNETTE_POS_Y;
float HSM_LED_OPACITY;
float HSM_LED_COLORIZE_ON;
float HSM_LED_HUE;
float HSM_LED_SATURATION;
float HSM_LED_BRIGHTNESS;
float HSM_LED_GAMMA;
float HSM_LED_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_LED_BLEND_MODE;
float HSM_LED_SOURCE_MATTE_TYPE;
float HSM_LED_MASK_MODE;
float HSM_LED_MIPMAPPING_BLEND_BIAS;
float HSM_LED_CUTOUT_MODE;
float HSM_LED_DUALSCREEN_VIS_MODE;
float HSM_LED_FOLLOW_LAYER;
float HSM_LED_FOLLOW_MODE;
float HSM_LED_FOLLOW_FULL_USES_ZOOM;
float HSM_LED_FILL_MODE;
float HSM_LED_SPLIT_PRESERVE_CENTER;
float HSM_LED_SPLIT_REPEAT_WIDTH;
float HSM_LED_SCALE;
float HSM_LED_SCALE_X;
float HSM_LED_POS_X;
float HSM_LED_POS_Y;
float HSM_DEVICE_OPACITY;
float HSM_DEVICE_COLORIZE_ON;
float HSM_DEVICE_HUE;
float HSM_DEVICE_SATURATION;
float HSM_DEVICE_BRIGHTNESS;
float HSM_DEVICE_GAMMA;
float HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DEVICE_BLEND_MODE;
float HSM_DEVICE_SOURCE_MATTE_TYPE;
float HSM_DEVICE_MASK_MODE;
float HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
float HSM_DEVICE_CUTOUT_MODE;
float HSM_DEVICE_DUALSCREEN_VIS_MODE;
float HSM_DEVICE_FOLLOW_LAYER;
float HSM_DEVICE_FOLLOW_MODE;
float HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
float HSM_DEVICE_FILL_MODE;
float HSM_DEVICE_SPLIT_PRESERVE_CENTER;
float HSM_DEVICE_SPLIT_REPEAT_WIDTH;
float HSM_DEVICE_SCALE;
float HSM_DEVICE_SCALE_X;
float HSM_DEVICE_POS_X;
float HSM_DEVICE_POS_Y;
float HSM_DEVICELED_OPACITY;
float HSM_DEVICELED_COLORIZE_ON;
float HSM_DEVICELED_HUE;
float HSM_DEVICELED_SATURATION;
float HSM_DEVICELED_BRIGHTNESS;
float HSM_DEVICELED_GAMMA;
float HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DEVICELED_BLEND_MODE;
float HSM_DEVICELED_SOURCE_MATTE_TYPE;
float HSM_DEVICELED_MASK_MODE;
float HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
float HSM_DEVICELED_CUTOUT_MODE;
float HSM_DEVICELED_DUALSCREEN_VIS_MODE;
float HSM_DEVICELED_FOLLOW_LAYER;
float HSM_DEVICELED_FOLLOW_MODE;
float HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
float HSM_DEVICELED_FILL_MODE;
float HSM_DEVICELED_SPLIT_PRESERVE_CENTER;
float HSM_DEVICELED_SPLIT_REPEAT_WIDTH;
float HSM_DEVICELED_SCALE;
float HSM_DEVICELED_SCALE_X;
float HSM_DEVICELED_POS_X;
float HSM_DEVICELED_POS_Y;
float HSM_DECAL_OPACITY;
float HSM_DECAL_COLORIZE_ON;
float HSM_DECAL_HUE;
float HSM_DECAL_SATURATION;
float HSM_DECAL_BRIGHTNESS;
float HSM_DECAL_GAMMA;
float HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_DECAL_BLEND_MODE;
float HSM_DECAL_SOURCE_MATTE_TYPE;
float HSM_DECAL_MIPMAPPING_BLEND_BIAS;
float HSM_DECAL_MASK_MODE;
float HSM_DECAL_CUTOUT_MODE;
float HSM_DECAL_DUALSCREEN_VIS_MODE;
float HSM_DECAL_FOLLOW_LAYER;
float HSM_DECAL_FOLLOW_MODE;
float HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
float HSM_DECAL_FILL_MODE;
float HSM_DECAL_SPLIT_PRESERVE_CENTER;
float HSM_DECAL_SPLIT_REPEAT_WIDTH;
float HSM_DECAL_SCALE;
float HSM_DECAL_SCALE_X;
float HSM_DECAL_POS_X;
float HSM_DECAL_POS_Y;
float HSM_CAB_GLASS_OPACITY;
float HSM_CAB_GLASS_COLORIZE_ON;
float HSM_CAB_GLASS_HUE;
float HSM_CAB_GLASS_SATURATION;
float HSM_CAB_GLASS_BRIGHTNESS;
float HSM_CAB_GLASS_GAMMA;
float HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_CAB_GLASS_BLEND_MODE;
float HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
float HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
float HSM_CAB_GLASS_MASK_MODE;
float HSM_CAB_GLASS_CUTOUT_MODE;
float HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
float HSM_CAB_GLASS_FOLLOW_LAYER;
float HSM_CAB_GLASS_FOLLOW_MODE;
float HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
float HSM_CAB_GLASS_FILL_MODE;
float HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER;
float HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH;
float HSM_CAB_GLASS_SCALE;
float HSM_CAB_GLASS_SCALE_X;
float HSM_CAB_GLASS_POS_X;
float HSM_CAB_GLASS_POS_Y;
float HSM_TOP_OPACITY;
float HSM_TOP_COLORIZE_ON;
float HSM_TOP_HUE;
float HSM_TOP_SATURATION;
float HSM_TOP_BRIGHTNESS;
float HSM_TOP_GAMMA;
float HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER;
float HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER;
float HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
float HSM_TOP_BLEND_MODE;
float HSM_TOP_SOURCE_MATTE_TYPE;
float HSM_TOP_MIPMAPPING_BLEND_BIAS;
float HSM_TOP_MASK_MODE;
float HSM_TOP_CUTOUT_MODE;
float HSM_TOP_DUALSCREEN_VIS_MODE;
float HSM_TOP_FOLLOW_LAYER;
float HSM_TOP_FOLLOW_MODE;
float HSM_TOP_FOLLOW_FULL_USES_ZOOM;
float HSM_TOP_FILL_MODE;
float HSM_TOP_SPLIT_PRESERVE_CENTER;
float HSM_TOP_SPLIT_REPEAT_WIDTH;
float HSM_TOP_SCALE;
float HSM_TOP_SCALE_X;
float HSM_TOP_POS_X;
float HSM_TOP_POS_Y;
float HSM_TOP_MIRROR_WRAP;
float HSM_RENDER_SIMPLE_MODE;
float HSM_RENDER_SIMPLE_MASK_TYPE;
vec2 ch_spc;
vec2 ch_exc;
vec2 ch_quo;
vec2 ch_hsh;
vec2 ch_dol;
vec2 ch_pct;
vec2 ch_amp;
vec2 ch_apo;
vec2 ch_lbr;
vec2 ch_rbr;
vec2 ch_ast;
vec2 ch_crs;
vec2 ch_per;
vec2 ch_dsh;
vec2 ch_com;
vec2 ch_lsl;
vec2 ch_0;
vec2 ch_1;
vec2 ch_2;
vec2 ch_3;
vec2 ch_4;
vec2 ch_5;
vec2 ch_6;
vec2 ch_7;
vec2 ch_8;
vec2 ch_9;
vec2 ch_col;
vec2 ch_scl;
vec2 ch_les;
vec2 ch_equ;
vec2 ch_grt;
vec2 ch_que;
vec2 ch_ats;
vec2 ch_A;
vec2 ch_B;
vec2 ch_C;
vec2 ch_D;
vec2 ch_E;
vec2 ch_F;
vec2 ch_G;
vec2 ch_H;
vec2 ch_I;
vec2 ch_J;
vec2 ch_K;
vec2 ch_L;
vec2 ch_M;
vec2 ch_N;
vec2 ch_O;
vec2 ch_P;
vec2 ch_Q;
vec2 ch_R;
vec2 ch_S;
vec2 ch_T;
vec2 ch_U;
vec2 ch_V;
vec2 ch_W;
vec2 ch_X;
vec2 ch_Y;
vec2 ch_Z;
vec2 ch_lsb;
vec2 ch_rsl;
vec2 ch_rsb;
vec2 ch_pow;
vec2 ch_usc;
vec2 ch_a;
vec2 ch_b;
vec2 ch_c;
vec2 ch_d;
vec2 ch_e;
vec2 ch_f;
vec2 ch_g;
vec2 ch_h;
vec2 ch_i;
vec2 ch_j;
vec2 ch_k;
vec2 ch_l;
vec2 ch_m;
vec2 ch_n;
vec2 ch_o;
vec2 ch_p;
vec2 ch_q;
vec2 ch_r;
vec2 ch_s;
vec2 ch_t;
vec2 ch_u;
vec2 ch_v;
vec2 ch_w;
vec2 ch_x;
vec2 ch_y;
vec2 ch_z;
vec2 ch_lpa;
vec2 ch_bar;
vec2 ch_rpa;
vec2 ch_tid;
vec2 ch_lar;
float TEXT_MASK;
vec2 CUR_UV;
vec2 print_pos;
vec2 res;

vec2 HSM_GetViewportCoordWithFlip(vec2 viewport_coord)
{
    vec2 out_coord = viewport_coord;
    if (HSM_FLIP_VIEWPORT_VERTICAL == (-1.0))
    {
        out_coord.y = 1.0 - out_coord.y;
    }
    if (HSM_FLIP_VIEWPORT_HORIZONTAL == (-1.0))
    {
        out_coord.x = 1.0 - out_coord.x;
    }
    return out_coord;
}

vec2 HSM_GetViewportCoordWithZoomAndPan(vec2 viewport_coord)
{
    vec2 param = viewport_coord;
    vec2 out_coord = HSM_GetViewportCoordWithFlip(param);
    out_coord = ((out_coord - vec2(0.5)) / vec2(HSM_VIEWPORT_ZOOM)) + vec2(0.5);
    out_coord.x += HSM_VIEWPORT_POSITION_X;
    out_coord.y -= HSM_VIEWPORT_POSITION_Y;
    return out_coord;
}

float HSM_GetScreenIndex(vec2 viewport_coord)
{
    float out_index = 1.0;
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    if (HSM_DUALSCREEN_MODE == 0.0)
    {
        out_index = 1.0;
    }
    if (HSM_DUALSCREEN_MODE == 1.0)
    {
        out_index = float((viewport_coord.y < (0.5 + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    if (HSM_DUALSCREEN_MODE == 2.0)
    {
        out_index = float((viewport_coord.x < (0.5 + (HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / output_aspect))) ? 1 : 2);
    }
    return out_index;
}

vec4 HSM_GetCacheSampleRange(float column_index, float row_index)
{
    float num_rows = 8.0;
    float num_columns = 8.0;
    float range_width = 1.0 / num_columns;
    float range_height = 1.0 / num_rows;
    float zero_based_row_index = row_index - 1.0;
    float zero_based_column_index = column_index - 1.0;
    vec4 out_sample_range = vec4(0.0);
    out_sample_range.x = zero_based_column_index * range_width;
    out_sample_range.y = zero_based_row_index * range_height;
    out_sample_range.z = out_sample_range.x + range_width;
    out_sample_range.w = out_sample_range.y + range_height;
    return out_sample_range;
}

vec2 HSM_GetCacheSampleCoord(float column_index, float row_index)
{
    float num_rows = 8.0;
    float num_columns = 8.0;
    float range_width = 1.0 / num_columns;
    float range_height = 1.0 / num_rows;
    float param = column_index;
    float param_1 = row_index;
    vec4 sample_range = HSM_GetCacheSampleRange(param, param_1);
    return vec2(sample_range.x + (range_width / 2.0), sample_range.y + (range_height / 2.0));
}

vec2 HSM_GetCoordWithPositionOffset(vec2 in_coord, vec2 position_offset)
{
    return in_coord - position_offset;
}

vec2 HSM_GetInverseScaledCoord(vec2 in_coord, vec2 in_scale)
{
    vec2 middle = vec2(0.499989986419677734375);
    vec2 diff = in_coord - middle;
    vec2 screen_inverse_scale = vec2(1.0) / in_scale;
    vec2 scaled_coord = middle + (diff * screen_inverse_scale);
    return scaled_coord;
}

vec2 HSM_GetVTexCoordWithArgs(vec2 in_coord, vec2 in_scale, vec2 position_offset)
{
    vec2 param = in_coord;
    vec2 param_1 = position_offset;
    vec2 param_2 = HSM_GetCoordWithPositionOffset(param, param_1);
    vec2 param_3 = in_scale;
    return HSM_GetInverseScaledCoord(param_2, param_3);
}

vec4 HSM_UpdateGlobalScreenValuesFromCache(sampler2D in_cache_pass, vec2 vTexCoord_1)
{
    float output_aspect = global.FinalViewportSize.x / global.FinalViewportSize.y;
    vec2 param = vTexCoord_1;
    vec2 flipped_viewport_coord = HSM_GetViewportCoordWithZoomAndPan(param);
    vec2 param_1 = flipped_viewport_coord;
    SCREEN_INDEX = HSM_GetScreenIndex(param_1);
    vec2 sample_coord = vec2(0.0);
    vec4 texture_sample = vec4(0.0);
    float param_2 = 1.0;
    float param_3 = 1.0;
    sample_coord = HSM_GetCacheSampleCoord(param_2, param_3);
    texture_sample = texture(in_cache_pass, sample_coord);
    AVERAGE_LUMA = texture_sample.w;
    SAMPLING_SCANLINE_DIR_MULT = texture_sample.x;
    SAMPLING_OPPOSITE_DIR_MULT = texture_sample.y;
    float res_mult_size_sum = 0.0;
    float res_mult_size2_sum = 0.0;
    if (SCREEN_INDEX == 1.0)
    {
        float param_4 = 2.0;
        float param_5 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_4, param_5);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.zw;
        float param_6 = 3.0;
        float param_7 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_6, param_7);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_8 = 3.0;
        float param_9 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_8, param_9);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.xy;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_10 = 4.0;
        float param_11 = 1.0;
        sample_coord = HSM_GetCacheSampleCoord(param_10, param_11);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        ROTATED_CORE_PREPPED_SIZE = texture_sample.zw;
        float param_12 = 1.0;
        float param_13 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_12, param_13);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_14 = 4.0;
        float param_15 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_14, param_15);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_SIZE = texture_sample.xy;
    }
    if (SCREEN_INDEX == 2.0)
    {
        float param_16 = 2.0;
        float param_17 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_16, param_17);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_ASPECT = texture_sample.x;
        SCREEN_SCALE = texture_sample.yz;
        float param_18 = 3.0;
        float param_19 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_18, param_19);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_SCALE = texture_sample.xy;
        SCREEN_POS_OFFSET = texture_sample.zw;
        float param_20 = 3.0;
        float param_21 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_20, param_21);
        texture_sample = texture(in_cache_pass, sample_coord);
        TUBE_DIFFUSE_SCALE = texture_sample.zw;
        TUBE_DIFFUSE_ASPECT = (TUBE_DIFFUSE_SCALE.x / TUBE_DIFFUSE_SCALE.y) * output_aspect;
        float param_22 = 4.0;
        float param_23 = 2.0;
        sample_coord = HSM_GetCacheSampleCoord(param_22, param_23);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE_WITH_RES_MULT = texture_sample.xy;
        res_mult_size2_sum = CROPPED_ROTATED_SIZE_WITH_RES_MULT.x + CROPPED_ROTATED_SIZE_WITH_RES_MULT.y;
        float param_24 = 1.0;
        float param_25 = 3.0;
        sample_coord = HSM_GetCacheSampleCoord(param_24, param_25);
        texture_sample = texture(in_cache_pass, sample_coord);
        CROPPED_ROTATED_SIZE = texture_sample.xy;
        SAMPLE_AREA_START_PIXEL_COORD = texture_sample.zw;
        float param_26 = 4.0;
        float param_27 = 4.0;
        sample_coord = HSM_GetCacheSampleCoord(param_26, param_27);
        texture_sample = texture(in_cache_pass, sample_coord);
        SCREEN_SIZE = texture_sample.zw;
    }
    float param_28 = 3.0;
    float param_29 = 1.0;
    sample_coord = HSM_GetCacheSampleCoord(param_28, param_29);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_POS_OFFSET_1ST_SCREEN = texture_sample.zw;
    float param_30 = 3.0;
    float param_31 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_30, param_31);
    texture_sample = texture(in_cache_pass, sample_coord);
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = texture_sample.xy;
    float param_32 = 3.0;
    float param_33 = 2.0;
    sample_coord = HSM_GetCacheSampleCoord(param_32, param_33);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_34 = 3.0;
    float param_35 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_34, param_35);
    texture_sample = texture(in_cache_pass, sample_coord);
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = texture_sample.zw;
    float param_36 = 2.0;
    float param_37 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_36, param_37);
    texture_sample = texture(in_cache_pass, sample_coord);
    CORE_SIZE = texture_sample.xy;
    ROTATED_CORE_ORIGINAL_SIZE = texture_sample.zw;
    float param_38 = 3.0;
    float param_39 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_38, param_39);
    texture_sample = texture(in_cache_pass, sample_coord);
    VIEWPORT_SCALE = texture_sample.xy;
    VIEWPORT_POS = texture_sample.zw;
    float param_40 = 4.0;
    float param_41 = 3.0;
    sample_coord = HSM_GetCacheSampleCoord(param_40, param_41);
    texture_sample = texture(in_cache_pass, sample_coord);
    SCREEN_SCALE_2ND_SCREEN = texture_sample.xy;
    SCREEN_POS_OFFSET_2ND_SCREEN = texture_sample.zw;
    float param_42 = 1.0;
    float param_43 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_42, param_43);
    texture_sample = texture(in_cache_pass, sample_coord);
    CURRENT_FRAME_FROM_CACHE_INFO = texture_sample.y;
    ROTATED_DEREZED_SIZE = texture_sample.zw;
    float param_44 = 2.0;
    float param_45 = 4.0;
    sample_coord = HSM_GetCacheSampleCoord(param_44, param_45);
    texture_sample = texture(in_cache_pass, sample_coord);
    NEGATIVE_CROP_EXPAND_MULTIPLIER = texture_sample.x;
    MAX_NEGATIVE_CROP = texture_sample.y;
    USE_VERTICAL_SCANLINES = texture_sample.z;
    float param_46 = 8.0;
    float param_47 = 8.0;
    sample_coord = HSM_GetCacheSampleCoord(param_46, param_47);
    texture_sample = texture(in_cache_pass, sample_coord);
    CACHE_INFO_CHANGED = (texture_sample.x > 0.5) ? true : false;
    SCREEN_SCALE_WITH_ZOOM = SCREEN_SCALE * HSM_VIEWPORT_ZOOM;
    vec2 param_48 = flipped_viewport_coord;
    vec2 param_49 = SCREEN_SCALE;
    vec2 param_50 = SCREEN_POS_OFFSET;
    SCREEN_COORD = HSM_GetVTexCoordWithArgs(param_48, param_49, param_50);
    vec2 param_51 = flipped_viewport_coord;
    vec2 param_52 = TUBE_DIFFUSE_SCALE;
    vec2 param_53 = SCREEN_POS_OFFSET;
    TUBE_DIFFUSE_COORD = HSM_GetVTexCoordWithArgs(param_51, param_52, param_53);
    vec2 param_54 = flipped_viewport_coord;
    vec2 param_55 = TUBE_DIFFUSE_SCALE_1ST_SCREEN;
    vec2 param_56 = (SCREEN_POS_OFFSET_1ST_SCREEN + SCREEN_POS_OFFSET_2ND_SCREEN) / vec2(2.0);
    TUBE_DIFFUSE_COORD_MIXED_POS = HSM_GetVTexCoordWithArgs(param_54, param_55, param_56);
    return vec4(0.0);
}

vec2 GetIntegerScaleMult(vec2 screen_size, vec2 cropped_size)
{
    float epsilon = 0.00999999977648258209228515625;
    vec2 integer_scale = screen_size / cropped_size;
    float _5578;
    if (abs(integer_scale.x - round(integer_scale.x)) < epsilon)
    {
        _5578 = round(integer_scale.x);
    }
    else
    {
        _5578 = integer_scale.x;
    }
    float _5597;
    if (abs(integer_scale.y - round(integer_scale.y)) < epsilon)
    {
        _5597 = round(integer_scale.y);
    }
    else
    {
        _5597 = integer_scale.y;
    }
    integer_scale = vec2(_5578, _5597);
    return integer_scale;
}

vec4 GetScreenRegion(vec2 screen_size)
{
    vec2 position_offset = ((SCREEN_POS_OFFSET * global.FinalViewportSize.xy) * HSM_VIEWPORT_ZOOM) + ((vec2(-HSM_VIEWPORT_POSITION_X, HSM_VIEWPORT_POSITION_Y) * HSM_VIEWPORT_ZOOM) * global.FinalViewportSize.xy);
    vec2 top_left = ((global.FinalViewportSize.xy / vec2(2.0)) - (screen_size / vec2(2.0))) + position_offset;
    vec2 bottom_right = ((global.FinalViewportSize.xy / vec2(2.0)) + (screen_size / vec2(2.0))) + position_offset;
    vec4 out_region = round(vec4(top_left, bottom_right));
    return out_region;
}

float extract_bit(float n, inout float b)
{
    b = clamp(b, -1.0, 22.0);
    return floor(mod(floor(n / pow(2.0, floor(b))), 2.0));
}

float sprite(vec2 spr, vec2 size, inout vec2 uv)
{
    uv = floor(uv);
    float bit = ((size.x - uv.x) - 1.0) + (uv.y * size.x);
    bool bounds = all(greaterThanEqual(uv, vec2(0.0)));
    bool _3067;
    if (bounds)
    {
        _3067 = all(lessThan(uv, size));
    }
    else
    {
        _3067 = bounds;
    }
    bounds = _3067;
    float _3069;
    if (bounds)
    {
        float param = spr.x;
        float param_1 = bit - 21.0;
        float _3079 = extract_bit(param, param_1);
        float param_2 = spr.y;
        float param_3 = bit;
        float _3085 = extract_bit(param_2, param_3);
        _3069 = _3079 + _3085;
    }
    else
    {
        _3069 = 0.0;
    }
    return _3069;
}

float char_px(vec2 ch, vec2 uv)
{
    vec2 param = ch;
    vec2 param_1 = vec2(6.0, 7.0);
    vec2 param_2 = uv - print_pos;
    float _3101 = sprite(param, param_1, param_2);
    float px = _3101;
    print_pos.x += 6.0;
    return px;
}

vec2 get_digit(inout float d)
{
    d = floor(d);
    if (d == 0.0)
    {
        return ch_0;
    }
    if (d == 1.0)
    {
        return ch_1;
    }
    if (d == 2.0)
    {
        return ch_2;
    }
    if (d == 3.0)
    {
        return ch_3;
    }
    if (d == 4.0)
    {
        return ch_4;
    }
    if (d == 5.0)
    {
        return ch_5;
    }
    if (d == 6.0)
    {
        return ch_6;
    }
    if (d == 7.0)
    {
        return ch_7;
    }
    if (d == 8.0)
    {
        return ch_8;
    }
    if (d == 9.0)
    {
        return ch_9;
    }
    return vec2(0.0);
}

float print_integer(float number, int zeros, vec2 uv)
{
    float result = 0.0;
    for (int i = 4; i >= 0; i--)
    {
        float digit = mod(number / pow(10.0, float(i)), 10.0);
        if (((abs(number) > pow(10.0, float(i))) || (zeros > i)) || (i == 0))
        {
            float param = digit;
            vec2 _3289 = get_digit(param);
            vec2 param_1 = _3289;
            vec2 param_2 = uv;
            float _3293 = char_px(param_1, param_2);
            result += _3293;
        }
    }
    return result;
}

float print_number(float number, vec2 pos, vec2 uv)
{
    vec2 dec_pos = pos;
    float result = 0.0;
    for (int i = 3; i >= (-2); i--)
    {
        float clip = float((abs(number) > pow(10.0, float(i))) || (i == 0));
        float digit = mod(number / pow(10.0, float(i)), 10.0);
        if (i == (-1))
        {
            vec2 param = ch_per;
            vec2 param_1 = vec2(6.0, 7.0);
            vec2 param_2 = uv - dec_pos;
            float _3220 = sprite(param, param_1, param_2);
            result += (_3220 * clip);
            dec_pos.x += (6.0 * clip);
        }
        float param_3 = digit;
        vec2 _3233 = get_digit(param_3);
        vec2 param_4 = _3233;
        vec2 param_5 = vec2(6.0, 7.0);
        vec2 param_6 = uv - dec_pos;
        float _3240 = sprite(param_4, param_5, param_6);
        result += (_3240 * clip);
        dec_pos.x += (6.0 * clip);
    }
    return result;
}

float DrawResolutions(vec2 uv, vec2 viewport_size, vec2 screen_size, vec4 screen_region, vec2 derezed_size, vec2 negative_crop_added_size, vec2 cropped_original_size, vec2 sampling_res, vec2 int_mult)
{
    float col = 0.0;
    float current_line_index = 0.0;
    float margin = 11.0;
    print_pos = vec2(margin, 0.0);
    print_pos.x = margin;
    print_pos.y += 11.0;
    TEXT_MASK = 0.0;
    CUR_UV = uv;
    vec2 param = ch_V;
    vec2 param_1 = CUR_UV;
    float _3318 = char_px(param, param_1);
    TEXT_MASK += _3318;
    vec2 param_2 = ch_i;
    vec2 param_3 = CUR_UV;
    float _3325 = char_px(param_2, param_3);
    TEXT_MASK += _3325;
    vec2 param_4 = ch_e;
    vec2 param_5 = CUR_UV;
    float _3332 = char_px(param_4, param_5);
    TEXT_MASK += _3332;
    vec2 param_6 = ch_w;
    vec2 param_7 = CUR_UV;
    float _3339 = char_px(param_6, param_7);
    TEXT_MASK += _3339;
    vec2 param_8 = ch_p;
    vec2 param_9 = CUR_UV;
    float _3346 = char_px(param_8, param_9);
    TEXT_MASK += _3346;
    vec2 param_10 = ch_o;
    vec2 param_11 = CUR_UV;
    float _3353 = char_px(param_10, param_11);
    TEXT_MASK += _3353;
    vec2 param_12 = ch_r;
    vec2 param_13 = CUR_UV;
    float _3360 = char_px(param_12, param_13);
    TEXT_MASK += _3360;
    vec2 param_14 = ch_t;
    vec2 param_15 = CUR_UV;
    float _3367 = char_px(param_14, param_15);
    TEXT_MASK += _3367;
    vec2 param_16 = ch_spc;
    vec2 param_17 = CUR_UV;
    float _3374 = char_px(param_16, param_17);
    TEXT_MASK += _3374;
    vec2 param_18 = ch_dsh;
    vec2 param_19 = CUR_UV;
    float _3381 = char_px(param_18, param_19);
    TEXT_MASK += _3381;
    vec2 param_20 = ch_dsh;
    vec2 param_21 = CUR_UV;
    float _3388 = char_px(param_20, param_21);
    TEXT_MASK += _3388;
    vec2 param_22 = ch_dsh;
    vec2 param_23 = CUR_UV;
    float _3395 = char_px(param_22, param_23);
    TEXT_MASK += _3395;
    vec2 param_24 = ch_dsh;
    vec2 param_25 = CUR_UV;
    float _3402 = char_px(param_24, param_25);
    TEXT_MASK += _3402;
    vec2 param_26 = ch_dsh;
    vec2 param_27 = CUR_UV;
    float _3409 = char_px(param_26, param_27);
    TEXT_MASK += _3409;
    vec2 param_28 = ch_dsh;
    vec2 param_29 = CUR_UV;
    float _3416 = char_px(param_28, param_29);
    TEXT_MASK += _3416;
    vec2 param_30 = ch_spc;
    vec2 param_31 = CUR_UV;
    float _3423 = char_px(param_30, param_31);
    TEXT_MASK += _3423;
    float param_32 = viewport_size.x;
    int param_33 = 0;
    vec2 param_34 = uv;
    float _3432 = print_integer(param_32, param_33, param_34);
    TEXT_MASK += _3432;
    vec2 param_35 = ch_spc;
    vec2 param_36 = CUR_UV;
    float _3439 = char_px(param_35, param_36);
    TEXT_MASK += _3439;
    vec2 param_37 = ch_x;
    vec2 param_38 = CUR_UV;
    float _3446 = char_px(param_37, param_38);
    TEXT_MASK += _3446;
    vec2 param_39 = ch_spc;
    vec2 param_40 = CUR_UV;
    float _3453 = char_px(param_39, param_40);
    TEXT_MASK += _3453;
    float param_41 = viewport_size.y;
    int param_42 = 0;
    vec2 param_43 = uv;
    float _3462 = print_integer(param_41, param_42, param_43);
    TEXT_MASK += _3462;
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_44 = ch_S;
    vec2 param_45 = CUR_UV;
    float _3475 = char_px(param_44, param_45);
    TEXT_MASK += _3475;
    vec2 param_46 = ch_c;
    vec2 param_47 = CUR_UV;
    float _3482 = char_px(param_46, param_47);
    TEXT_MASK += _3482;
    vec2 param_48 = ch_r;
    vec2 param_49 = CUR_UV;
    float _3489 = char_px(param_48, param_49);
    TEXT_MASK += _3489;
    vec2 param_50 = ch_e;
    vec2 param_51 = CUR_UV;
    float _3496 = char_px(param_50, param_51);
    TEXT_MASK += _3496;
    vec2 param_52 = ch_e;
    vec2 param_53 = CUR_UV;
    float _3503 = char_px(param_52, param_53);
    TEXT_MASK += _3503;
    vec2 param_54 = ch_n;
    vec2 param_55 = CUR_UV;
    float _3510 = char_px(param_54, param_55);
    TEXT_MASK += _3510;
    vec2 param_56 = ch_spc;
    vec2 param_57 = CUR_UV;
    float _3517 = char_px(param_56, param_57);
    TEXT_MASK += _3517;
    vec2 param_58 = ch_R;
    vec2 param_59 = CUR_UV;
    float _3524 = char_px(param_58, param_59);
    TEXT_MASK += _3524;
    vec2 param_60 = ch_e;
    vec2 param_61 = CUR_UV;
    float _3531 = char_px(param_60, param_61);
    TEXT_MASK += _3531;
    vec2 param_62 = ch_g;
    vec2 param_63 = CUR_UV;
    float _3538 = char_px(param_62, param_63);
    TEXT_MASK += _3538;
    vec2 param_64 = ch_i;
    vec2 param_65 = CUR_UV;
    float _3545 = char_px(param_64, param_65);
    TEXT_MASK += _3545;
    vec2 param_66 = ch_o;
    vec2 param_67 = CUR_UV;
    float _3552 = char_px(param_66, param_67);
    TEXT_MASK += _3552;
    vec2 param_68 = ch_n;
    vec2 param_69 = CUR_UV;
    float _3559 = char_px(param_68, param_69);
    TEXT_MASK += _3559;
    vec2 param_70 = ch_spc;
    vec2 param_71 = CUR_UV;
    float _3566 = char_px(param_70, param_71);
    TEXT_MASK += _3566;
    vec2 param_72 = ch_dsh;
    vec2 param_73 = CUR_UV;
    float _3573 = char_px(param_72, param_73);
    TEXT_MASK += _3573;
    vec2 param_74 = ch_spc;
    vec2 param_75 = CUR_UV;
    float _3580 = char_px(param_74, param_75);
    TEXT_MASK += _3580;
    float param_76 = screen_region.x;
    int param_77 = 0;
    vec2 param_78 = uv;
    float _3589 = print_integer(param_76, param_77, param_78);
    TEXT_MASK += _3589;
    vec2 param_79 = ch_spc;
    vec2 param_80 = CUR_UV;
    float _3596 = char_px(param_79, param_80);
    TEXT_MASK += _3596;
    float param_81 = screen_region.y;
    int param_82 = 0;
    vec2 param_83 = uv;
    float _3605 = print_integer(param_81, param_82, param_83);
    TEXT_MASK += _3605;
    vec2 param_84 = ch_spc;
    vec2 param_85 = CUR_UV;
    float _3612 = char_px(param_84, param_85);
    TEXT_MASK += _3612;
    float param_86 = screen_region.z;
    int param_87 = 0;
    vec2 param_88 = uv;
    float _3621 = print_integer(param_86, param_87, param_88);
    TEXT_MASK += _3621;
    vec2 param_89 = ch_spc;
    vec2 param_90 = CUR_UV;
    float _3628 = char_px(param_89, param_90);
    TEXT_MASK += _3628;
    float param_91 = screen_region.w;
    int param_92 = 0;
    vec2 param_93 = uv;
    float _3637 = print_integer(param_91, param_92, param_93);
    TEXT_MASK += _3637;
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_94 = ch_S;
    vec2 param_95 = CUR_UV;
    float _3650 = char_px(param_94, param_95);
    TEXT_MASK += _3650;
    vec2 param_96 = ch_c;
    vec2 param_97 = CUR_UV;
    float _3657 = char_px(param_96, param_97);
    TEXT_MASK += _3657;
    vec2 param_98 = ch_r;
    vec2 param_99 = CUR_UV;
    float _3664 = char_px(param_98, param_99);
    TEXT_MASK += _3664;
    vec2 param_100 = ch_e;
    vec2 param_101 = CUR_UV;
    float _3671 = char_px(param_100, param_101);
    TEXT_MASK += _3671;
    vec2 param_102 = ch_e;
    vec2 param_103 = CUR_UV;
    float _3678 = char_px(param_102, param_103);
    TEXT_MASK += _3678;
    vec2 param_104 = ch_n;
    vec2 param_105 = CUR_UV;
    float _3685 = char_px(param_104, param_105);
    TEXT_MASK += _3685;
    vec2 param_106 = ch_spc;
    vec2 param_107 = CUR_UV;
    float _3692 = char_px(param_106, param_107);
    TEXT_MASK += _3692;
    vec2 param_108 = ch_dsh;
    vec2 param_109 = CUR_UV;
    float _3699 = char_px(param_108, param_109);
    TEXT_MASK += _3699;
    vec2 param_110 = ch_dsh;
    vec2 param_111 = CUR_UV;
    float _3706 = char_px(param_110, param_111);
    TEXT_MASK += _3706;
    vec2 param_112 = ch_dsh;
    vec2 param_113 = CUR_UV;
    float _3713 = char_px(param_112, param_113);
    TEXT_MASK += _3713;
    vec2 param_114 = ch_dsh;
    vec2 param_115 = CUR_UV;
    float _3720 = char_px(param_114, param_115);
    TEXT_MASK += _3720;
    vec2 param_116 = ch_dsh;
    vec2 param_117 = CUR_UV;
    float _3727 = char_px(param_116, param_117);
    TEXT_MASK += _3727;
    vec2 param_118 = ch_dsh;
    vec2 param_119 = CUR_UV;
    float _3734 = char_px(param_118, param_119);
    TEXT_MASK += _3734;
    vec2 param_120 = ch_dsh;
    vec2 param_121 = CUR_UV;
    float _3741 = char_px(param_120, param_121);
    TEXT_MASK += _3741;
    vec2 param_122 = ch_dsh;
    vec2 param_123 = CUR_UV;
    float _3748 = char_px(param_122, param_123);
    TEXT_MASK += _3748;
    vec2 param_124 = ch_spc;
    vec2 param_125 = CUR_UV;
    float _3755 = char_px(param_124, param_125);
    TEXT_MASK += _3755;
    float param_126 = screen_size.x;
    int param_127 = 0;
    vec2 param_128 = uv;
    float _3764 = print_integer(param_126, param_127, param_128);
    TEXT_MASK += _3764;
    vec2 param_129 = ch_spc;
    vec2 param_130 = CUR_UV;
    float _3771 = char_px(param_129, param_130);
    TEXT_MASK += _3771;
    vec2 param_131 = ch_x;
    vec2 param_132 = CUR_UV;
    float _3778 = char_px(param_131, param_132);
    TEXT_MASK += _3778;
    vec2 param_133 = ch_spc;
    vec2 param_134 = CUR_UV;
    float _3785 = char_px(param_133, param_134);
    TEXT_MASK += _3785;
    float param_135 = screen_size.y;
    int param_136 = 0;
    vec2 param_137 = uv;
    float _3794 = print_integer(param_135, param_136, param_137);
    TEXT_MASK += _3794;
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_138 = ch_F;
    vec2 param_139 = CUR_UV;
    float _3807 = char_px(param_138, param_139);
    TEXT_MASK += _3807;
    vec2 param_140 = ch_i;
    vec2 param_141 = CUR_UV;
    float _3814 = char_px(param_140, param_141);
    TEXT_MASK += _3814;
    vec2 param_142 = ch_n;
    vec2 param_143 = CUR_UV;
    float _3821 = char_px(param_142, param_143);
    TEXT_MASK += _3821;
    vec2 param_144 = ch_a;
    vec2 param_145 = CUR_UV;
    float _3828 = char_px(param_144, param_145);
    TEXT_MASK += _3828;
    vec2 param_146 = ch_l;
    vec2 param_147 = CUR_UV;
    float _3835 = char_px(param_146, param_147);
    TEXT_MASK += _3835;
    vec2 param_148 = ch_spc;
    vec2 param_149 = CUR_UV;
    float _3842 = char_px(param_148, param_149);
    TEXT_MASK += _3842;
    vec2 param_150 = ch_A;
    vec2 param_151 = CUR_UV;
    float _3849 = char_px(param_150, param_151);
    TEXT_MASK += _3849;
    vec2 param_152 = ch_s;
    vec2 param_153 = CUR_UV;
    float _3856 = char_px(param_152, param_153);
    TEXT_MASK += _3856;
    vec2 param_154 = ch_p;
    vec2 param_155 = CUR_UV;
    float _3863 = char_px(param_154, param_155);
    TEXT_MASK += _3863;
    vec2 param_156 = ch_e;
    vec2 param_157 = CUR_UV;
    float _3870 = char_px(param_156, param_157);
    TEXT_MASK += _3870;
    vec2 param_158 = ch_c;
    vec2 param_159 = CUR_UV;
    float _3877 = char_px(param_158, param_159);
    TEXT_MASK += _3877;
    vec2 param_160 = ch_t;
    vec2 param_161 = CUR_UV;
    float _3884 = char_px(param_160, param_161);
    TEXT_MASK += _3884;
    vec2 param_162 = ch_spc;
    vec2 param_163 = CUR_UV;
    float _3891 = char_px(param_162, param_163);
    TEXT_MASK += _3891;
    vec2 param_164 = ch_dsh;
    vec2 param_165 = CUR_UV;
    float _3898 = char_px(param_164, param_165);
    TEXT_MASK += _3898;
    vec2 param_166 = ch_dsh;
    vec2 param_167 = CUR_UV;
    float _3905 = char_px(param_166, param_167);
    TEXT_MASK += _3905;
    vec2 param_168 = ch_spc;
    vec2 param_169 = CUR_UV;
    float _3912 = char_px(param_168, param_169);
    TEXT_MASK += _3912;
    float _3921;
    if ((screen_size.x / screen_size.y) > 1.0)
    {
        _3921 = screen_size.x / screen_size.y;
    }
    else
    {
        _3921 = screen_size.y / screen_size.x;
    }
    float param_170 = _3921;
    vec2 param_171 = print_pos;
    vec2 param_172 = uv;
    TEXT_MASK += print_number(param_170, param_171, param_172);
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_173 = ch_N;
    vec2 param_174 = CUR_UV;
    float _3954 = char_px(param_173, param_174);
    TEXT_MASK += _3954;
    vec2 param_175 = ch_o;
    vec2 param_176 = CUR_UV;
    float _3961 = char_px(param_175, param_176);
    TEXT_MASK += _3961;
    vec2 param_177 = ch_n;
    vec2 param_178 = CUR_UV;
    float _3968 = char_px(param_177, param_178);
    TEXT_MASK += _3968;
    vec2 param_179 = ch_spc;
    vec2 param_180 = CUR_UV;
    float _3975 = char_px(param_179, param_180);
    TEXT_MASK += _3975;
    vec2 param_181 = ch_I;
    vec2 param_182 = CUR_UV;
    float _3982 = char_px(param_181, param_182);
    TEXT_MASK += _3982;
    vec2 param_183 = ch_n;
    vec2 param_184 = CUR_UV;
    float _3989 = char_px(param_183, param_184);
    TEXT_MASK += _3989;
    vec2 param_185 = ch_t;
    vec2 param_186 = CUR_UV;
    float _3996 = char_px(param_185, param_186);
    TEXT_MASK += _3996;
    vec2 param_187 = ch_spc;
    vec2 param_188 = CUR_UV;
    float _4003 = char_px(param_187, param_188);
    TEXT_MASK += _4003;
    vec2 param_189 = ch_S;
    vec2 param_190 = CUR_UV;
    float _4010 = char_px(param_189, param_190);
    TEXT_MASK += _4010;
    vec2 param_191 = ch_c;
    vec2 param_192 = CUR_UV;
    float _4017 = char_px(param_191, param_192);
    TEXT_MASK += _4017;
    vec2 param_193 = ch_l;
    vec2 param_194 = CUR_UV;
    float _4024 = char_px(param_193, param_194);
    TEXT_MASK += _4024;
    vec2 param_195 = ch_spc;
    vec2 param_196 = CUR_UV;
    float _4031 = char_px(param_195, param_196);
    TEXT_MASK += _4031;
    vec2 param_197 = ch_pct;
    vec2 param_198 = CUR_UV;
    float _4038 = char_px(param_197, param_198);
    TEXT_MASK += _4038;
    vec2 param_199 = ch_dsh;
    vec2 param_200 = CUR_UV;
    float _4045 = char_px(param_199, param_200);
    TEXT_MASK += _4045;
    vec2 param_201 = ch_dsh;
    vec2 param_202 = CUR_UV;
    float _4052 = char_px(param_201, param_202);
    TEXT_MASK += _4052;
    vec2 param_203 = ch_spc;
    vec2 param_204 = CUR_UV;
    float _4059 = char_px(param_203, param_204);
    TEXT_MASK += _4059;
    float param_205 = (screen_size.y / viewport_size.y) * 100.0;
    vec2 param_206 = print_pos;
    vec2 param_207 = uv;
    TEXT_MASK += print_number(param_205, param_206, param_207);
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_208 = ch_I;
    vec2 param_209 = CUR_UV;
    float _4086 = char_px(param_208, param_209);
    TEXT_MASK += _4086;
    vec2 param_210 = ch_n;
    vec2 param_211 = CUR_UV;
    float _4093 = char_px(param_210, param_211);
    TEXT_MASK += _4093;
    vec2 param_212 = ch_t;
    vec2 param_213 = CUR_UV;
    float _4100 = char_px(param_212, param_213);
    TEXT_MASK += _4100;
    vec2 param_214 = ch_spc;
    vec2 param_215 = CUR_UV;
    float _4107 = char_px(param_214, param_215);
    TEXT_MASK += _4107;
    vec2 param_216 = ch_S;
    vec2 param_217 = CUR_UV;
    float _4114 = char_px(param_216, param_217);
    TEXT_MASK += _4114;
    vec2 param_218 = ch_c;
    vec2 param_219 = CUR_UV;
    float _4121 = char_px(param_218, param_219);
    TEXT_MASK += _4121;
    vec2 param_220 = ch_l;
    vec2 param_221 = CUR_UV;
    float _4128 = char_px(param_220, param_221);
    TEXT_MASK += _4128;
    vec2 param_222 = ch_spc;
    vec2 param_223 = CUR_UV;
    float _4135 = char_px(param_222, param_223);
    TEXT_MASK += _4135;
    vec2 param_224 = ch_V;
    vec2 param_225 = CUR_UV;
    float _4142 = char_px(param_224, param_225);
    TEXT_MASK += _4142;
    vec2 param_226 = ch_e;
    vec2 param_227 = CUR_UV;
    float _4149 = char_px(param_226, param_227);
    TEXT_MASK += _4149;
    vec2 param_228 = ch_r;
    vec2 param_229 = CUR_UV;
    float _4156 = char_px(param_228, param_229);
    TEXT_MASK += _4156;
    vec2 param_230 = ch_t;
    vec2 param_231 = CUR_UV;
    float _4163 = char_px(param_230, param_231);
    TEXT_MASK += _4163;
    vec2 param_232 = ch_spc;
    vec2 param_233 = CUR_UV;
    float _4170 = char_px(param_232, param_233);
    TEXT_MASK += _4170;
    vec2 param_234 = ch_dsh;
    vec2 param_235 = CUR_UV;
    float _4177 = char_px(param_234, param_235);
    TEXT_MASK += _4177;
    vec2 param_236 = ch_dsh;
    vec2 param_237 = CUR_UV;
    float _4184 = char_px(param_236, param_237);
    TEXT_MASK += _4184;
    vec2 param_238 = ch_spc;
    vec2 param_239 = CUR_UV;
    float _4191 = char_px(param_238, param_239);
    TEXT_MASK += _4191;
    if (fract(int_mult.y) < 0.00999999977648258209228515625)
    {
        float param_240 = int_mult.y;
        int param_241 = 0;
        vec2 param_242 = uv;
        float _4207 = print_integer(param_240, param_241, param_242);
        TEXT_MASK += _4207;
    }
    else
    {
        float param_243 = int_mult.y;
        vec2 param_244 = print_pos;
        vec2 param_245 = uv;
        TEXT_MASK += print_number(param_243, param_244, param_245);
    }
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_246 = ch_I;
    vec2 param_247 = CUR_UV;
    float _4231 = char_px(param_246, param_247);
    TEXT_MASK += _4231;
    vec2 param_248 = ch_n;
    vec2 param_249 = CUR_UV;
    float _4238 = char_px(param_248, param_249);
    TEXT_MASK += _4238;
    vec2 param_250 = ch_t;
    vec2 param_251 = CUR_UV;
    float _4245 = char_px(param_250, param_251);
    TEXT_MASK += _4245;
    vec2 param_252 = ch_spc;
    vec2 param_253 = CUR_UV;
    float _4252 = char_px(param_252, param_253);
    TEXT_MASK += _4252;
    vec2 param_254 = ch_S;
    vec2 param_255 = CUR_UV;
    float _4259 = char_px(param_254, param_255);
    TEXT_MASK += _4259;
    vec2 param_256 = ch_c;
    vec2 param_257 = CUR_UV;
    float _4266 = char_px(param_256, param_257);
    TEXT_MASK += _4266;
    vec2 param_258 = ch_l;
    vec2 param_259 = CUR_UV;
    float _4273 = char_px(param_258, param_259);
    TEXT_MASK += _4273;
    vec2 param_260 = ch_spc;
    vec2 param_261 = CUR_UV;
    float _4280 = char_px(param_260, param_261);
    TEXT_MASK += _4280;
    vec2 param_262 = ch_H;
    vec2 param_263 = CUR_UV;
    float _4287 = char_px(param_262, param_263);
    TEXT_MASK += _4287;
    vec2 param_264 = ch_o;
    vec2 param_265 = CUR_UV;
    float _4294 = char_px(param_264, param_265);
    TEXT_MASK += _4294;
    vec2 param_266 = ch_r;
    vec2 param_267 = CUR_UV;
    float _4301 = char_px(param_266, param_267);
    TEXT_MASK += _4301;
    vec2 param_268 = ch_z;
    vec2 param_269 = CUR_UV;
    float _4308 = char_px(param_268, param_269);
    TEXT_MASK += _4308;
    vec2 param_270 = ch_spc;
    vec2 param_271 = CUR_UV;
    float _4315 = char_px(param_270, param_271);
    TEXT_MASK += _4315;
    vec2 param_272 = ch_dsh;
    vec2 param_273 = CUR_UV;
    float _4322 = char_px(param_272, param_273);
    TEXT_MASK += _4322;
    vec2 param_274 = ch_dsh;
    vec2 param_275 = CUR_UV;
    float _4329 = char_px(param_274, param_275);
    TEXT_MASK += _4329;
    vec2 param_276 = ch_spc;
    vec2 param_277 = CUR_UV;
    float _4336 = char_px(param_276, param_277);
    TEXT_MASK += _4336;
    if (fract(int_mult.x) < 0.00999999977648258209228515625)
    {
        float param_278 = int_mult.x;
        int param_279 = 0;
        vec2 param_280 = uv;
        float _4351 = print_integer(param_278, param_279, param_280);
        TEXT_MASK += _4351;
    }
    else
    {
        float param_281 = int_mult.x;
        vec2 param_282 = print_pos;
        vec2 param_283 = uv;
        TEXT_MASK += print_number(param_281, param_282, param_283);
    }
    bool _4369 = cropped_original_size.x != sampling_res.x;
    bool _4378;
    if (!_4369)
    {
        _4378 = cropped_original_size.y != sampling_res.y;
    }
    else
    {
        _4378 = _4369;
    }
    if (_4378)
    {
        print_pos.x = margin;
        print_pos.y += 11.0;
        vec2 param_284 = ch_S;
        vec2 param_285 = CUR_UV;
        float _4391 = char_px(param_284, param_285);
        TEXT_MASK += _4391;
        vec2 param_286 = ch_a;
        vec2 param_287 = CUR_UV;
        float _4398 = char_px(param_286, param_287);
        TEXT_MASK += _4398;
        vec2 param_288 = ch_m;
        vec2 param_289 = CUR_UV;
        float _4405 = char_px(param_288, param_289);
        TEXT_MASK += _4405;
        vec2 param_290 = ch_p;
        vec2 param_291 = CUR_UV;
        float _4412 = char_px(param_290, param_291);
        TEXT_MASK += _4412;
        vec2 param_292 = ch_l;
        vec2 param_293 = CUR_UV;
        float _4419 = char_px(param_292, param_293);
        TEXT_MASK += _4419;
        vec2 param_294 = ch_i;
        vec2 param_295 = CUR_UV;
        float _4426 = char_px(param_294, param_295);
        TEXT_MASK += _4426;
        vec2 param_296 = ch_n;
        vec2 param_297 = CUR_UV;
        float _4433 = char_px(param_296, param_297);
        TEXT_MASK += _4433;
        vec2 param_298 = ch_g;
        vec2 param_299 = CUR_UV;
        float _4440 = char_px(param_298, param_299);
        TEXT_MASK += _4440;
        vec2 param_300 = ch_spc;
        vec2 param_301 = CUR_UV;
        float _4447 = char_px(param_300, param_301);
        TEXT_MASK += _4447;
        vec2 param_302 = ch_R;
        vec2 param_303 = CUR_UV;
        float _4454 = char_px(param_302, param_303);
        TEXT_MASK += _4454;
        vec2 param_304 = ch_e;
        vec2 param_305 = CUR_UV;
        float _4461 = char_px(param_304, param_305);
        TEXT_MASK += _4461;
        vec2 param_306 = ch_s;
        vec2 param_307 = CUR_UV;
        float _4468 = char_px(param_306, param_307);
        TEXT_MASK += _4468;
        vec2 param_308 = ch_spc;
        vec2 param_309 = CUR_UV;
        float _4475 = char_px(param_308, param_309);
        TEXT_MASK += _4475;
        vec2 param_310 = ch_dsh;
        vec2 param_311 = CUR_UV;
        float _4482 = char_px(param_310, param_311);
        TEXT_MASK += _4482;
        vec2 param_312 = ch_dsh;
        vec2 param_313 = CUR_UV;
        float _4489 = char_px(param_312, param_313);
        TEXT_MASK += _4489;
        vec2 param_314 = ch_spc;
        vec2 param_315 = CUR_UV;
        float _4496 = char_px(param_314, param_315);
        TEXT_MASK += _4496;
        float param_316 = sampling_res.x;
        int param_317 = 0;
        vec2 param_318 = uv;
        float _4505 = print_integer(param_316, param_317, param_318);
        TEXT_MASK += _4505;
        vec2 param_319 = ch_spc;
        vec2 param_320 = CUR_UV;
        float _4512 = char_px(param_319, param_320);
        TEXT_MASK += _4512;
        vec2 param_321 = ch_x;
        vec2 param_322 = CUR_UV;
        float _4519 = char_px(param_321, param_322);
        TEXT_MASK += _4519;
        vec2 param_323 = ch_spc;
        vec2 param_324 = CUR_UV;
        float _4526 = char_px(param_323, param_324);
        TEXT_MASK += _4526;
        float param_325 = sampling_res.y;
        int param_326 = 0;
        vec2 param_327 = uv;
        float _4535 = print_integer(param_325, param_326, param_327);
        TEXT_MASK += _4535;
    }
    bool _4542 = cropped_original_size.x != ROTATED_CORE_PREPPED_SIZE.x;
    bool _4551;
    if (!_4542)
    {
        _4551 = cropped_original_size.y != ROTATED_CORE_PREPPED_SIZE.y;
    }
    else
    {
        _4551 = _4542;
    }
    if (_4551)
    {
        print_pos.x = margin;
        print_pos.y += 11.0;
        vec2 param_328 = ch_C;
        vec2 param_329 = CUR_UV;
        float _4564 = char_px(param_328, param_329);
        TEXT_MASK += _4564;
        vec2 param_330 = ch_r;
        vec2 param_331 = CUR_UV;
        float _4571 = char_px(param_330, param_331);
        TEXT_MASK += _4571;
        vec2 param_332 = ch_o;
        vec2 param_333 = CUR_UV;
        float _4578 = char_px(param_332, param_333);
        TEXT_MASK += _4578;
        vec2 param_334 = ch_p;
        vec2 param_335 = CUR_UV;
        float _4585 = char_px(param_334, param_335);
        TEXT_MASK += _4585;
        vec2 param_336 = ch_p;
        vec2 param_337 = CUR_UV;
        float _4592 = char_px(param_336, param_337);
        TEXT_MASK += _4592;
        vec2 param_338 = ch_e;
        vec2 param_339 = CUR_UV;
        float _4599 = char_px(param_338, param_339);
        TEXT_MASK += _4599;
        vec2 param_340 = ch_d;
        vec2 param_341 = CUR_UV;
        float _4606 = char_px(param_340, param_341);
        TEXT_MASK += _4606;
        vec2 param_342 = ch_spc;
        vec2 param_343 = CUR_UV;
        float _4613 = char_px(param_342, param_343);
        TEXT_MASK += _4613;
        vec2 param_344 = ch_dsh;
        vec2 param_345 = CUR_UV;
        float _4620 = char_px(param_344, param_345);
        TEXT_MASK += _4620;
        vec2 param_346 = ch_dsh;
        vec2 param_347 = CUR_UV;
        float _4627 = char_px(param_346, param_347);
        TEXT_MASK += _4627;
        vec2 param_348 = ch_dsh;
        vec2 param_349 = CUR_UV;
        float _4634 = char_px(param_348, param_349);
        TEXT_MASK += _4634;
        vec2 param_350 = ch_dsh;
        vec2 param_351 = CUR_UV;
        float _4641 = char_px(param_350, param_351);
        TEXT_MASK += _4641;
        vec2 param_352 = ch_dsh;
        vec2 param_353 = CUR_UV;
        float _4648 = char_px(param_352, param_353);
        TEXT_MASK += _4648;
        vec2 param_354 = ch_dsh;
        vec2 param_355 = CUR_UV;
        float _4655 = char_px(param_354, param_355);
        TEXT_MASK += _4655;
        vec2 param_356 = ch_dsh;
        vec2 param_357 = CUR_UV;
        float _4662 = char_px(param_356, param_357);
        TEXT_MASK += _4662;
        vec2 param_358 = ch_spc;
        vec2 param_359 = CUR_UV;
        float _4669 = char_px(param_358, param_359);
        TEXT_MASK += _4669;
        float param_360 = cropped_original_size.x;
        int param_361 = 0;
        vec2 param_362 = uv;
        float _4678 = print_integer(param_360, param_361, param_362);
        TEXT_MASK += _4678;
        vec2 param_363 = ch_spc;
        vec2 param_364 = CUR_UV;
        float _4685 = char_px(param_363, param_364);
        TEXT_MASK += _4685;
        vec2 param_365 = ch_x;
        vec2 param_366 = CUR_UV;
        float _4692 = char_px(param_365, param_366);
        TEXT_MASK += _4692;
        vec2 param_367 = ch_spc;
        vec2 param_368 = CUR_UV;
        float _4699 = char_px(param_367, param_368);
        TEXT_MASK += _4699;
        float param_369 = cropped_original_size.y;
        int param_370 = 0;
        vec2 param_371 = uv;
        float _4708 = print_integer(param_369, param_370, param_371);
        TEXT_MASK += _4708;
    }
    bool _4715 = derezed_size.x != ROTATED_CORE_PREPPED_SIZE.x;
    bool _4724;
    if (!_4715)
    {
        _4724 = derezed_size.y != ROTATED_CORE_PREPPED_SIZE.y;
    }
    else
    {
        _4724 = _4715;
    }
    if (_4724)
    {
        print_pos.x = margin;
        print_pos.y += 11.0;
        vec2 param_372 = ch_N;
        vec2 param_373 = CUR_UV;
        float _4737 = char_px(param_372, param_373);
        TEXT_MASK += _4737;
        vec2 param_374 = ch_e;
        vec2 param_375 = CUR_UV;
        float _4744 = char_px(param_374, param_375);
        TEXT_MASK += _4744;
        vec2 param_376 = ch_g;
        vec2 param_377 = CUR_UV;
        float _4751 = char_px(param_376, param_377);
        TEXT_MASK += _4751;
        vec2 param_378 = ch_dsh;
        vec2 param_379 = CUR_UV;
        float _4758 = char_px(param_378, param_379);
        TEXT_MASK += _4758;
        vec2 param_380 = ch_C;
        vec2 param_381 = CUR_UV;
        float _4765 = char_px(param_380, param_381);
        TEXT_MASK += _4765;
        vec2 param_382 = ch_r;
        vec2 param_383 = CUR_UV;
        float _4772 = char_px(param_382, param_383);
        TEXT_MASK += _4772;
        vec2 param_384 = ch_o;
        vec2 param_385 = CUR_UV;
        float _4779 = char_px(param_384, param_385);
        TEXT_MASK += _4779;
        vec2 param_386 = ch_p;
        vec2 param_387 = CUR_UV;
        float _4786 = char_px(param_386, param_387);
        TEXT_MASK += _4786;
        vec2 param_388 = ch_spc;
        vec2 param_389 = CUR_UV;
        float _4793 = char_px(param_388, param_389);
        TEXT_MASK += _4793;
        vec2 param_390 = ch_A;
        vec2 param_391 = CUR_UV;
        float _4800 = char_px(param_390, param_391);
        TEXT_MASK += _4800;
        vec2 param_392 = ch_d;
        vec2 param_393 = CUR_UV;
        float _4807 = char_px(param_392, param_393);
        TEXT_MASK += _4807;
        vec2 param_394 = ch_d;
        vec2 param_395 = CUR_UV;
        float _4814 = char_px(param_394, param_395);
        TEXT_MASK += _4814;
        vec2 param_396 = ch_spc;
        vec2 param_397 = CUR_UV;
        float _4821 = char_px(param_396, param_397);
        TEXT_MASK += _4821;
        vec2 param_398 = ch_dsh;
        vec2 param_399 = CUR_UV;
        float _4828 = char_px(param_398, param_399);
        TEXT_MASK += _4828;
        vec2 param_400 = ch_dsh;
        vec2 param_401 = CUR_UV;
        float _4835 = char_px(param_400, param_401);
        TEXT_MASK += _4835;
        vec2 param_402 = ch_spc;
        vec2 param_403 = CUR_UV;
        float _4842 = char_px(param_402, param_403);
        TEXT_MASK += _4842;
        float param_404 = ROTATED_CORE_PREPPED_SIZE.x;
        int param_405 = 0;
        vec2 param_406 = uv;
        float _4851 = print_integer(param_404, param_405, param_406);
        TEXT_MASK += _4851;
        vec2 param_407 = ch_spc;
        vec2 param_408 = CUR_UV;
        float _4858 = char_px(param_407, param_408);
        TEXT_MASK += _4858;
        vec2 param_409 = ch_x;
        vec2 param_410 = CUR_UV;
        float _4865 = char_px(param_409, param_410);
        TEXT_MASK += _4865;
        vec2 param_411 = ch_spc;
        vec2 param_412 = CUR_UV;
        float _4872 = char_px(param_411, param_412);
        TEXT_MASK += _4872;
        float param_413 = ROTATED_CORE_PREPPED_SIZE.y;
        int param_414 = 0;
        vec2 param_415 = uv;
        float _4881 = print_integer(param_413, param_414, param_415);
        TEXT_MASK += _4881;
    }
    bool _4888 = derezed_size.x != ROTATED_CORE_ORIGINAL_SIZE.x;
    bool _4897;
    if (!_4888)
    {
        _4897 = derezed_size.y != ROTATED_CORE_ORIGINAL_SIZE.y;
    }
    else
    {
        _4897 = _4888;
    }
    if (_4897)
    {
        print_pos.x = margin;
        print_pos.y += 11.0;
        vec2 param_416 = ch_D;
        vec2 param_417 = CUR_UV;
        float _4910 = char_px(param_416, param_417);
        TEXT_MASK += _4910;
        vec2 param_418 = ch_e;
        vec2 param_419 = CUR_UV;
        float _4917 = char_px(param_418, param_419);
        TEXT_MASK += _4917;
        vec2 param_420 = ch_r;
        vec2 param_421 = CUR_UV;
        float _4924 = char_px(param_420, param_421);
        TEXT_MASK += _4924;
        vec2 param_422 = ch_e;
        vec2 param_423 = CUR_UV;
        float _4931 = char_px(param_422, param_423);
        TEXT_MASK += _4931;
        vec2 param_424 = ch_z;
        vec2 param_425 = CUR_UV;
        float _4938 = char_px(param_424, param_425);
        TEXT_MASK += _4938;
        vec2 param_426 = ch_e;
        vec2 param_427 = CUR_UV;
        float _4945 = char_px(param_426, param_427);
        TEXT_MASK += _4945;
        vec2 param_428 = ch_d;
        vec2 param_429 = CUR_UV;
        float _4952 = char_px(param_428, param_429);
        TEXT_MASK += _4952;
        vec2 param_430 = ch_spc;
        vec2 param_431 = CUR_UV;
        float _4959 = char_px(param_430, param_431);
        TEXT_MASK += _4959;
        vec2 param_432 = ch_dsh;
        vec2 param_433 = CUR_UV;
        float _4966 = char_px(param_432, param_433);
        TEXT_MASK += _4966;
        vec2 param_434 = ch_dsh;
        vec2 param_435 = CUR_UV;
        float _4973 = char_px(param_434, param_435);
        TEXT_MASK += _4973;
        vec2 param_436 = ch_dsh;
        vec2 param_437 = CUR_UV;
        float _4980 = char_px(param_436, param_437);
        TEXT_MASK += _4980;
        vec2 param_438 = ch_dsh;
        vec2 param_439 = CUR_UV;
        float _4987 = char_px(param_438, param_439);
        TEXT_MASK += _4987;
        vec2 param_440 = ch_dsh;
        vec2 param_441 = CUR_UV;
        float _4994 = char_px(param_440, param_441);
        TEXT_MASK += _4994;
        vec2 param_442 = ch_dsh;
        vec2 param_443 = CUR_UV;
        float _5001 = char_px(param_442, param_443);
        TEXT_MASK += _5001;
        vec2 param_444 = ch_dsh;
        vec2 param_445 = CUR_UV;
        float _5008 = char_px(param_444, param_445);
        TEXT_MASK += _5008;
        vec2 param_446 = ch_spc;
        vec2 param_447 = CUR_UV;
        float _5015 = char_px(param_446, param_447);
        TEXT_MASK += _5015;
        float param_448 = derezed_size.x;
        int param_449 = 0;
        vec2 param_450 = uv;
        float _5024 = print_integer(param_448, param_449, param_450);
        TEXT_MASK += _5024;
        vec2 param_451 = ch_spc;
        vec2 param_452 = CUR_UV;
        float _5031 = char_px(param_451, param_452);
        TEXT_MASK += _5031;
        vec2 param_453 = ch_x;
        vec2 param_454 = CUR_UV;
        float _5038 = char_px(param_453, param_454);
        TEXT_MASK += _5038;
        vec2 param_455 = ch_spc;
        vec2 param_456 = CUR_UV;
        float _5045 = char_px(param_455, param_456);
        TEXT_MASK += _5045;
        float param_457 = derezed_size.y;
        int param_458 = 0;
        vec2 param_459 = uv;
        float _5054 = print_integer(param_457, param_458, param_459);
        TEXT_MASK += _5054;
    }
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_460 = ch_C;
    vec2 param_461 = CUR_UV;
    float _5067 = char_px(param_460, param_461);
    TEXT_MASK += _5067;
    vec2 param_462 = ch_o;
    vec2 param_463 = CUR_UV;
    float _5074 = char_px(param_462, param_463);
    TEXT_MASK += _5074;
    vec2 param_464 = ch_r;
    vec2 param_465 = CUR_UV;
    float _5081 = char_px(param_464, param_465);
    TEXT_MASK += _5081;
    vec2 param_466 = ch_e;
    vec2 param_467 = CUR_UV;
    float _5088 = char_px(param_466, param_467);
    TEXT_MASK += _5088;
    vec2 param_468 = ch_spc;
    vec2 param_469 = CUR_UV;
    float _5095 = char_px(param_468, param_469);
    TEXT_MASK += _5095;
    vec2 param_470 = ch_dsh;
    vec2 param_471 = CUR_UV;
    float _5102 = char_px(param_470, param_471);
    TEXT_MASK += _5102;
    vec2 param_472 = ch_dsh;
    vec2 param_473 = CUR_UV;
    float _5109 = char_px(param_472, param_473);
    TEXT_MASK += _5109;
    vec2 param_474 = ch_dsh;
    vec2 param_475 = CUR_UV;
    float _5116 = char_px(param_474, param_475);
    TEXT_MASK += _5116;
    vec2 param_476 = ch_dsh;
    vec2 param_477 = CUR_UV;
    float _5123 = char_px(param_476, param_477);
    TEXT_MASK += _5123;
    vec2 param_478 = ch_dsh;
    vec2 param_479 = CUR_UV;
    float _5130 = char_px(param_478, param_479);
    TEXT_MASK += _5130;
    vec2 param_480 = ch_dsh;
    vec2 param_481 = CUR_UV;
    float _5137 = char_px(param_480, param_481);
    TEXT_MASK += _5137;
    vec2 param_482 = ch_dsh;
    vec2 param_483 = CUR_UV;
    float _5144 = char_px(param_482, param_483);
    TEXT_MASK += _5144;
    vec2 param_484 = ch_dsh;
    vec2 param_485 = CUR_UV;
    float _5151 = char_px(param_484, param_485);
    TEXT_MASK += _5151;
    vec2 param_486 = ch_dsh;
    vec2 param_487 = CUR_UV;
    float _5158 = char_px(param_486, param_487);
    TEXT_MASK += _5158;
    vec2 param_488 = ch_dsh;
    vec2 param_489 = CUR_UV;
    float _5165 = char_px(param_488, param_489);
    TEXT_MASK += _5165;
    vec2 param_490 = ch_spc;
    vec2 param_491 = CUR_UV;
    float _5172 = char_px(param_490, param_491);
    TEXT_MASK += _5172;
    float param_492 = ROTATED_CORE_ORIGINAL_SIZE.x;
    int param_493 = 0;
    vec2 param_494 = uv;
    float _5181 = print_integer(param_492, param_493, param_494);
    TEXT_MASK += _5181;
    vec2 param_495 = ch_spc;
    vec2 param_496 = CUR_UV;
    float _5188 = char_px(param_495, param_496);
    TEXT_MASK += _5188;
    vec2 param_497 = ch_x;
    vec2 param_498 = CUR_UV;
    float _5195 = char_px(param_497, param_498);
    TEXT_MASK += _5195;
    vec2 param_499 = ch_spc;
    vec2 param_500 = CUR_UV;
    float _5202 = char_px(param_499, param_500);
    TEXT_MASK += _5202;
    float param_501 = ROTATED_CORE_ORIGINAL_SIZE.y;
    int param_502 = 0;
    vec2 param_503 = uv;
    float _5211 = print_integer(param_501, param_502, param_503);
    TEXT_MASK += _5211;
    print_pos.x = margin;
    print_pos.y += 22.0;
    vec2 param_504 = ch_S;
    vec2 param_505 = CUR_UV;
    float _5224 = char_px(param_504, param_505);
    TEXT_MASK += _5224;
    vec2 param_506 = ch_T;
    vec2 param_507 = CUR_UV;
    float _5231 = char_px(param_506, param_507);
    TEXT_MASK += _5231;
    vec2 param_508 = ch_A;
    vec2 param_509 = CUR_UV;
    float _5238 = char_px(param_508, param_509);
    TEXT_MASK += _5238;
    vec2 param_510 = ch_N;
    vec2 param_511 = CUR_UV;
    float _5245 = char_px(param_510, param_511);
    TEXT_MASK += _5245;
    vec2 param_512 = ch_D;
    vec2 param_513 = CUR_UV;
    float _5252 = char_px(param_512, param_513);
    TEXT_MASK += _5252;
    vec2 param_514 = ch_A;
    vec2 param_515 = CUR_UV;
    float _5259 = char_px(param_514, param_515);
    TEXT_MASK += _5259;
    vec2 param_516 = ch_R;
    vec2 param_517 = CUR_UV;
    float _5266 = char_px(param_516, param_517);
    TEXT_MASK += _5266;
    vec2 param_518 = ch_D;
    vec2 param_519 = CUR_UV;
    float _5273 = char_px(param_518, param_519);
    TEXT_MASK += _5273;
    vec2 param_520 = ch_spc;
    vec2 param_521 = CUR_UV;
    float _5280 = char_px(param_520, param_521);
    TEXT_MASK += _5280;
    vec2 param_522 = ch_N;
    vec2 param_523 = CUR_UV;
    float _5287 = char_px(param_522, param_523);
    TEXT_MASK += _5287;
    vec2 param_524 = ch_O;
    vec2 param_525 = CUR_UV;
    float _5294 = char_px(param_524, param_525);
    TEXT_MASK += _5294;
    vec2 param_526 = ch_spc;
    vec2 param_527 = CUR_UV;
    float _5301 = char_px(param_526, param_527);
    TEXT_MASK += _5301;
    vec2 param_528 = ch_R;
    vec2 param_529 = CUR_UV;
    float _5308 = char_px(param_528, param_529);
    TEXT_MASK += _5308;
    vec2 param_530 = ch_E;
    vec2 param_531 = CUR_UV;
    float _5315 = char_px(param_530, param_531);
    TEXT_MASK += _5315;
    vec2 param_532 = ch_F;
    vec2 param_533 = CUR_UV;
    float _5322 = char_px(param_532, param_533);
    TEXT_MASK += _5322;
    vec2 param_534 = ch_L;
    vec2 param_535 = CUR_UV;
    float _5329 = char_px(param_534, param_535);
    TEXT_MASK += _5329;
    vec2 param_536 = ch_E;
    vec2 param_537 = CUR_UV;
    float _5336 = char_px(param_536, param_537);
    TEXT_MASK += _5336;
    vec2 param_538 = ch_C;
    vec2 param_539 = CUR_UV;
    float _5343 = char_px(param_538, param_539);
    TEXT_MASK += _5343;
    vec2 param_540 = ch_T;
    vec2 param_541 = CUR_UV;
    float _5350 = char_px(param_540, param_541);
    TEXT_MASK += _5350;
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_542 = ch_1;
    vec2 param_543 = CUR_UV;
    float _5363 = char_px(param_542, param_543);
    TEXT_MASK += _5363;
    vec2 param_544 = ch_per;
    vec2 param_545 = CUR_UV;
    float _5370 = char_px(param_544, param_545);
    TEXT_MASK += _5370;
    vec2 param_546 = ch_1;
    vec2 param_547 = CUR_UV;
    float _5377 = char_px(param_546, param_547);
    TEXT_MASK += _5377;
    vec2 param_548 = ch_4;
    vec2 param_549 = CUR_UV;
    float _5384 = char_px(param_548, param_549);
    TEXT_MASK += _5384;
    vec2 param_550 = ch_per;
    vec2 param_551 = CUR_UV;
    float _5391 = char_px(param_550, param_551);
    TEXT_MASK += _5391;
    vec2 param_552 = ch_0;
    vec2 param_553 = CUR_UV;
    float _5398 = char_px(param_552, param_553);
    TEXT_MASK += _5398;
    vec2 param_554 = ch_spc;
    vec2 param_555 = CUR_UV;
    float _5405 = char_px(param_554, param_555);
    TEXT_MASK += _5405;
    vec2 param_556 = ch_2;
    vec2 param_557 = CUR_UV;
    float _5412 = char_px(param_556, param_557);
    TEXT_MASK += _5412;
    vec2 param_558 = ch_0;
    vec2 param_559 = CUR_UV;
    float _5419 = char_px(param_558, param_559);
    TEXT_MASK += _5419;
    vec2 param_560 = ch_2;
    vec2 param_561 = CUR_UV;
    float _5426 = char_px(param_560, param_561);
    TEXT_MASK += _5426;
    vec2 param_562 = ch_3;
    vec2 param_563 = CUR_UV;
    float _5433 = char_px(param_562, param_563);
    TEXT_MASK += _5433;
    vec2 param_564 = ch_dsh;
    vec2 param_565 = CUR_UV;
    float _5440 = char_px(param_564, param_565);
    TEXT_MASK += _5440;
    vec2 param_566 = ch_0;
    vec2 param_567 = CUR_UV;
    float _5447 = char_px(param_566, param_567);
    TEXT_MASK += _5447;
    vec2 param_568 = ch_4;
    vec2 param_569 = CUR_UV;
    float _5454 = char_px(param_568, param_569);
    TEXT_MASK += _5454;
    vec2 param_570 = ch_dsh;
    vec2 param_571 = CUR_UV;
    float _5461 = char_px(param_570, param_571);
    TEXT_MASK += _5461;
    vec2 param_572 = ch_1;
    vec2 param_573 = CUR_UV;
    float _5468 = char_px(param_572, param_573);
    TEXT_MASK += _5468;
    vec2 param_574 = ch_5;
    vec2 param_575 = CUR_UV;
    float _5475 = char_px(param_574, param_575);
    TEXT_MASK += _5475;
    print_pos.x = margin;
    print_pos.y += 11.0;
    vec2 param_576 = ch_M;
    vec2 param_577 = CUR_UV;
    float _5488 = char_px(param_576, param_577);
    TEXT_MASK += _5488;
    vec2 param_578 = ch_E;
    vec2 param_579 = CUR_UV;
    float _5495 = char_px(param_578, param_579);
    TEXT_MASK += _5495;
    vec2 param_580 = ch_G;
    vec2 param_581 = CUR_UV;
    float _5502 = char_px(param_580, param_581);
    TEXT_MASK += _5502;
    vec2 param_582 = ch_A;
    vec2 param_583 = CUR_UV;
    float _5509 = char_px(param_582, param_583);
    TEXT_MASK += _5509;
    vec2 param_584 = ch_spc;
    vec2 param_585 = CUR_UV;
    float _5516 = char_px(param_584, param_585);
    TEXT_MASK += _5516;
    vec2 param_586 = ch_B;
    vec2 param_587 = CUR_UV;
    float _5523 = char_px(param_586, param_587);
    TEXT_MASK += _5523;
    vec2 param_588 = ch_E;
    vec2 param_589 = CUR_UV;
    float _5530 = char_px(param_588, param_589);
    TEXT_MASK += _5530;
    vec2 param_590 = ch_Z;
    vec2 param_591 = CUR_UV;
    float _5537 = char_px(param_590, param_591);
    TEXT_MASK += _5537;
    vec2 param_592 = ch_E;
    vec2 param_593 = CUR_UV;
    float _5544 = char_px(param_592, param_593);
    TEXT_MASK += _5544;
    vec2 param_594 = ch_L;
    vec2 param_595 = CUR_UV;
    float _5551 = char_px(param_594, param_595);
    TEXT_MASK += _5551;
    vec2 param_596 = ch_spc;
    vec2 param_597 = CUR_UV;
    float _5558 = char_px(param_596, param_597);
    TEXT_MASK += _5558;
    return TEXT_MASK;
}

float GetText(inout vec2 in_coord)
{
    in_coord.x = ((HSM_FLIP_VIEWPORT_HORIZONTAL * HSM_FLIP_CORE_HORIZONTAL) * (in_coord.x - 0.5)) + 0.5;
    in_coord.y = ((HSM_FLIP_VIEWPORT_VERTICAL * HSM_FLIP_CORE_VERTICAL) * (in_coord.y - 0.5)) + 0.5;
    vec2 param = SCREEN_SIZE;
    vec2 param_1 = CROPPED_ROTATED_SIZE;
    vec2 int_mult = GetIntegerScaleMult(param, param_1);
    vec2 canvas_size = global.DerezedPassSize.xy;
    in_coord = ((in_coord - vec2(0.5)) * vec2(1.0, -1.0)) + vec2(0.5);
    float downscale = 1.0;
    if (canvas_size.y > 460.0)
    {
        downscale = 2.0;
    }
    if (canvas_size.y > 1000.0)
    {
        downscale = 3.0;
    }
    vec2 uv = global.OutputSize.xy * in_coord;
    vec2 downscaled_uv = floor((global.OutputSize.xy * in_coord) / vec2(downscale));
    vec2 param_2 = SCREEN_SIZE;
    vec4 screen_region = GetScreenRegion(param_2);
    vec2 param_3 = downscaled_uv;
    vec2 param_4 = global.FinalViewportSize.xy;
    vec2 param_5 = SCREEN_SIZE;
    vec4 param_6 = screen_region;
    vec2 param_7 = ROTATED_DEREZED_SIZE;
    vec2 param_8 = ROTATED_CORE_PREPPED_SIZE;
    vec2 param_9 = CROPPED_ROTATED_SIZE;
    vec2 param_10 = CROPPED_ROTATED_SIZE_WITH_RES_MULT;
    vec2 param_11 = int_mult;
    float _5756 = DrawResolutions(param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10, param_11);
    float pixel = _5756;
    vec3 col = vec3(1.0);
    pixel *= ((1.0 - distance(mod(uv, vec2(1.0)), vec2(0.64999997615814208984375))) * 1.2000000476837158203125);
    col *= mix(vec3(0.0), vec3(1.0), vec3(pixel));
    return col.x;
}

void main()
{
    FOLLOW_MODE_SCALE_AND_POS = 0.0;
    FOLLOW_MODE_EXACT = 1.0;
    NEGATIVE_CROP_EXPAND_MULTIPLIER = 0.5;
    MAX_NEGATIVE_CROP = 0.5;
    DEFAULT_SCREEN_ASPECT = 1.3329918384552001953125;
    DEFAULT_BEZEL_ASPECT = 1.32272231578826904296875;
    DEFAULT_SCREEN_SCALE = vec2(0.0);
    DEFAULT_BEZEL_SCALE = vec2(0.0);
    INFOCACHE_MAX_INDEX = 4;
    CACHE_INFO_CHANGED = false;
    CURRENT_FRAME_FROM_CACHE_INFO = 0.0;
    TUBE_DIFFUSE_MASK = 0.0;
    TUBE_MASK = 0.0;
    BEZEL_MASK = 0.0;
    INSIDE_BEZEL_MASK = 0.0;
    OUTSIDE_TUBE_MASK_FOR_IMAGE = 0.0;
    FRAME_MASK = 0.0;
    FRAME_MASK_FOR_IMAGE = 0.0;
    OUTSIDE_BEZEL_MASK = 0.0;
    OUTSIDE_FRAME_MASK_FOR_IMAGE = 0.0;
    OUTSIDE_FRAME_MASK = 0.0;
    CUTOUT_MASK = 0.0;
    SCREEN_INDEX = 1.0;
    SCREEN_ASPECT = 1.0;
    SCREEN_SCALE = vec2(1.0);
    SCREEN_SCALE_WITH_ZOOM = vec2(1.0);
    SCREEN_POS_OFFSET = vec2(0.1500000059604644775390625);
    SCREEN_SCALE_2ND_SCREEN = vec2(1.0);
    SCREEN_POS_OFFSET_1ST_SCREEN = vec2(0.1500000059604644775390625);
    SCREEN_POS_OFFSET_2ND_SCREEN = vec2(0.1500000059604644775390625);
    VIEWPORT_SCALE = vec2(1.0);
    VIEWPORT_POS = vec2(1.0);
    TUBE_SCALE = vec2(1.0);
    TUBE_DIFFUSE_SCALE = vec2(1.0);
    TUBE_DIFFUSE_ASPECT = 1.0;
    TUBE_DIFFUSE_SCALE_1ST_SCREEN = vec2(1.0);
    TUBE_DIFFUSE_SCALE_2ND_SCREEN = vec2(1.0);
    FRAME_SCALE = vec2(1.0);
    BEZEL_OUTSIDE_SCALE = vec2(0.5);
    BACKGROUND_SCALE = vec2(0.5);
    LED_SCALE = vec2(0.5);
    DEVICE_SCALE = vec2(0.5);
    DEVICELED_SCALE = vec2(0.5);
    DECAL_SCALE = vec2(0.5);
    CAB_GLASS_SCALE = vec2(0.5);
    TOP_IMAGE_SCALE = vec2(0.5);
    AVERAGE_LUMA = 0.0;
    USE_VERTICAL_SCANLINES = 0.0;
    SAMPLING_SCANLINE_DIR_MULT = 0.0;
    SAMPLING_OPPOSITE_DIR_MULT = 0.0;
    CORE_SIZE = vec2(1.0);
    ROTATED_CORE_ORIGINAL_SIZE = vec2(1.0);
    ROTATED_CORE_PREPPED_SIZE = vec2(1.0);
    ROTATED_DEREZED_SIZE = vec2(1.0);
    CROPPED_ROTATED_SIZE_WITH_RES_MULT = vec2(1.0);
    CROPPED_ROTATED_SIZE_WITH_RES_MULT_FEEDBACK = vec2(1.0);
    CROPPED_ROTATED_SIZE = vec2(1.0);
    SAMPLE_AREA_START_PIXEL_COORD = vec2(1.0);
    SCREEN_SIZE = vec2(1.0);
    VIEWPORT_UNSCALED_COORD = vec2(0.5);
    SCREEN_COORD = vec2(0.5);
    TUBE_COORD = vec2(0.5);
    TUBE_DIFFUSE_COORD = vec2(0.5);
    TUBE_DIFFUSE_COORD_MIXED_POS = vec2(0.5);
    BEZEL_OUTSIDE_COORD = vec2(0.5);
    BACKGROUND_COORD = vec2(0.5);
    DEVICE_COORD = vec2(0.5);
    DEVICELED_COORD = vec2(0.5);
    LED_COORD = vec2(0.5);
    DECAL_COORD = vec2(0.5);
    CAB_GLASS_COORD = vec2(0.5);
    TOP_IMAGE_COORD = vec2(0.5);
    SCREEN_CURVED_COORD = vec2(0.5);
    TUBE_CURVED_COORD = vec2(0.5);
    TUBE_DIFFUSE_CURVED_COORD = vec2(0.5);
    BEZEL_OUTSIDE_CURVED_COORD = vec2(0.5);
    FRAME_OUTSIDE_CURVED_COORD = vec2(0.5);
    BACKGROUND_CURVED_COORD = vec2(0.5);
    LED_CURVED_COORD = vec2(0.5);
    DEVICE_CURVED_COORD = vec2(0.5);
    DEVICELED_CURVED_COORD = vec2(0.5);
    DECAL_CURVED_COORD = vec2(0.5);
    CAB_GLASS_CURVED_COORD = vec2(0.5);
    TOP_IMAGE_CURVED_COORD = vec2(0.5);
    HSM_RESOLUTION_DEBUG_ON = global.HSM_RESOLUTION_DEBUG_ON;
    HSM_GLOBAL_GRAPHICS_BRIGHTNESS = global.HSM_GLOBAL_GRAPHICS_BRIGHTNESS / 100.0;
    HSM_STATIC_LAYERS_GAMMA = global.HSM_STATIC_LAYERS_GAMMA;
    HSM_AMBIENT_LIGHTING_OPACITY = global.HSM_AMBIENT_LIGHTING_OPACITY / 100.0;
    HSM_AMBIENT1_OPACITY = ((global.HSM_AMBIENT1_OPACITY / 100.0) * global.HSM_AMBIENT_LIGHTING_OPACITY) / 100.0;
    HSM_AMBIENT2_OPACITY = ((global.HSM_AMBIENT2_OPACITY / 100.0) * global.HSM_AMBIENT_LIGHTING_OPACITY) / 100.0;
    HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE = global.HSM_AMBIENT_LIGHTING_SWAP_IMAGE_MODE;
    HSM_SINDEN_BORDER_ON = global.HSM_SINDEN_BORDER_ON;
    HSM_SINDEN_BORDER_BRIGHTNESS = global.HSM_SINDEN_BORDER_BRIGHTNESS / 100.0;
    HSM_SINDEN_BORDER_THICKNESS = global.HSM_SINDEN_BORDER_THICKNESS / 100.0;
    HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION = global.HSM_SINDEN_BORDER_EMPTY_TUBE_COMPENSATION;
    HSM_VIEWPORT_ZOOM = global.HSM_VIEWPORT_ZOOM / 100.0;
    HSM_VIEWPORT_ZOOM_MASK = global.HSM_VIEWPORT_ZOOM_MASK;
    HSM_VIEWPORT_POSITION_X = ((-1.0) * global.HSM_VIEWPORT_POSITION_X) / 1000.0;
    HSM_VIEWPORT_POSITION_Y = ((-1.0) * global.HSM_VIEWPORT_POSITION_Y) / 1000.0;
    HSM_FLIP_VIEWPORT_VERTICAL = -((global.HSM_FLIP_VIEWPORT_VERTICAL * 2.0) - 1.0);
    HSM_FLIP_VIEWPORT_HORIZONTAL = -((global.HSM_FLIP_VIEWPORT_HORIZONTAL * 2.0) - 1.0);
    HSM_FLIP_CORE_VERTICAL = -((global.HSM_FLIP_CORE_VERTICAL * 2.0) - 1.0);
    HSM_FLIP_CORE_HORIZONTAL = -((global.HSM_FLIP_CORE_HORIZONTAL * 2.0) - 1.0);
    HSM_ROTATE_CORE_IMAGE = global.HSM_ROTATE_CORE_IMAGE;
    HSM_ASPECT_RATIO_ORIENTATION = global.HSM_ASPECT_RATIO_ORIENTATION;
    HSM_ASPECT_RATIO_MODE = global.HSM_ASPECT_RATIO_MODE;
    HSM_ASPECT_RATIO_EXPLICIT = global.HSM_ASPECT_RATIO_EXPLICIT;
    HSM_VERTICAL_PRESET = global.HSM_VERTICAL_PRESET;
    HSM_INT_SCALE_MAX_HEIGHT = global.HSM_INT_SCALE_MAX_HEIGHT / 100.0;
    HSM_NON_INTEGER_SCALE = global.HSM_NON_INTEGER_SCALE / 100.0;
    HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER = global.HSM_USE_PHYSICAL_SIZE_FOR_NON_INTEGER;
    HSM_PHYSICAL_MONITOR_ASPECT_RATIO = global.HSM_PHYSICAL_MONITOR_ASPECT_RATIO;
    HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE = global.HSM_PHYSICAL_MONITOR_DIAGONAL_SIZE;
    HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE = global.HSM_PHYSICAL_SIM_TUBE_DIAGONAL_SIZE;
    HSM_USE_IMAGE_FOR_PLACEMENT = global.HSM_USE_IMAGE_FOR_PLACEMENT;
    HSM_PLACEMENT_IMAGE_USE_HORIZONTAL = global.HSM_PLACEMENT_IMAGE_USE_HORIZONTAL;
    HSM_PLACEMENT_IMAGE_MODE = global.HSM_PLACEMENT_IMAGE_MODE;
    HSM_NON_INTEGER_SCALE_OFFSET = global.HSM_NON_INTEGER_SCALE_OFFSET / 100.0;
    HSM_USE_SNAP_TO_CLOSEST_INT_SCALE = global.HSM_USE_SNAP_TO_CLOSEST_INT_SCALE;
    float _401;
    if (HSM_USE_SNAP_TO_CLOSEST_INT_SCALE > 0.5)
    {
        _401 = global.HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE / 100.0;
    }
    else
    {
        _401 = 0.0;
    }
    HSM_SNAP_TO_CLOSEST_INT_SCALE_TOLERANCE = _401;
    HSM_SCREEN_POSITION_X = global.HSM_SCREEN_POSITION_X / 1000.0;
    HSM_SCREEN_POSITION_Y = ((-1.0) * global.HSM_SCREEN_POSITION_Y) / 1000.0;
    HSM_CROP_MODE = global.HSM_CROP_MODE;
    HSM_CROP_PERCENT_ZOOM = global.HSM_CROP_PERCENT_ZOOM / 100.0;
    HSM_CROP_PERCENT_TOP = global.HSM_CROP_PERCENT_TOP / 100.0;
    HSM_CROP_PERCENT_BOTTOM = global.HSM_CROP_PERCENT_BOTTOM / 100.0;
    HSM_CROP_PERCENT_LEFT = global.HSM_CROP_PERCENT_LEFT / 100.0;
    HSM_CROP_PERCENT_RIGHT = global.HSM_CROP_PERCENT_RIGHT / 100.0;
    HSM_CROP_BLACK_THRESHOLD = global.HSM_CROP_BLACK_THRESHOLD / 100.0;
    HSM_SCANLINE_DIRECTION = global.HSM_SCANLINE_DIRECTION;
    HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR = global.HSM_CORE_RES_SAMPLING_MULT_SCANLINE_DIR / 100.0;
    HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR = global.HSM_DOWNSAMPLE_BLUR_SCANLINE_DIR / 100.0;
    HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR = global.HSM_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR / 100.0;
    HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR = global.HSM_DOWNSAMPLE_BLUR_OPPOSITE_DIR / 100.0;
    HSM_USE_GEOM = 0.0;
    HSM_CURVATURE_MODE = global.HSM_CURVATURE_MODE;
    HSM_CURVATURE_3D_RADIUS = global.HSM_CURVATURE_3D_RADIUS / 100.0;
    HSM_CURVATURE_3D_VIEW_DIST = global.HSM_CURVATURE_3D_VIEW_DIST / 100.0;
    HSM_CURVATURE_3D_TILT_ANGLE_X = global.HSM_CURVATURE_3D_TILT_ANGLE_X / 100.0;
    HSM_CURVATURE_3D_TILT_ANGLE_Y = global.HSM_CURVATURE_3D_TILT_ANGLE_Y / 100.0;
    HSM_CRT_CURVATURE_SCALE = global.HSM_CRT_CURVATURE_SCALE / 100.0;
    HSM_CACHE_GRAPHICS_ON = global.HSM_CACHE_GRAPHICS_ON;
    HSM_CACHE_UPDATE_INDICATOR_MODE = global.HSM_CACHE_UPDATE_INDICATOR_MODE;
    HSM_AB_COMPARE_SHOW_MODE = global.HSM_AB_COMPARE_SHOW_MODE;
    HSM_AB_COMPARE_AREA = global.HSM_AB_COMPARE_AREA;
    HSM_AB_COMPARE_SPLIT_POSITION = global.HSM_AB_COMPARE_SPLIT_POSITION / 100.0;
    HSM_AB_COMPARE_FREEZE_CRT_TUBE = global.HSM_AB_COMPARE_FREEZE_CRT_TUBE;
    HSM_AB_COMPARE_FREEZE_GRAPHICS = global.HSM_AB_COMPARE_FREEZE_GRAPHICS;
    HSM_SHOW_PASS_INDEX = global.HSM_SHOW_PASS_INDEX;
    HSM_SHOW_PASS_APPLY_SCREEN_COORD = global.HSM_SHOW_PASS_APPLY_SCREEN_COORD;
    HSM_SHOW_PASS_ALPHA = global.HSM_SHOW_PASS_ALPHA;
    HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE = global.HSM_SCREEN_VIGNETTE_DUALSCREEN_VIS_MODE;
    HSM_MONOCHROME_DUALSCREEN_VIS_MODE = global.HSM_MONOCHROME_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_MODE = global.HSM_TUBE_DIFFUSE_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_AMOUNT = global.HSM_TUBE_DIFFUSE_IMAGE_AMOUNT / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_DIFFUSE_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON = global.HSM_TUBE_DIFFUSE_IMAGE_COLORIZE_ON;
    HSM_TUBE_DIFFUSE_IMAGE_HUE = global.HSM_TUBE_DIFFUSE_IMAGE_HUE / 360.0;
    HSM_TUBE_DIFFUSE_IMAGE_SATURATION = global.HSM_TUBE_DIFFUSE_IMAGE_SATURATION / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS = global.HSM_TUBE_DIFFUSE_IMAGE_BRIGHTNESS / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_GAMMA = global.HSM_TUBE_DIFFUSE_IMAGE_GAMMA;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING = global.HSM_TUBE_DIFFUSE_IMAGE_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING = global.HSM_TUBE_DIFFUSE_IMAGE_AMBIENT2_LIGHTING / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE = global.HSM_TUBE_DIFFUSE_IMAGE_SCALE / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_SCALE_X = global.HSM_TUBE_DIFFUSE_IMAGE_SCALE_X / 100.0;
    HSM_TUBE_DIFFUSE_IMAGE_ROTATION = global.HSM_TUBE_DIFFUSE_IMAGE_ROTATION;
    HSM_TUBE_SHADOW_IMAGE_ON = global.HSM_TUBE_SHADOW_IMAGE_ON;
    HSM_TUBE_SHADOW_IMAGE_OPACITY = global.HSM_TUBE_SHADOW_IMAGE_OPACITY / 100.0;
    HSM_TUBE_SHADOW_IMAGE_POS_X = global.HSM_TUBE_SHADOW_IMAGE_POS_X / 100.0;
    HSM_TUBE_SHADOW_IMAGE_POS_Y = global.HSM_TUBE_SHADOW_IMAGE_POS_Y / 100.0;
    HSM_TUBE_SHADOW_IMAGE_SCALE_X = global.HSM_TUBE_SHADOW_IMAGE_SCALE_X / 100.0;
    HSM_TUBE_SHADOW_IMAGE_SCALE_Y = global.HSM_TUBE_SHADOW_IMAGE_SCALE_Y / 100.0;
    HSM_TUBE_SHADOW_CURVATURE_SCALE = global.HSM_TUBE_SHADOW_CURVATURE_SCALE / 100.0;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_ON = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_ON;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY = global.HSM_TUBE_STATIC_REFLECTION_IMAGE_OPACITY / 100.0;
    HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY = global.HSM_TUBE_STATIC_OPACITY_DIFFUSE_MULTIPLY / 100.0;
    HSM_TUBE_STATIC_BLACK_LEVEL = (global.HSM_TUBE_STATIC_BLACK_LEVEL / 1000.0) + 1.0;
    HSM_TUBE_STATIC_AMBIENT_LIGHTING = global.HSM_TUBE_STATIC_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_STATIC_AMBIENT2_LIGHTING = global.HSM_TUBE_STATIC_AMBIENT2_LIGHTING / 100.0;
    HSM_TUBE_STATIC_SCALE = global.HSM_TUBE_STATIC_SCALE / 100.0;
    HSM_TUBE_STATIC_SCALE_X = global.HSM_TUBE_STATIC_SCALE_X / 100.0;
    HSM_TUBE_STATIC_POS_X = global.HSM_TUBE_STATIC_POS_X / (-1000.0);
    HSM_TUBE_STATIC_POS_Y = global.HSM_TUBE_STATIC_POS_Y / 1000.0;
    HSM_TUBE_STATIC_SHADOW_OPACITY = global.HSM_TUBE_STATIC_SHADOW_OPACITY / 100.0;
    HSM_TUBE_STATIC_DITHER_SAMPLES = global.HSM_TUBE_STATIC_DITHER_SAMPLES;
    HSM_TUBE_STATIC_DITHER_DISTANCE = global.HSM_TUBE_STATIC_DITHER_DISTANCE;
    HSM_TUBE_STATIC_DITHER_AMOUNT = global.HSM_TUBE_STATIC_DITHER_AMOUNT;
    HSM_TUBE_OPACITY = global.HSM_TUBE_OPACITY / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_ON = global.HSM_TUBE_COLORED_GEL_IMAGE_ON;
    HSM_TUBE_COLORED_GEL_IMAGE_SCALE = global.HSM_TUBE_COLORED_GEL_IMAGE_SCALE / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL = -((global.HSM_TUBE_COLORED_GEL_IMAGE_FLIP_HORIZONTAL * 2.0) - 1.0);
    HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL = -((global.HSM_TUBE_COLORED_GEL_IMAGE_FLIP_VERTICAL * 2.0) - 1.0);
    HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE = global.HSM_TUBE_COLORED_GEL_IMAGE_DUALSCREEN_VIS_MODE;
    HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_MULTIPLY_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_ADDITIVE_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD = global.HSM_TUBE_COLORED_GEL_IMAGE_TRANSPARENCY_THRESHOLD / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_BRIGHTNESS / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE = global.HSM_TUBE_COLORED_GEL_IMAGE_NORMAL_VIGNETTE / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT = global.HSM_TUBE_COLORED_GEL_IMAGE_FAKE_SCANLINE_AMOUNT / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING = global.HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT_LIGHTING / 100.0;
    HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING = global.HSM_TUBE_COLORED_GEL_IMAGE_AMBIENT2_LIGHTING / 100.0;
    HSM_SHOW_CRT_ON_TOP_OF_COLORED_GEL = 0.0;
    HSM_DUALSCREEN_MODE = global.HSM_DUALSCREEN_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE = global.HSM_DUALSCREEN_CORE_IMAGE_SPLIT_MODE;
    HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS = global.HSM_DUALSCREEN_CORE_IMAGE_SWAP_SCREENS;
    HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET = global.HSM_DUALSCREEN_CORE_IMAGE_SPLIT_OFFSET / 1000.0;
    HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION = global.HSM_DUALSCREEN_VIEWPORT_SPLIT_LOCATION / 1000.0;
    HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE = global.HSM_DUALSCREEN_SHIFT_POSITION_WITH_SCALE;
    HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS = global.HSM_DUALSCREEN_POSITION_OFFSET_BETWEEN_SCREENS / 1000.0;
    HSM_2ND_SCREEN_ASPECT_RATIO_MODE = global.HSM_2ND_SCREEN_ASPECT_RATIO_MODE;
    HSM_2ND_SCREEN_INDEPENDENT_SCALE = global.HSM_2ND_SCREEN_INDEPENDENT_SCALE;
    HSM_2ND_SCREEN_SCALE_OFFSET = global.HSM_2ND_SCREEN_SCALE_OFFSET / 100.0;
    HSM_2ND_SCREEN_POS_X = global.HSM_2ND_SCREEN_POS_X / 1000.0;
    HSM_2ND_SCREEN_POS_Y = global.HSM_2ND_SCREEN_POS_Y / 1000.0;
    HSM_2ND_SCREEN_CROP_PERCENT_ZOOM = global.HSM_2ND_SCREEN_CROP_PERCENT_ZOOM / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_TOP = global.HSM_2ND_SCREEN_CROP_PERCENT_TOP / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM = global.HSM_2ND_SCREEN_CROP_PERCENT_BOTTOM / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_LEFT = global.HSM_2ND_SCREEN_CROP_PERCENT_LEFT / 100.0;
    HSM_2ND_SCREEN_CROP_PERCENT_RIGHT = global.HSM_2ND_SCREEN_CROP_PERCENT_RIGHT / 100.0;
    HSM_SCREEN_REFLECTION_SCALE = global.HSM_SCREEN_REFLECTION_SCALE / 100.0;
    HSM_SCREEN_REFLECTION_POS_X = global.HSM_SCREEN_REFLECTION_POS_X / 600.0;
    HSM_SCREEN_REFLECTION_POS_Y = global.HSM_SCREEN_REFLECTION_POS_Y / 600.0;
    HSM_AMBIENT1_HUE = global.HSM_AMBIENT1_HUE / 360.0;
    HSM_AMBIENT1_SATURATION = global.HSM_AMBIENT1_SATURATION / 100.0;
    HSM_AMBIENT1_VALUE = global.HSM_AMBIENT1_VALUE / 100.0;
    HSM_AMBIENT1_CONTRAST = global.HSM_AMBIENT1_CONTRAST / 100.0;
    HSM_AMBIENT1_SCALE_KEEP_ASPECT = global.HSM_AMBIENT1_SCALE_KEEP_ASPECT;
    HSM_AMBIENT1_SCALE_INHERIT_MODE = global.HSM_AMBIENT1_SCALE_INHERIT_MODE;
    HSM_AMBIENT1_SCALE = global.HSM_AMBIENT1_SCALE / 100.0;
    HSM_AMBIENT1_SCALE_X = global.HSM_AMBIENT1_SCALE_X / 100.0;
    HSM_AMBIENT1_ROTATE = global.HSM_AMBIENT1_ROTATE;
    HSM_AMBIENT1_MIRROR_HORZ = global.HSM_AMBIENT1_MIRROR_HORZ;
    HSM_AMBIENT1_POS_INHERIT_MODE = global.HSM_AMBIENT1_POS_INHERIT_MODE;
    HSM_AMBIENT1_POSITION_X = global.HSM_AMBIENT1_POSITION_X / (-1000.0);
    HSM_AMBIENT1_POSITION_Y = ((-1.0) * global.HSM_AMBIENT1_POSITION_Y) / (-1000.0);
    HSM_AMBIENT1_DITHERING_SAMPLES = 0.0;
    HSM_AMBIENT2_HUE = global.HSM_AMBIENT2_HUE / 360.0;
    HSM_AMBIENT2_SATURATION = global.HSM_AMBIENT2_SATURATION / 100.0;
    HSM_AMBIENT2_VALUE = global.HSM_AMBIENT2_VALUE / 100.0;
    HSM_AMBIENT2_CONTRAST = global.HSM_AMBIENT2_CONTRAST / 100.0;
    HSM_AMBIENT2_SCALE_KEEP_ASPECT = global.HSM_AMBIENT2_SCALE_KEEP_ASPECT;
    HSM_AMBIENT2_SCALE_INHERIT_MODE = global.HSM_AMBIENT2_SCALE_INHERIT_MODE;
    HSM_AMBIENT2_SCALE = global.HSM_AMBIENT2_SCALE / 100.0;
    HSM_AMBIENT2_SCALE_X = global.HSM_AMBIENT2_SCALE_X / 100.0;
    HSM_AMBIENT2_ROTATE = global.HSM_AMBIENT2_ROTATE;
    HSM_AMBIENT2_MIRROR_HORZ = global.HSM_AMBIENT2_MIRROR_HORZ;
    HSM_AMBIENT2_POS_INHERIT_MODE = global.HSM_AMBIENT2_POS_INHERIT_MODE;
    HSM_AMBIENT2_POSITION_X = global.HSM_AMBIENT2_POSITION_X / (-1000.0);
    HSM_AMBIENT2_POSITION_Y = ((-1.0) * global.HSM_AMBIENT2_POSITION_Y) / (-1000.0);
    HSM_BZL_OPACITY = global.HSM_BZL_OPACITY / 100.0;
    HSM_BZL_BLEND_MODE = global.HSM_BZL_BLEND_MODE;
    HSM_BZL_WIDTH = global.HSM_BZL_WIDTH * 0.0008623999892733991146087646484375;
    HSM_BZL_HEIGHT = global.HSM_BZL_HEIGHT * 0.000873200013302266597747802734375;
    HSM_BZL_INNER_CORNER_RADIUS_SCALE = global.HSM_BZL_INNER_CORNER_RADIUS_SCALE / 100.0;
    HSM_BZL_INNER_EDGE_THICKNESS = global.HSM_BZL_INNER_EDGE_THICKNESS * 7.0000001869630068540573120117188e-05;
    HSM_BZL_INNER_EDGE_SHARPNESS = global.HSM_BZL_INNER_EDGE_SHARPNESS / 100.0;
    HSM_BZL_OUTER_POSITION_Y = global.HSM_BZL_OUTER_POSITION_Y / 2000.0;
    HSM_BZL_OUTER_CURVATURE_SCALE = global.HSM_BZL_OUTER_CURVATURE_SCALE / 100.0;
    HSM_BZL_OUTER_CORNER_RADIUS_SCALE = (0.89999997615814208984375 * global.HSM_BZL_OUTER_CORNER_RADIUS_SCALE) / 100.0;
    HSM_BZL_NOISE = global.HSM_BZL_NOISE / 100.0;
    HSM_BZL_INNER_EDGE_SHADOW = global.HSM_BZL_INNER_EDGE_SHADOW / 100.0;
    HSM_BZL_BRIGHTNESS = global.HSM_BZL_BRIGHTNESS / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_TOP = global.HSM_BZL_BRIGHTNESS_MULT_TOP / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_BOTTOM = global.HSM_BZL_BRIGHTNESS_MULT_BOTTOM / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDES = global.HSM_BZL_BRIGHTNESS_MULT_SIDES / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT = global.HSM_BZL_BRIGHTNESS_MULT_SIDE_LEFT / 100.0;
    HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT = global.HSM_BZL_BRIGHTNESS_MULT_SIDE_RIGHT / 100.0;
    HSM_BZL_HIGHLIGHT = global.HSM_BZL_HIGHLIGHT / 100.0;
    HSM_BZL_INNER_EDGE_HIGHLIGHT = global.HSM_BZL_INNER_EDGE_HIGHLIGHT / 100.0;
    HSM_BZL_COLOR_HUE = global.HSM_BZL_COLOR_HUE / 360.0;
    HSM_BZL_COLOR_SATURATION = global.HSM_BZL_COLOR_SATURATION / 100.0;
    HSM_BZL_COLOR_VALUE = global.HSM_BZL_COLOR_VALUE / 100.0;
    HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_BZL_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_BZL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_FRM_USE_INDEPENDENT_COLOR = global.HSM_FRM_USE_INDEPENDENT_COLOR;
    HSM_FRM_COLOR_HUE = global.HSM_FRM_COLOR_HUE / 360.0;
    HSM_FRM_COLOR_SATURATION = global.HSM_FRM_COLOR_SATURATION / 100.0;
    HSM_FRM_COLOR_VALUE = global.HSM_FRM_COLOR_VALUE / 100.0;
    HSM_FRM_OPACITY = global.HSM_FRM_OPACITY / 100.0;
    HSM_FRM_BLEND_MODE = 1.0;
    HSM_FRM_TEXTURE_OPACITY = global.HSM_FRM_TEXTURE_OPACITY / 100.0;
    HSM_FRM_TEXTURE_BLEND_MODE = global.HSM_FRM_TEXTURE_BLEND_MODE;
    HSM_FRM_NOISE = global.HSM_FRM_NOISE / 100.0;
    HSM_FRM_INNER_EDGE_THICKNESS = global.HSM_FRM_INNER_EDGE_THICKNESS * 2.9999999242136254906654357910156e-05;
    HSM_FRM_INNER_EDGE_HIGHLIGHT = global.HSM_FRM_INNER_EDGE_HIGHLIGHT * 0.001000000047497451305389404296875;
    HSM_FRM_THICKNESS = global.HSM_FRM_THICKNESS * 0.00069999997504055500030517578125;
    HSM_FRM_THICKNESS_SCALE_X = global.HSM_FRM_THICKNESS_SCALE_X / 100.0;
    HSM_FRM_OUTER_POS_Y = global.HSM_FRM_OUTER_POS_Y / 100.0;
    HSM_FRM_OUTER_CURVATURE_SCALE = global.HSM_FRM_OUTER_CURVATURE_SCALE / 100.0;
    HSM_FRM_OUTER_CORNER_RADIUS = global.HSM_FRM_OUTER_CORNER_RADIUS;
    HSM_FRM_OUTER_EDGE_THICKNESS = global.HSM_FRM_OUTER_EDGE_THICKNESS * 5.9999998484272509813308715820312e-05;
    HSM_FRM_OUTER_EDGE_SHADING = global.HSM_FRM_OUTER_EDGE_SHADING / 100.0;
    HSM_FRM_SHADOW_OPACITY = global.HSM_FRM_SHADOW_OPACITY / 100.0;
    HSM_FRM_SHADOW_WIDTH = global.HSM_FRM_SHADOW_WIDTH / 1000.0;
    HSM_REFLECT_CORNER_FADE = global.HSM_REFLECT_CORNER_FADE / 100.0;
    HSM_REFLECT_CORNER_FADE_DISTANCE = global.HSM_REFLECT_CORNER_FADE_DISTANCE / 100.0;
    HSM_REFLECT_CORNER_INNER_SPREAD = global.HSM_REFLECT_CORNER_INNER_SPREAD / 100.0;
    HSM_REFLECT_CORNER_OUTER_SPREAD = global.HSM_REFLECT_CORNER_OUTER_SPREAD / 100.0;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP = global.HSM_REFLECT_CORNER_ROTATION_OFFSET_TOP;
    HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM = global.HSM_REFLECT_CORNER_ROTATION_OFFSET_BOTTOM;
    HSM_REFLECT_CORNER_SPREAD_FALLOFF = global.HSM_REFLECT_CORNER_SPREAD_FALLOFF;
    HSM_BG_LAYER_ORDER = global.HSM_BG_LAYER_ORDER;
    HSM_VIEWPORT_VIGNETTE_LAYER_ORDER = global.HSM_VIEWPORT_VIGNETTE_LAYER_ORDER;
    HSM_LED_LAYER_ORDER = global.HSM_LED_LAYER_ORDER;
    HSM_DEVICE_LAYER_ORDER = global.HSM_DEVICE_LAYER_ORDER;
    HSM_DEVICELED_LAYER_ORDER = global.HSM_DEVICELED_LAYER_ORDER;
    HSM_CRT_LAYER_ORDER = global.HSM_CRT_LAYER_ORDER;
    HSM_DECAL_LAYER_ORDER = global.HSM_DECAL_LAYER_ORDER;
    HSM_CAB_GLASS_LAYER_ORDER = global.HSM_CAB_GLASS_LAYER_ORDER;
    HSM_TOP_LAYER_ORDER = global.HSM_TOP_LAYER_ORDER;
    HSM_CUTOUT_ASPECT_MODE = global.HSM_CUTOUT_ASPECT_MODE;
    HSM_CUTOUT_EXPLICIT_ASPECT = global.HSM_CUTOUT_EXPLICIT_ASPECT;
    HSM_CUTOUT_FOLLOW_LAYER = global.HSM_CUTOUT_FOLLOW_LAYER;
    HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM = global.HSM_CUTOUT_FOLLOW_FULL_USES_ZOOM;
    HSM_CUTOUT_SCALE = global.HSM_CUTOUT_SCALE / 100.0;
    HSM_CUTOUT_SCALE_X = global.HSM_CUTOUT_SCALE_X / 100.0;
    HSM_CUTOUT_POS_X = global.HSM_CUTOUT_POS_X / (-100.0);
    HSM_CUTOUT_POS_Y = global.HSM_CUTOUT_POS_Y / 100.0;
    HSM_CUTOUT_CORNER_RADIUS = global.HSM_CUTOUT_CORNER_RADIUS;
    HSM_LAYERING_DEBUG_MASK_MODE = global.HSM_LAYERING_DEBUG_MASK_MODE;
    HSM_BG_OPACITY = global.HSM_BG_OPACITY / 100.0;
    HSM_BG_COLORIZE_ON = global.HSM_BG_COLORIZE_ON;
    HSM_BG_HUE = global.HSM_BG_HUE / 360.0;
    HSM_BG_SATURATION = global.HSM_BG_SATURATION / 100.0;
    HSM_BG_BRIGHTNESS = global.HSM_BG_BRIGHTNESS / 100.0;
    HSM_BG_GAMMA = global.HSM_BG_GAMMA;
    HSM_BG_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_BG_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_BG_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_BG_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_BG_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_BG_BLEND_MODE = global.HSM_BG_BLEND_MODE;
    HSM_BG_SOURCE_MATTE_TYPE = global.HSM_BG_SOURCE_MATTE_TYPE;
    HSM_BG_MIPMAPPING_BLEND_BIAS = global.HSM_BG_MIPMAPPING_BLEND_BIAS;
    HSM_BG_MASK_MODE = global.HSM_BG_MASK_MODE;
    HSM_BG_CUTOUT_MODE = global.HSM_BG_CUTOUT_MODE;
    HSM_BG_DUALSCREEN_VIS_MODE = global.HSM_BG_DUALSCREEN_VIS_MODE;
    HSM_BG_FOLLOW_LAYER = global.HSM_BG_FOLLOW_LAYER;
    HSM_BG_FOLLOW_MODE = global.HSM_BG_FOLLOW_MODE;
    HSM_BG_FOLLOW_FULL_USES_ZOOM = global.HSM_BG_FOLLOW_FULL_USES_ZOOM;
    HSM_BG_FILL_MODE = global.HSM_BG_FILL_MODE;
    HSM_BG_SPLIT_PRESERVE_CENTER = global.HSM_BG_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_BG_SPLIT_REPEAT_WIDTH = global.HSM_BG_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_BG_SCALE = global.HSM_BG_SCALE / 100.0;
    HSM_BG_SCALE_X = global.HSM_BG_SCALE_X / 100.0;
    HSM_BG_POS_X = global.HSM_BG_POS_X / (-100.0);
    HSM_BG_POS_Y = global.HSM_BG_POS_Y / 100.0;
    HSM_BG_WRAP_MODE = global.HSM_BG_WRAP_MODE;
    HSM_VIEWPORT_VIGNETTE_OPACITY = global.HSM_VIEWPORT_VIGNETTE_OPACITY / 100.0;
    HSM_VIEWPORT_VIGNETTE_MASK_MODE = global.HSM_VIEWPORT_VIGNETTE_MASK_MODE;
    HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE = global.HSM_VIEWPORT_VIGNETTE_CUTOUT_MODE;
    HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER = global.HSM_VIEWPORT_VIGNETTE_FOLLOW_LAYER;
    HSM_VIEWPORT_VIGNETTE_SCALE = global.HSM_VIEWPORT_VIGNETTE_SCALE / 100.0;
    HSM_VIEWPORT_VIGNETTE_SCALE_X = global.HSM_VIEWPORT_VIGNETTE_SCALE_X / 100.0;
    HSM_VIEWPORT_VIGNETTE_POS_X = global.HSM_VIEWPORT_VIGNETTE_POS_X / (-100.0);
    HSM_VIEWPORT_VIGNETTE_POS_Y = global.HSM_VIEWPORT_VIGNETTE_POS_Y / 100.0;
    HSM_LED_OPACITY = global.HSM_LED_OPACITY / 100.0;
    HSM_LED_COLORIZE_ON = global.HSM_LED_COLORIZE_ON;
    HSM_LED_HUE = global.HSM_LED_HUE / 360.0;
    HSM_LED_SATURATION = global.HSM_LED_SATURATION / 100.0;
    HSM_LED_BRIGHTNESS = global.HSM_LED_BRIGHTNESS / 100.0;
    HSM_LED_GAMMA = global.HSM_LED_GAMMA;
    HSM_LED_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_LED_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_LED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_LED_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_LED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_LED_BLEND_MODE = global.HSM_LED_BLEND_MODE;
    HSM_LED_SOURCE_MATTE_TYPE = global.HSM_LED_SOURCE_MATTE_TYPE;
    HSM_LED_MASK_MODE = global.HSM_LED_MASK_MODE;
    HSM_LED_MIPMAPPING_BLEND_BIAS = global.HSM_LED_MIPMAPPING_BLEND_BIAS;
    HSM_LED_CUTOUT_MODE = global.HSM_LED_CUTOUT_MODE;
    HSM_LED_DUALSCREEN_VIS_MODE = global.HSM_LED_DUALSCREEN_VIS_MODE;
    HSM_LED_FOLLOW_LAYER = global.HSM_LED_FOLLOW_LAYER;
    HSM_LED_FOLLOW_MODE = global.HSM_LED_FOLLOW_MODE;
    HSM_LED_FOLLOW_FULL_USES_ZOOM = global.HSM_LED_FOLLOW_FULL_USES_ZOOM;
    HSM_LED_FILL_MODE = global.HSM_LED_FILL_MODE;
    HSM_LED_SPLIT_PRESERVE_CENTER = global.HSM_LED_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_LED_SPLIT_REPEAT_WIDTH = global.HSM_LED_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_LED_SCALE = global.HSM_LED_SCALE / 100.0;
    HSM_LED_SCALE_X = global.HSM_LED_SCALE_X / 100.0;
    HSM_LED_POS_X = global.HSM_LED_POS_X / (-100.0);
    HSM_LED_POS_Y = global.HSM_LED_POS_Y / 100.0;
    HSM_DEVICE_OPACITY = global.HSM_DEVICE_OPACITY / 100.0;
    HSM_DEVICE_COLORIZE_ON = global.HSM_DEVICE_COLORIZE_ON;
    HSM_DEVICE_HUE = global.HSM_DEVICE_HUE / 360.0;
    HSM_DEVICE_SATURATION = global.HSM_DEVICE_SATURATION / 100.0;
    HSM_DEVICE_BRIGHTNESS = global.HSM_DEVICE_BRIGHTNESS / 100.0;
    HSM_DEVICE_GAMMA = global.HSM_DEVICE_GAMMA;
    HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DEVICE_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DEVICE_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DEVICE_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICE_BLEND_MODE = global.HSM_DEVICE_BLEND_MODE;
    HSM_DEVICE_SOURCE_MATTE_TYPE = global.HSM_DEVICE_SOURCE_MATTE_TYPE;
    HSM_DEVICE_MASK_MODE = global.HSM_DEVICE_MASK_MODE;
    HSM_DEVICE_MIPMAPPING_BLEND_BIAS = global.HSM_DEVICE_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICE_CUTOUT_MODE = global.HSM_DEVICE_CUTOUT_MODE;
    HSM_DEVICE_DUALSCREEN_VIS_MODE = global.HSM_DEVICE_DUALSCREEN_VIS_MODE;
    HSM_DEVICE_FOLLOW_LAYER = global.HSM_DEVICE_FOLLOW_LAYER;
    HSM_DEVICE_FOLLOW_MODE = global.HSM_DEVICE_FOLLOW_MODE;
    HSM_DEVICE_FOLLOW_FULL_USES_ZOOM = global.HSM_DEVICE_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICE_FILL_MODE = global.HSM_DEVICE_FILL_MODE;
    HSM_DEVICE_SPLIT_PRESERVE_CENTER = global.HSM_DEVICE_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DEVICE_SPLIT_REPEAT_WIDTH = global.HSM_DEVICE_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DEVICE_SCALE = global.HSM_DEVICE_SCALE / 100.0;
    HSM_DEVICE_SCALE_X = global.HSM_DEVICE_SCALE_X / 100.0;
    HSM_DEVICE_POS_X = global.HSM_DEVICE_POS_X / (-100.0);
    HSM_DEVICE_POS_Y = global.HSM_DEVICE_POS_Y / 100.0;
    HSM_DEVICELED_OPACITY = global.HSM_DEVICELED_OPACITY / 100.0;
    HSM_DEVICELED_COLORIZE_ON = global.HSM_DEVICELED_COLORIZE_ON;
    HSM_DEVICELED_HUE = global.HSM_DEVICELED_HUE / 360.0;
    HSM_DEVICELED_SATURATION = global.HSM_DEVICELED_SATURATION / 100.0;
    HSM_DEVICELED_BRIGHTNESS = global.HSM_DEVICELED_BRIGHTNESS / 100.0;
    HSM_DEVICELED_GAMMA = global.HSM_DEVICELED_GAMMA;
    HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DEVICELED_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DEVICELED_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DEVICELED_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DEVICELED_BLEND_MODE = global.HSM_DEVICELED_BLEND_MODE;
    HSM_DEVICELED_SOURCE_MATTE_TYPE = global.HSM_DEVICELED_SOURCE_MATTE_TYPE;
    HSM_DEVICELED_MASK_MODE = global.HSM_DEVICELED_MASK_MODE;
    HSM_DEVICELED_MIPMAPPING_BLEND_BIAS = global.HSM_DEVICELED_MIPMAPPING_BLEND_BIAS;
    HSM_DEVICELED_CUTOUT_MODE = global.HSM_DEVICELED_CUTOUT_MODE;
    HSM_DEVICELED_DUALSCREEN_VIS_MODE = global.HSM_DEVICELED_DUALSCREEN_VIS_MODE;
    HSM_DEVICELED_FOLLOW_LAYER = global.HSM_DEVICELED_FOLLOW_LAYER;
    HSM_DEVICELED_FOLLOW_MODE = global.HSM_DEVICELED_FOLLOW_MODE;
    HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM = global.HSM_DEVICELED_FOLLOW_FULL_USES_ZOOM;
    HSM_DEVICELED_FILL_MODE = global.HSM_DEVICELED_FILL_MODE;
    HSM_DEVICELED_SPLIT_PRESERVE_CENTER = global.HSM_DEVICELED_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DEVICELED_SPLIT_REPEAT_WIDTH = global.HSM_DEVICELED_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DEVICELED_SCALE = global.HSM_DEVICELED_SCALE / 100.0;
    HSM_DEVICELED_SCALE_X = global.HSM_DEVICELED_SCALE_X / 100.0;
    HSM_DEVICELED_POS_X = global.HSM_DEVICELED_POS_X / (-100.0);
    HSM_DEVICELED_POS_Y = global.HSM_DEVICELED_POS_Y / 100.0;
    HSM_DECAL_OPACITY = global.HSM_DECAL_OPACITY / 100.0;
    HSM_DECAL_COLORIZE_ON = global.HSM_DECAL_COLORIZE_ON;
    HSM_DECAL_HUE = global.HSM_DECAL_HUE / 360.0;
    HSM_DECAL_SATURATION = global.HSM_DECAL_SATURATION / 100.0;
    HSM_DECAL_BRIGHTNESS = global.HSM_DECAL_BRIGHTNESS / 100.0;
    HSM_DECAL_GAMMA = global.HSM_DECAL_GAMMA;
    HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_DECAL_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_DECAL_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_DECAL_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_DECAL_BLEND_MODE = global.HSM_DECAL_BLEND_MODE;
    HSM_DECAL_SOURCE_MATTE_TYPE = global.HSM_DECAL_SOURCE_MATTE_TYPE;
    HSM_DECAL_MIPMAPPING_BLEND_BIAS = global.HSM_DECAL_MIPMAPPING_BLEND_BIAS;
    HSM_DECAL_MASK_MODE = global.HSM_DECAL_MASK_MODE;
    HSM_DECAL_CUTOUT_MODE = global.HSM_DECAL_CUTOUT_MODE;
    HSM_DECAL_DUALSCREEN_VIS_MODE = global.HSM_DECAL_DUALSCREEN_VIS_MODE;
    HSM_DECAL_FOLLOW_LAYER = global.HSM_DECAL_FOLLOW_LAYER;
    HSM_DECAL_FOLLOW_MODE = global.HSM_DECAL_FOLLOW_MODE;
    HSM_DECAL_FOLLOW_FULL_USES_ZOOM = global.HSM_DECAL_FOLLOW_FULL_USES_ZOOM;
    HSM_DECAL_FILL_MODE = global.HSM_DECAL_FILL_MODE;
    HSM_DECAL_SPLIT_PRESERVE_CENTER = global.HSM_DECAL_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_DECAL_SPLIT_REPEAT_WIDTH = global.HSM_DECAL_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_DECAL_SCALE = global.HSM_DECAL_SCALE / 100.0;
    HSM_DECAL_SCALE_X = global.HSM_DECAL_SCALE_X / 100.0;
    HSM_DECAL_POS_X = global.HSM_DECAL_POS_X / (-100.0);
    HSM_DECAL_POS_Y = global.HSM_DECAL_POS_Y / 100.0;
    HSM_CAB_GLASS_OPACITY = global.HSM_CAB_GLASS_OPACITY / 100.0;
    HSM_CAB_GLASS_COLORIZE_ON = global.HSM_CAB_GLASS_COLORIZE_ON;
    HSM_CAB_GLASS_HUE = global.HSM_CAB_GLASS_HUE / 360.0;
    HSM_CAB_GLASS_SATURATION = global.HSM_CAB_GLASS_SATURATION / 100.0;
    HSM_CAB_GLASS_BRIGHTNESS = global.HSM_CAB_GLASS_BRIGHTNESS / 100.0;
    HSM_CAB_GLASS_GAMMA = global.HSM_CAB_GLASS_GAMMA;
    HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_CAB_GLASS_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_CAB_GLASS_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_CAB_GLASS_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_CAB_GLASS_BLEND_MODE = global.HSM_CAB_GLASS_BLEND_MODE;
    HSM_CAB_GLASS_SOURCE_MATTE_TYPE = global.HSM_CAB_GLASS_SOURCE_MATTE_TYPE;
    HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS = global.HSM_CAB_GLASS_MIPMAPPING_BLEND_BIAS;
    HSM_CAB_GLASS_MASK_MODE = global.HSM_CAB_GLASS_MASK_MODE;
    HSM_CAB_GLASS_CUTOUT_MODE = global.HSM_CAB_GLASS_CUTOUT_MODE;
    HSM_CAB_GLASS_DUALSCREEN_VIS_MODE = global.HSM_CAB_GLASS_DUALSCREEN_VIS_MODE;
    HSM_CAB_GLASS_FOLLOW_LAYER = global.HSM_CAB_GLASS_FOLLOW_LAYER;
    HSM_CAB_GLASS_FOLLOW_MODE = global.HSM_CAB_GLASS_FOLLOW_MODE;
    HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM = global.HSM_CAB_GLASS_FOLLOW_FULL_USES_ZOOM;
    HSM_CAB_GLASS_FILL_MODE = global.HSM_CAB_GLASS_FILL_MODE;
    HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER = global.HSM_CAB_GLASS_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH = global.HSM_CAB_GLASS_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_CAB_GLASS_SCALE = global.HSM_CAB_GLASS_SCALE / 100.0;
    HSM_CAB_GLASS_SCALE_X = global.HSM_CAB_GLASS_SCALE_X / 100.0;
    HSM_CAB_GLASS_POS_X = global.HSM_CAB_GLASS_POS_X / (-100.0);
    HSM_CAB_GLASS_POS_Y = global.HSM_CAB_GLASS_POS_Y / 100.0;
    HSM_TOP_OPACITY = global.HSM_TOP_OPACITY / 100.0;
    HSM_TOP_COLORIZE_ON = global.HSM_TOP_COLORIZE_ON;
    HSM_TOP_HUE = global.HSM_TOP_HUE / 360.0;
    HSM_TOP_SATURATION = global.HSM_TOP_SATURATION / 100.0;
    HSM_TOP_BRIGHTNESS = global.HSM_TOP_BRIGHTNESS / 100.0;
    HSM_TOP_GAMMA = global.HSM_TOP_GAMMA;
    HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER = global.HSM_TOP_AMBIENT_LIGHTING_MULTIPLIER / 100.0;
    HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER = global.HSM_TOP_AMBIENT2_LIGHTING_MULTIPLIER / 100.0;
    HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE = global.HSM_TOP_APPLY_AMBIENT_IN_ADD_MODE;
    HSM_TOP_BLEND_MODE = global.HSM_TOP_BLEND_MODE;
    HSM_TOP_SOURCE_MATTE_TYPE = global.HSM_TOP_SOURCE_MATTE_TYPE;
    HSM_TOP_MIPMAPPING_BLEND_BIAS = global.HSM_TOP_MIPMAPPING_BLEND_BIAS;
    HSM_TOP_MASK_MODE = global.HSM_TOP_MASK_MODE;
    HSM_TOP_CUTOUT_MODE = global.HSM_TOP_CUTOUT_MODE;
    HSM_TOP_DUALSCREEN_VIS_MODE = global.HSM_TOP_DUALSCREEN_VIS_MODE;
    HSM_TOP_FOLLOW_LAYER = global.HSM_TOP_FOLLOW_LAYER;
    HSM_TOP_FOLLOW_MODE = global.HSM_TOP_FOLLOW_MODE;
    HSM_TOP_FOLLOW_FULL_USES_ZOOM = global.HSM_TOP_FOLLOW_FULL_USES_ZOOM;
    HSM_TOP_FILL_MODE = global.HSM_TOP_FILL_MODE;
    HSM_TOP_SPLIT_PRESERVE_CENTER = global.HSM_TOP_SPLIT_PRESERVE_CENTER / 1000.0;
    HSM_TOP_SPLIT_REPEAT_WIDTH = global.HSM_TOP_SPLIT_REPEAT_WIDTH / 1000.0;
    HSM_TOP_SCALE = global.HSM_TOP_SCALE / 100.0;
    HSM_TOP_SCALE_X = global.HSM_TOP_SCALE_X / 100.0;
    HSM_TOP_POS_X = global.HSM_TOP_POS_X / (-100.0);
    HSM_TOP_POS_Y = global.HSM_TOP_POS_Y / 100.0;
    HSM_TOP_MIRROR_WRAP = global.HSM_TOP_MIRROR_WRAP;
    HSM_RENDER_SIMPLE_MODE = global.HSM_RENDER_SIMPLE_MODE;
    HSM_RENDER_SIMPLE_MASK_TYPE = global.HSM_RENDER_SIMPLE_MASK_TYPE;
    ch_spc = vec2(0.0);
    ch_exc = vec2(276705.0, 32776.0);
    ch_quo = vec2(1797408.0, 0.0);
    ch_hsh = vec2(10738.0, 1134484.0);
    ch_dol = vec2(538883.0, 19976.0);
    ch_pct = vec2(1664033.0, 68006.0);
    ch_amp = vec2(545090.0, 174362.0);
    ch_apo = vec2(798848.0, 0.0);
    ch_lbr = vec2(270466.0, 66568.0);
    ch_rbr = vec2(528449.0, 33296.0);
    ch_ast = vec2(10471.0, 1688832.0);
    ch_crs = vec2(4167.0, 1606144.0);
    ch_per = vec2(0.0, 1560.0);
    ch_dsh = vec2(7.0, 1572864.0);
    ch_com = vec2(0.0, 1544.0);
    ch_lsl = vec2(1057.0, 67584.0);
    ch_0 = vec2(935221.0, 731292.0);
    ch_1 = vec2(274497.0, 33308.0);
    ch_2 = vec2(934929.0, 1116222.0);
    ch_3 = vec2(934931.0, 1058972.0);
    ch_4 = vec2(137380.0, 1302788.0);
    ch_5 = vec2(2048263.0, 1058972.0);
    ch_6 = vec2(401671.0, 1190044.0);
    ch_7 = vec2(2032673.0, 66576.0);
    ch_8 = vec2(935187.0, 1190044.0);
    ch_9 = vec2(935187.0, 1581336.0);
    ch_col = vec2(195.0, 1560.0);
    ch_scl = vec2(195.0, 1544.0);
    ch_les = vec2(135300.0, 66052.0);
    ch_equ = vec2(496.0, 3968.0);
    ch_grt = vec2(528416.0, 541200.0);
    ch_que = vec2(934929.0, 1081352.0);
    ch_ats = vec2(935285.0, 714780.0);
    ch_A = vec2(935188.0, 780450.0);
    ch_B = vec2(1983767.0, 1190076.0);
    ch_C = vec2(935172.0, 133276.0);
    ch_D = vec2(1983764.0, 665788.0);
    ch_E = vec2(2048263.0, 1181758.0);
    ch_F = vec2(2048263.0, 1181728.0);
    ch_G = vec2(935173.0, 1714334.0);
    ch_H = vec2(1131799.0, 1714338.0);
    ch_I = vec2(921665.0, 33308.0);
    ch_J = vec2(66576.0, 665756.0);
    ch_K = vec2(1132870.0, 166178.0);
    ch_L = vec2(1065220.0, 133182.0);
    ch_M = vec2(1142100.0, 665762.0);
    ch_N = vec2(1140052.0, 1714338.0);
    ch_O = vec2(935188.0, 665756.0);
    ch_P = vec2(1983767.0, 1181728.0);
    ch_Q = vec2(935188.0, 698650.0);
    ch_R = vec2(1983767.0, 1198242.0);
    ch_S = vec2(935171.0, 1058972.0);
    ch_T = vec2(2035777.0, 33288.0);
    ch_U = vec2(1131796.0, 665756.0);
    ch_V = vec2(1131796.0, 664840.0);
    ch_W = vec2(1131861.0, 699028.0);
    ch_X = vec2(1131681.0, 84130.0);
    ch_Y = vec2(1131794.0, 1081864.0);
    ch_Z = vec2(1968194.0, 133180.0);
    ch_lsb = vec2(925826.0, 66588.0);
    ch_rsl = vec2(16513.0, 16512.0);
    ch_rsb = vec2(919584.0, 1065244.0);
    ch_pow = vec2(272656.0, 0.0);
    ch_usc = vec2(0.0, 62.0);
    ch_a = vec2(224.0, 649374.0);
    ch_b = vec2(1065444.0, 665788.0);
    ch_c = vec2(228.0, 657564.0);
    ch_d = vec2(66804.0, 665758.0);
    ch_e = vec2(228.0, 772124.0);
    ch_f = vec2(401543.0, 1115152.0);
    ch_g = vec2(244.0, 665474.0);
    ch_h = vec2(1065444.0, 665762.0);
    ch_i = vec2(262209.0, 33292.0);
    ch_j = vec2(131168.0, 1066252.0);
    ch_k = vec2(1065253.0, 199204.0);
    ch_l = vec2(266305.0, 33292.0);
    ch_m = vec2(421.0, 698530.0);
    ch_n = vec2(452.0, 1198372.0);
    ch_o = vec2(228.0, 665756.0);
    ch_p = vec2(484.0, 667424.0);
    ch_q = vec2(244.0, 665474.0);
    ch_r = vec2(354.0, 590904.0);
    ch_s = vec2(228.0, 114844.0);
    ch_t = vec2(8674.0, 66824.0);
    ch_u = vec2(292.0, 1198868.0);
    ch_v = vec2(276.0, 664840.0);
    ch_w = vec2(276.0, 700308.0);
    ch_x = vec2(292.0, 1149220.0);
    ch_y = vec2(292.0, 1163824.0);
    ch_z = vec2(480.0, 1148988.0);
    ch_lpa = vec2(401542.0, 66572.0);
    ch_bar = vec2(266304.0, 33288.0);
    ch_rpa = vec2(788512.0, 1589528.0);
    ch_tid = vec2(675840.0, 0.0);
    ch_lar = vec2(8387.0, 1147904.0);
    TEXT_MASK = 0.0;
    CUR_UV = vec2(0.0);
    print_pos = vec2(0.0);
    vec2 UNFLIPPED_VIEWPORT_COORD = vTexCoord;
    vec2 VIEWPORT_COORD = vTexCoord;
    vec2 param = vTexCoord;
    vec4 _5790 = HSM_UpdateGlobalScreenValuesFromCache(InfoCachePass, param);
    if (!CACHE_INFO_CHANGED)
    {
        FragColor = texture(TextPassFeedback, UNFLIPPED_VIEWPORT_COORD);
        return;
    }
    VIEWPORT_COORD.y = ((HSM_FLIP_VIEWPORT_VERTICAL * HSM_FLIP_CORE_VERTICAL) * (VIEWPORT_COORD.y - 0.5)) + 0.5;
    VIEWPORT_COORD.x = ((HSM_FLIP_VIEWPORT_HORIZONTAL * HSM_FLIP_CORE_HORIZONTAL) * (VIEWPORT_COORD.x - 0.5)) + 0.5;
    vec2 param_1 = VIEWPORT_COORD - vec2(MAX_NEGATIVE_CROP, -MAX_NEGATIVE_CROP);
    float _5827 = GetText(param_1);
    FragColor = vec4(_5827);
}

